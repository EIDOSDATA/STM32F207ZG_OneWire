
Light_Weight_Onewire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008790  08008790  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008798  08008798  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005304  200000d4  08008874  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053d8  08008874  000253d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc8e  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039f2  00000000  00000000  0003cd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  00040780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  00041dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005237  00000000  00000000  00043258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c24  00000000  00000000  0004848f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdeb5  00000000  00000000  0005b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  00128fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800854c 	.word	0x0800854c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0800854c 	.word	0x0800854c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <safeprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void safeprintf(const char *fmt, ...) {
 80004d4:	b40f      	push	{r0, r1, r2, r3}
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
	va_list va;

	va_start(va, fmt);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	607b      	str	r3, [r7, #4]
	osKernelLock();
 80004e2:	f003 fb15 	bl	8003b10 <osKernelLock>
	vprintf(fmt, va);
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	6938      	ldr	r0, [r7, #16]
 80004ea:	f007 f943 	bl	8007774 <viprintf>
	osKernelUnlock();
 80004ee:	f003 fb47 	bl	8003b80 <osKernelUnlock>
	va_end(va);
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f000 ff3c 	bl	8001380 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 f83a 	bl	8000580 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050c:	f000 f97e 	bl	800080c <MX_GPIO_Init>
	MX_DMA_Init();
 8000510:	f000 f926 	bl	8000760 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000514:	f000 f8d0 	bl	80006b8 <MX_USART3_UART_Init>
	MX_USART1_UART_Init();
 8000518:	f000 f87a 	bl	8000610 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800051c:	f000 f8a2 	bl	8000664 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8000520:	f000 f8f4 	bl	800070c <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Application running on STM32F429ZI-Nucleo board!\r\n");
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0x64>)
 8000526:	f007 f91d 	bl	8007764 <puts>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800052a:	f003 fa8b 	bl	8003a44 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of lwow_task */
	lwow_taskHandle = osThreadNew(start_lwow_task, NULL, &lwow_task_attributes);
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <main+0x68>)
 8000530:	2100      	movs	r1, #0
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <main+0x6c>)
 8000534:	f003 fb68 	bl	8003c08 <osThreadNew>
 8000538:	4602      	mov	r2, r0
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x70>)
 800053c:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* Handle OW on multiple instances */
	osThreadNew(start_lwow_task, &ow_uart_link_1, &lwow_task_attributes);
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <main+0x68>)
 8000540:	490c      	ldr	r1, [pc, #48]	; (8000574 <main+0x74>)
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x6c>)
 8000544:	f003 fb60 	bl	8003c08 <osThreadNew>
	osThreadNew(start_lwow_task, &ow_uart_link_2, &lwow_task_attributes);
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <main+0x68>)
 800054a:	490b      	ldr	r1, [pc, #44]	; (8000578 <main+0x78>)
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0x6c>)
 800054e:	f003 fb5b 	bl	8003c08 <osThreadNew>
	osThreadNew(start_lwow_task, &ow_uart_link_3, &lwow_task_attributes);
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <main+0x68>)
 8000554:	4909      	ldr	r1, [pc, #36]	; (800057c <main+0x7c>)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x6c>)
 8000558:	f003 fb56 	bl	8003c08 <osThreadNew>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800055c:	f003 faa4 	bl	8003aa8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000560:	e7fe      	b.n	8000560 <main+0x60>
 8000562:	bf00      	nop
 8000564:	08008570 	.word	0x08008570
 8000568:	080086a4 	.word	0x080086a4
 800056c:	08000969 	.word	0x08000969
 8000570:	20005104 	.word	0x20005104
 8000574:	20000000 	.word	0x20000000
 8000578:	20000020 	.word	0x20000020
 800057c:	20000040 	.word	0x20000040

08000580 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b092      	sub	sp, #72	; 0x48
 8000584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f86b 	bl	800766a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2300      	movs	r3, #0
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80005b6:	230d      	movs	r3, #13
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80005ba:	23c3      	movs	r3, #195	; 0xc3
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80005c2:	2305      	movs	r3, #5
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fe3e 	bl	800224c <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x5a>
		Error_Handler();
 80005d6:	f000 fa35 	bl	8000a44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2103      	movs	r1, #3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f878 	bl	80026ec <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x86>
		Error_Handler();
 8000602:	f000 fa1f 	bl	8000a44 <Error_Handler>
	}
}
 8000606:	bf00      	nop
 8000608:	3748      	adds	r7, #72	; 0x48
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_USART1_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000648:	f002 fd34 	bl	80030b4 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000652:	f000 f9f7 	bl	8000a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20005288 	.word	0x20005288
 8000660:	40011000 	.word	0x40011000

08000664 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f002 fd0a 	bl	80030b4 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006a6:	f000 f9cd 	bl	8000a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20005308 	.word	0x20005308
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART3_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f002 fce0 	bl	80030b4 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80006fa:	f000 f9a3 	bl	8000a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200050c4 	.word	0x200050c4
 8000708:	40004800 	.word	0x40004800

0800070c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART6_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART6_UART_Init+0x4c>)
 8000744:	f002 fcb6 	bl	80030b4 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800074e:	f000 f979 	bl	8000a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200052c8 	.word	0x200052c8
 800075c:	40011400 	.word	0x40011400

08000760 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_DMA_Init+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <MX_DMA_Init+0xa8>)
 8000770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_DMA_Init+0xa8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_DMA_Init+0xa8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_DMA_Init+0xa8>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_DMA_Init+0xa8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2105      	movs	r1, #5
 80007a2:	2010      	movs	r0, #16
 80007a4:	f000 ff01 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007a8:	2010      	movs	r0, #16
 80007aa:	f000 ff1a 	bl	80015e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2105      	movs	r1, #5
 80007b2:	2011      	movs	r0, #17
 80007b4:	f000 fef9 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f000 ff12 	bl	80015e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	2039      	movs	r0, #57	; 0x39
 80007c4:	f000 fef1 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007c8:	2039      	movs	r0, #57	; 0x39
 80007ca:	f000 ff0a 	bl	80015e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2105      	movs	r1, #5
 80007d2:	203a      	movs	r0, #58	; 0x3a
 80007d4:	f000 fee9 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007d8:	203a      	movs	r0, #58	; 0x3a
 80007da:	f000 ff02 	bl	80015e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2045      	movs	r0, #69	; 0x45
 80007e4:	f000 fee1 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007e8:	2045      	movs	r0, #69	; 0x45
 80007ea:	f000 fefa 	bl	80015e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	2046      	movs	r0, #70	; 0x46
 80007f4:	f000 fed9 	bl	80015aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007f8:	2046      	movs	r0, #70	; 0x46
 80007fa:	f000 fef2 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <MX_GPIO_Init+0x120>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a40      	ldr	r2, [pc, #256]	; (800092c <MX_GPIO_Init+0x120>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <MX_GPIO_Init+0x120>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <MX_GPIO_Init+0x120>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a39      	ldr	r2, [pc, #228]	; (800092c <MX_GPIO_Init+0x120>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0x120>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0x120>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <MX_GPIO_Init+0x120>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0x120>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <MX_GPIO_Init+0x120>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0x120>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a24      	ldr	r2, [pc, #144]	; (800092c <MX_GPIO_Init+0x120>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0x120>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0x120>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1d      	ldr	r2, [pc, #116]	; (800092c <MX_GPIO_Init+0x120>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_GPIO_Init+0x120>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <MX_GPIO_Init+0x124>)
 80008d0:	f001 fca4 	bl	800221c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_GPIO_Init+0x128>)
 80008dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_GPIO_Init+0x12c>)
 80008ea:	f001 f9fd 	bl	8001ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <MX_GPIO_Init+0x124>)
 8000906:	f001 f9ef 	bl	8001ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0x124>)
 800091e:	f001 f9e3 	bl	8001ce8 <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40021800 	.word	0x40021800
 8000934:	10110000 	.word	0x10110000
 8000938:	40020800 	.word	0x40020800

0800093c <__io_putchar>:
 * \param[in]       ch: Character to send
 * \param[in]       f: File pointer
 * \return          Written character
 */
#ifdef __GNUC__
int __io_putchar(int ch) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
#else
int fputc(int ch, FILE* fil) {
#endif
	uint8_t c = (uint8_t) ch;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, &c, 1, 100);
 800094a:	f107 010f 	add.w	r1, r7, #15
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	2201      	movs	r2, #1
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <__io_putchar+0x28>)
 8000954:	f002 fc27 	bl	80031a6 <HAL_UART_Transmit>
	return ch;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200050c4 	.word	0x200050c4

08000968 <start_lwow_task>:
 * @brief  Function implementing the lwow_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_lwow_task */
void start_lwow_task(void *argument) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
#define ROM_IDS_SIZE                    10
	ow_uart_link_t *link = argument;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	617b      	str	r3, [r7, #20]
	lwow_rom_t *rom_ids;
	size_t rom_found;
	lwowr_t res;

	/* Disable default and unknown thread */
	if (link == NULL) {
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <start_lwow_task+0x16>
		osThreadExit();
 800097a:	f003 f9f1 	bl	8003d60 <osThreadExit>
	}

	/* Print thread started status */
	safeprintf("[OW %d] Task started\r\n", (int) link->id);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	7e1b      	ldrb	r3, [r3, #24]
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <start_lwow_task+0xa0>)
 8000986:	f7ff fda5 	bl	80004d4 <safeprintf>

	/* Allocate memory for roms */
	rom_ids = pvPortMalloc(sizeof(*rom_ids) * ROM_IDS_SIZE);
 800098a:	2050      	movs	r0, #80	; 0x50
 800098c:	f006 f882 	bl	8006a94 <pvPortMalloc>
 8000990:	6138      	str	r0, [r7, #16]
	if (rom_ids == NULL) {
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <start_lwow_task+0x40>
		safeprintf("[OW %d] Could not allocate rom_ids memory!\r\n",
				(int) link->id);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	7e1b      	ldrb	r3, [r3, #24]
		safeprintf("[OW %d] Could not allocate rom_ids memory!\r\n",
 800099c:	4619      	mov	r1, r3
 800099e:	481b      	ldr	r0, [pc, #108]	; (8000a0c <start_lwow_task+0xa4>)
 80009a0:	f7ff fd98 	bl	80004d4 <safeprintf>
		osThreadExit();
 80009a4:	f003 f9dc 	bl	8003d60 <osThreadExit>
	}

	/* Initialize OW instance */
	res = lwow_init(&link->ow, &lwow_ll_drv_stm32_hal, link->uart);
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4917      	ldr	r1, [pc, #92]	; (8000a10 <start_lwow_task+0xa8>)
 80009b2:	f006 fa79 	bl	8006ea8 <lwow_init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]

	/* Initialize OW with UART instance as custom parameter */
	safeprintf("[OW %d] Init OW: %d\r\n", (int) link->id, (int) res);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	7e1b      	ldrb	r3, [r3, #24]
 80009be:	4619      	mov	r1, r3
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <start_lwow_task+0xac>)
 80009c6:	f7ff fd85 	bl	80004d4 <safeprintf>

	/* Infinite loop */
	for (;;) {
		if (scan_onewire_devices(&link->ow, rom_ids, ROM_IDS_SIZE, &rom_found)
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	220a      	movs	r2, #10
 80009d2:	6939      	ldr	r1, [r7, #16]
 80009d4:	f006 fdb2 	bl	800753c <scan_onewire_devices>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d108      	bne.n	80009f0 <start_lwow_task+0x88>
				== lwowOK) {
			safeprintf("[OW %d] Devices scanned, found %d devices!\r\n",
					(int) link->id, (int) rom_found);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	7e1b      	ldrb	r3, [r3, #24]
			safeprintf("[OW %d] Devices scanned, found %d devices!\r\n",
 80009e2:	4619      	mov	r1, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	461a      	mov	r2, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <start_lwow_task+0xb0>)
 80009ea:	f7ff fd73 	bl	80004d4 <safeprintf>
 80009ee:	e005      	b.n	80009fc <start_lwow_task+0x94>
		} else {
			safeprintf("[OW %d] Device scan error\r\n", (int) link->id);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	7e1b      	ldrb	r3, [r3, #24]
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <start_lwow_task+0xb4>)
 80009f8:	f7ff fd6c 	bl	80004d4 <safeprintf>
		}
		osDelay(3000);
 80009fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a00:	f003 f9b4 	bl	8003d6c <osDelay>
		if (scan_onewire_devices(&link->ow, rom_ids, ROM_IDS_SIZE, &rom_found)
 8000a04:	e7e1      	b.n	80009ca <start_lwow_task+0x62>
 8000a06:	bf00      	nop
 8000a08:	080085a4 	.word	0x080085a4
 8000a0c:	080085bc 	.word	0x080085bc
 8000a10:	080086e8 	.word	0x080086e8
 8000a14:	080085ec 	.word	0x080085ec
 8000a18:	08008604 	.word	0x08008604
 8000a1c:	08008634 	.word	0x08008634

08000a20 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a32:	f000 fcc7 	bl	80013c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40001000 	.word	0x40001000

08000a44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a4a:	e7fe      	b.n	8000a4a <Error_Handler+0x6>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	f06f 0001 	mvn.w	r0, #1
 8000a92:	f000 fd8a 	bl	80015aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_UART_MspInit+0x278>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	f040 8092 	bne.w	8000bec <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000acc:	4b94      	ldr	r3, [pc, #592]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a93      	ldr	r2, [pc, #588]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad8:	4b91      	ldr	r3, [pc, #580]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae8:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a8c      	ldr	r2, [pc, #560]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = OW1_TX_Pin|OW1_RX_Pin;
 8000b00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b12:	2307      	movs	r3, #7
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4881      	ldr	r0, [pc, #516]	; (8000d24 <HAL_UART_MspInit+0x280>)
 8000b1e:	f001 f8e3 	bl	8001ce8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b22:	4b81      	ldr	r3, [pc, #516]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b24:	4a81      	ldr	r2, [pc, #516]	; (8000d2c <HAL_UART_MspInit+0x288>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b28:	4b7f      	ldr	r3, [pc, #508]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b30:	4b7d      	ldr	r3, [pc, #500]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b7c      	ldr	r3, [pc, #496]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b78      	ldr	r3, [pc, #480]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b77      	ldr	r3, [pc, #476]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b50:	4b75      	ldr	r3, [pc, #468]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b5c:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b62:	4871      	ldr	r0, [pc, #452]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b64:	f000 fd5a 	bl	800161c <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b6e:	f7ff ff69 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a6c      	ldr	r2, [pc, #432]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
 8000b78:	4a6b      	ldr	r2, [pc, #428]	; (8000d28 <HAL_UART_MspInit+0x284>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b7e:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000b80:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <HAL_UART_MspInit+0x290>)
 8000b82:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b84:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8c:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b92:	4b67      	ldr	r3, [pc, #412]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b98:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba0:	4b63      	ldr	r3, [pc, #396]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba6:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bac:	4b60      	ldr	r3, [pc, #384]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb2:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bbe:	485c      	ldr	r0, [pc, #368]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bc0:	f000 fd2c 	bl	800161c <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000bca:	f7ff ff3b 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd4:	4a56      	ldr	r2, [pc, #344]	; (8000d30 <HAL_UART_MspInit+0x28c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2025      	movs	r0, #37	; 0x25
 8000be0:	f000 fce3 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000be4:	2025      	movs	r0, #37	; 0x25
 8000be6:	f000 fcfc 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bea:	e180      	b.n	8000eee <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a51      	ldr	r2, [pc, #324]	; (8000d38 <HAL_UART_MspInit+0x294>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f040 80aa 	bne.w	8000d4c <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <HAL_UART_MspInit+0x27c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = OW3_TX_Pin|OW3_RX_Pin;
 8000c30:	230c      	movs	r3, #12
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c40:	2307      	movs	r3, #7
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4836      	ldr	r0, [pc, #216]	; (8000d24 <HAL_UART_MspInit+0x280>)
 8000c4c:	f001 f84c 	bl	8001ce8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c52:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <HAL_UART_MspInit+0x29c>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c56:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c90:	482a      	ldr	r0, [pc, #168]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000c92:	f000 fcc3 	bl	800161c <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000c9c:	f7ff fed2 	bl	8000a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_UART_MspInit+0x298>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cae:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_UART_MspInit+0x2a4>)
 8000cb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ccc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cec:	4815      	ldr	r0, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000cee:	f000 fc95 	bl	800161c <HAL_DMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000cf8:	f7ff fea4 	bl	8000a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0x2a0>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2026      	movs	r0, #38	; 0x26
 8000d0e:	f000 fc4c 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f000 fc65 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 8000d18:	e0e9      	b.n	8000eee <HAL_UART_MspInit+0x44a>
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	200051c8 	.word	0x200051c8
 8000d2c:	40026440 	.word	0x40026440
 8000d30:	20005108 	.word	0x20005108
 8000d34:	400264b8 	.word	0x400264b8
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	20005004 	.word	0x20005004
 8000d40:	40026088 	.word	0x40026088
 8000d44:	20005228 	.word	0x20005228
 8000d48:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <HAL_UART_MspInit+0x454>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d135      	bne.n	8000dc2 <HAL_UART_MspInit+0x31e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	4b68      	ldr	r3, [pc, #416]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a67      	ldr	r2, [pc, #412]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b65      	ldr	r3, [pc, #404]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	4b61      	ldr	r3, [pc, #388]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a60      	ldr	r2, [pc, #384]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da0:	2307      	movs	r3, #7
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	4855      	ldr	r0, [pc, #340]	; (8000f00 <HAL_UART_MspInit+0x45c>)
 8000dac:	f000 ff9c 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2105      	movs	r1, #5
 8000db4:	2027      	movs	r0, #39	; 0x27
 8000db6:	f000 fbf8 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dba:	2027      	movs	r0, #39	; 0x27
 8000dbc:	f000 fc11 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 8000dc0:	e095      	b.n	8000eee <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==USART6)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <HAL_UART_MspInit+0x460>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	f040 8090 	bne.w	8000eee <HAL_UART_MspInit+0x44a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a49      	ldr	r2, [pc, #292]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a42      	ldr	r2, [pc, #264]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <HAL_UART_MspInit+0x458>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OW2_TX_Pin|OW2_RX_Pin;
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e16:	2308      	movs	r3, #8
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4839      	ldr	r0, [pc, #228]	; (8000f08 <HAL_UART_MspInit+0x464>)
 8000e22:	f000 ff61 	bl	8001ce8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e28:	4a39      	ldr	r2, [pc, #228]	; (8000f10 <HAL_UART_MspInit+0x46c>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000e2c:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e2e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e32:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000e66:	4829      	ldr	r0, [pc, #164]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e68:	f000 fbd8 	bl	800161c <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x3d2>
      Error_Handler();
 8000e72:	f7ff fde7 	bl	8000a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_UART_MspInit+0x468>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000e84:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_UART_MspInit+0x474>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000e8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000ec4:	f000 fbaa 	bl	800161c <HAL_DMA_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8000ece:	f7ff fdb9 	bl	8000a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_UART_MspInit+0x470>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	2047      	movs	r0, #71	; 0x47
 8000ee4:	f000 fb61 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ee8:	2047      	movs	r0, #71	; 0x47
 8000eea:	f000 fb7a 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	; 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40004800 	.word	0x40004800
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40011400 	.word	0x40011400
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	20005064 	.word	0x20005064
 8000f10:	40026428 	.word	0x40026428
 8000f14:	20005168 	.word	0x20005168
 8000f18:	400264a0 	.word	0x400264a0

08000f1c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a36      	ldr	r2, [pc, #216]	; (8001004 <HAL_UART_MspDeInit+0xe8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d118      	bne.n	8000f60 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a35      	ldr	r2, [pc, #212]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000f34:	f023 0310 	bic.w	r3, r3, #16
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, OW1_TX_Pin|OW1_RX_Pin);
 8000f3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f3e:	4833      	ldr	r0, [pc, #204]	; (800100c <HAL_UART_MspDeInit+0xf0>)
 8000f40:	f001 f870 	bl	8002024 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fc15 	bl	8001778 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fc10 	bl	8001778 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000f58:	2025      	movs	r0, #37	; 0x25
 8000f5a:	f000 fb50 	bl	80015fe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8000f5e:	e04c      	b.n	8000ffa <HAL_UART_MspDeInit+0xde>
  else if(huart->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <HAL_UART_MspDeInit+0xf4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d117      	bne.n	8000f9a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a26      	ldr	r2, [pc, #152]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, OW3_TX_Pin|OW3_RX_Pin);
 8000f76:	210c      	movs	r1, #12
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <HAL_UART_MspDeInit+0xf0>)
 8000f7a:	f001 f853 	bl	8002024 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fbf8 	bl	8001778 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fbf3 	bl	8001778 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000f92:	2026      	movs	r0, #38	; 0x26
 8000f94:	f000 fb33 	bl	80015fe <HAL_NVIC_DisableIRQ>
}
 8000f98:	e02f      	b.n	8000ffa <HAL_UART_MspDeInit+0xde>
  else if(huart->Instance==USART3)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspDeInit+0xf8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d10e      	bne.n	8000fc2 <HAL_UART_MspDeInit+0xa6>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, DEBUG_TX_Pin|DEBUG_RX_Pin);
 8000fb0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <HAL_UART_MspDeInit+0xfc>)
 8000fb6:	f001 f835 	bl	8002024 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000fba:	2027      	movs	r0, #39	; 0x27
 8000fbc:	f000 fb1f 	bl	80015fe <HAL_NVIC_DisableIRQ>
}
 8000fc0:	e01b      	b.n	8000ffa <HAL_UART_MspDeInit+0xde>
  else if(huart->Instance==USART6)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_UART_MspDeInit+0x100>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d116      	bne.n	8000ffa <HAL_UART_MspDeInit+0xde>
    __HAL_RCC_USART6_CLK_DISABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_UART_MspDeInit+0xec>)
 8000fd2:	f023 0320 	bic.w	r3, r3, #32
 8000fd6:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, OW2_TX_Pin|OW2_RX_Pin);
 8000fd8:	21c0      	movs	r1, #192	; 0xc0
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <HAL_UART_MspDeInit+0x104>)
 8000fdc:	f001 f822 	bl	8002024 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fbc7 	bl	8001778 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fbc2 	bl	8001778 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000ff4:	2047      	movs	r0, #71	; 0x47
 8000ff6:	f000 fb02 	bl	80015fe <HAL_NVIC_DisableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40011000 	.word	0x40011000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40004400 	.word	0x40004400
 8001014:	40004800 	.word	0x40004800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40011400 	.word	0x40011400
 8001020:	40020800 	.word	0x40020800

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f000 fab6 	bl	80015aa <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800103e:	2036      	movs	r0, #54	; 0x36
 8001040:	f000 facf 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_InitTick+0xa4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_InitTick+0xa4>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_InitTick+0xa4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001060:	f107 0210 	add.w	r2, r7, #16
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fd50 	bl	8002b10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001070:	f001 fd0a 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 8001074:	4603      	mov	r3, r0
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_InitTick+0xa8>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_InitTick+0xac>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_InitTick+0xb0>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_InitTick+0xac>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_InitTick+0xac>)
 8001098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_InitTick+0xac>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_InitTick+0xac>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <HAL_InitTick+0xac>)
 80010aa:	f001 fd61 	bl	8002b70 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <HAL_InitTick+0xac>)
 80010b6:	f001 fdb3 	bl	8002c20 <HAL_TIM_Base_Start_IT>
 80010ba:	4603      	mov	r3, r0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	20005348 	.word	0x20005348
 80010d4:	40001000 	.word	0x40001000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA1_Stream5_IRQHandler+0x10>)
 800110a:	f000 fbb5 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20005004 	.word	0x20005004

08001118 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA1_Stream6_IRQHandler+0x10>)
 800111e:	f000 fbab 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20005228 	.word	0x20005228

0800112c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <USART1_IRQHandler+0x10>)
 8001132:	f002 f91f 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20005288 	.word	0x20005288

08001140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART2_IRQHandler+0x10>)
 8001146:	f002 f915 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20005308 	.word	0x20005308

08001154 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <USART3_IRQHandler+0x10>)
 800115a:	f002 f90b 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200050c4 	.word	0x200050c4

08001168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM6_DAC_IRQHandler+0x10>)
 800116e:	f001 fdc5 	bl	8002cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20005348 	.word	0x20005348

0800117c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA2_Stream1_IRQHandler+0x10>)
 8001182:	f000 fb79 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20005064 	.word	0x20005064

08001190 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA2_Stream2_IRQHandler+0x10>)
 8001196:	f000 fb6f 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200051c8 	.word	0x200051c8

080011a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DMA2_Stream6_IRQHandler+0x10>)
 80011aa:	f000 fb65 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20005168 	.word	0x20005168

080011b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA2_Stream7_IRQHandler+0x10>)
 80011be:	f000 fb5b 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20005108 	.word	0x20005108

080011cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USART6_IRQHandler+0x10>)
 80011d2:	f002 f8cf 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200052c8 	.word	0x200052c8

080011e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00a      	b.n	8001208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011f2:	f3af 8000 	nop.w
 80011f6:	4601      	mov	r1, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf0      	blt.n	80011f2 <_read+0x12>
	}

return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e009      	b.n	8001240 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb81 	bl	800093c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf1      	blt.n	800122c <_write+0x12>
	}
	return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_close>:

int _close(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	605a      	str	r2, [r3, #4]
	return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <_isatty>:

int _isatty(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
	return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f006 f98c 	bl	8007600 <__errno>
 80012e8:	4602      	mov	r2, r0
 80012ea:	230c      	movs	r3, #12
 80012ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20020000 	.word	0x20020000
 8001314:	00000400 	.word	0x00000400
 8001318:	200000f0 	.word	0x200000f0
 800131c:	200053d8 	.word	0x200053d8

08001320 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
  ldr  r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800134a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800134c:	f842 3b04 	str.w	r3, [r2], #4

08001350 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001356:	f7ff ffe3 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f006 f957 	bl	800760c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff f8cf 	bl	8000500 <main>
  bx  lr
 8001362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001368:	080087a0 	.word	0x080087a0
  ldr  r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001370:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8001374:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8001378:	200053d8 	.word	0x200053d8

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f8f3 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fe38 	bl	8001024 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fb4a 	bl	8000a4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_IncTick+0x20>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000068 	.word	0x20000068
 80013e4:	20005390 	.word	0x20005390

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20005390 	.word	0x20005390

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db10      	blt.n	80014cc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4909      	ldr	r1, [pc, #36]	; (80014d8 <__NVIC_DisableIRQ+0x40>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	3320      	adds	r3, #32
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff2d 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff42 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ffb2 	bl	8001530 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff81 	bl	80014dc <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff35 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff43 	bl	8001498 <__NVIC_DisableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff fede 	bl	80013e8 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e099      	b.n	800176c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	e00f      	b.n	800167a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165a:	f7ff fec5 	bl	80013e8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b05      	cmp	r3, #5
 8001666:	d908      	bls.n	800167a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e078      	b.n	800176c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e8      	bne.n	800165a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_DMA_Init+0x158>)
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	2b04      	cmp	r3, #4
 800170c:	d117      	bne.n	800173e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fa67 	bl	8001bf4 <DMA_CheckFifoParam>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800173a:	2301      	movs	r3, #1
 800173c:	e016      	b.n	800176c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa20 	bl	8001b8c <DMA_CalcBaseAndBitshift>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	223f      	movs	r2, #63	; 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f010803f 	.word	0xf010803f

08001778 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e050      	b.n	800182c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d101      	bne.n	800179a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
 8001798:	e048      	b.n	800182c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2221      	movs	r2, #33	; 0x21
 80017d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f9d6 	bl	8001b8c <DMA_CalcBaseAndBitshift>
 80017e0:	4603      	mov	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	223f      	movs	r2, #63	; 0x3f
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00c      	b.n	800186c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
	...

08001878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_DMA_IRQHandler+0x258>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_DMA_IRQHandler+0x25c>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2204      	movs	r2, #4
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d012      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2204      	movs	r2, #4
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2210      	movs	r2, #16
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d043      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2210      	movs	r2, #16
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d018      	beq.n	80019ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d024      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
 80019a6:	e01f      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2220      	movs	r2, #32
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 808e 	beq.w	8001b16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8086 	beq.w	8001b16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	2220      	movs	r2, #32
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d136      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0216 	bic.w	r2, r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x1da>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	223f      	movs	r2, #63	; 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d07d      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
        }
        return;
 8001a8e:	e078      	b.n	8001b82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01c      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d030      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e02b      	b.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e022      	b.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
 8001ad0:	20000060 	.word	0x20000060
 8001ad4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0210 	bic.w	r2, r2, #16
 8001af4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d032      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d022      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d307      	bcc.n	8001b5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f2      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x2ca>
 8001b5c:	e000      	b.n	8001b60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e000      	b.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b82:	bf00      	nop
    }
  }
}
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b10      	subs	r3, #16
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <DMA_CalcBaseAndBitshift+0x60>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d909      	bls.n	8001bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	1d1a      	adds	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58
 8001bcc:	e007      	b.n	8001bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	aaaaaaab 	.word	0xaaaaaaab
 8001bf0:	080086e0 	.word	0x080086e0

08001bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d855      	bhi.n	8001cc0 <DMA_CheckFifoParam+0xcc>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <DMA_CheckFifoParam+0x28>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c3f 	.word	0x08001c3f
 8001c24:	08001c2d 	.word	0x08001c2d
 8001c28:	08001cc1 	.word	0x08001cc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d045      	beq.n	8001cc4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e042      	b.n	8001cc4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c46:	d13f      	bne.n	8001cc8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e03c      	b.n	8001cc8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c56:	d121      	bne.n	8001c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d836      	bhi.n	8001ccc <DMA_CheckFifoParam+0xd8>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <DMA_CheckFifoParam+0x70>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c7b 	.word	0x08001c7b
 8001c6c:	08001c75 	.word	0x08001c75
 8001c70:	08001c8d 	.word	0x08001c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      break;
 8001c78:	e02f      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8a:	e021      	b.n	8001cd0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c94:	d11e      	bne.n	8001cd4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9a:	e01b      	b.n	8001cd4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d902      	bls.n	8001ca8 <DMA_CheckFifoParam+0xb4>
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d003      	beq.n	8001cae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca6:	e018      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e015      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbe:	e00b      	b.n	8001cd8 <DMA_CheckFifoParam+0xe4>
      break;
 8001cc0:	bf00      	nop
 8001cc2:	e00a      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cc4:	bf00      	nop
 8001cc6:	e008      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cc8:	bf00      	nop
 8001cca:	e006      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001ccc:	bf00      	nop
 8001cce:	e004      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cd0:	bf00      	nop
 8001cd2:	e002      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;   
 8001cd4:	bf00      	nop
 8001cd6:	e000      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cd8:	bf00      	nop
    }
  } 
  
  return status; 
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	e16f      	b.n	8001fd8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8161 	beq.w	8001fd2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d00b      	beq.n	8001d30 <HAL_GPIO_Init+0x48>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d24:	2b11      	cmp	r3, #17
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d130      	bne.n	8001d92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d66:	2201      	movs	r2, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 0201 	and.w	r2, r3, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0xea>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d123      	bne.n	8001e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0203 	and.w	r2, r3, #3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80bb 	beq.w	8001fd2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6c:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e78:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_GPIO_Init+0x310>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_GPIO_Init+0x314>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d031      	beq.n	8001f08 <HAL_GPIO_Init+0x220>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_GPIO_Init+0x318>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d02b      	beq.n	8001f04 <HAL_GPIO_Init+0x21c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a55      	ldr	r2, [pc, #340]	; (8002004 <HAL_GPIO_Init+0x31c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d025      	beq.n	8001f00 <HAL_GPIO_Init+0x218>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x320>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01f      	beq.n	8001efc <HAL_GPIO_Init+0x214>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a53      	ldr	r2, [pc, #332]	; (800200c <HAL_GPIO_Init+0x324>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d019      	beq.n	8001ef8 <HAL_GPIO_Init+0x210>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x328>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x20c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x32c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x208>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x204>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x334>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x200>
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	e010      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ee8:	2309      	movs	r3, #9
 8001eea:	e00e      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001eec:	2307      	movs	r3, #7
 8001eee:	e00c      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	e00a      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	e008      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001efc:	2303      	movs	r3, #3
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x222>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1c:	4936      	ldr	r1, [pc, #216]	; (8001ff8 <HAL_GPIO_Init+0x310>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f4e:	4a34      	ldr	r2, [pc, #208]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f54:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f78:	4a29      	ldr	r2, [pc, #164]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f47f ae88 	bne.w	8001cf8 <HAL_GPIO_Init+0x10>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40021c00 	.word	0x40021c00
 800201c:	40022000 	.word	0x40022000
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002032:	e0d1      	b.n	80021d8 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002034:	2201      	movs	r2, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80c4 	beq.w	80021d2 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800204a:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_GPIO_DeInit+0x1cc>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a61      	ldr	r2, [pc, #388]	; (80021f4 <HAL_GPIO_DeInit+0x1d0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d031      	beq.n	80020d8 <HAL_GPIO_DeInit+0xb4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <HAL_GPIO_DeInit+0x1d4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d02b      	beq.n	80020d4 <HAL_GPIO_DeInit+0xb0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a5f      	ldr	r2, [pc, #380]	; (80021fc <HAL_GPIO_DeInit+0x1d8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d025      	beq.n	80020d0 <HAL_GPIO_DeInit+0xac>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <HAL_GPIO_DeInit+0x1dc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d01f      	beq.n	80020cc <HAL_GPIO_DeInit+0xa8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_GPIO_DeInit+0x1e0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d019      	beq.n	80020c8 <HAL_GPIO_DeInit+0xa4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_DeInit+0x1e4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_GPIO_DeInit+0xa0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_GPIO_DeInit+0x1e8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <HAL_GPIO_DeInit+0x9c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_GPIO_DeInit+0x1ec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <HAL_GPIO_DeInit+0x98>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_GPIO_DeInit+0x1f0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_GPIO_DeInit+0x94>
 80020b4:	2308      	movs	r3, #8
 80020b6:	e010      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020b8:	2309      	movs	r3, #9
 80020ba:	e00e      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020bc:	2307      	movs	r3, #7
 80020be:	e00c      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020c0:	2306      	movs	r3, #6
 80020c2:	e00a      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020c4:	2305      	movs	r3, #5
 80020c6:	e008      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e006      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e004      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_DeInit+0xb6>
 80020d8:	2300      	movs	r3, #0
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d132      	bne.n	8002152 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020ec:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4948      	ldr	r1, [pc, #288]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	4945      	ldr	r1, [pc, #276]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	4941      	ldr	r1, [pc, #260]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 8002112:	4013      	ands	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	493e      	ldr	r1, [pc, #248]	; (8002218 <HAL_GPIO_DeInit+0x1f4>)
 8002120:	4013      	ands	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <HAL_GPIO_DeInit+0x1cc>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43da      	mvns	r2, r3
 8002144:	482a      	ldr	r0, [pc, #168]	; (80021f0 <HAL_GPIO_DeInit+0x1cc>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	400a      	ands	r2, r1
 800214c:	3302      	adds	r3, #2
 800214e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2103      	movs	r1, #3
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	08d2      	lsrs	r2, r2, #3
 8002188:	4019      	ands	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2103      	movs	r1, #3
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	2101      	movs	r1, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2103      	movs	r1, #3
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	401a      	ands	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f af27 	bne.w	8002034 <HAL_GPIO_DeInit+0x10>
  }
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40022000 	.word	0x40022000
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e237      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d050      	beq.n	800230c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226a:	4ba3      	ldr	r3, [pc, #652]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00c      	beq.n	8002290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002276:	4ba0      	ldr	r3, [pc, #640]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d112      	bne.n	80022a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b9d      	ldr	r3, [pc, #628]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228e:	d10b      	bne.n	80022a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b99      	ldr	r3, [pc, #612]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d036      	beq.n	800230a <HAL_RCC_OscConfig+0xbe>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d132      	bne.n	800230a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e212      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x2b0>)
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d013      	beq.n	80022e2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff f895 	bl	80013e8 <HAL_GetTick>
 80022be:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c2:	f7ff f891 	bl	80013e8 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1fc      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d4:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x76>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff f881 	bl	80013e8 <HAL_GetTick>
 80022e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ea:	f7ff f87d 	bl	80013e8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1e8      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x9e>
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d077      	beq.n	8002408 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002318:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002324:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232c:	2b08      	cmp	r3, #8
 800232e:	d126      	bne.n	800237e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002330:	4b71      	ldr	r3, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d120      	bne.n	800237e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233c:	4b6e      	ldr	r3, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e1bc      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	21f8      	movs	r1, #248	; 0xf8
 8002362:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	fa91 f1a1 	rbit	r1, r1
 800236a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	fab1 f181 	clz	r1, r1
 8002372:	b2c9      	uxtb	r1, r1
 8002374:	408b      	lsls	r3, r1
 8002376:	4960      	ldr	r1, [pc, #384]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237c:	e044      	b.n	8002408 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02a      	beq.n	80023dc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x2b4>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f82c 	bl	80013e8 <HAL_GetTick>
 8002390:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff f828 	bl	80013e8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e193      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b2:	4b51      	ldr	r3, [pc, #324]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	21f8      	movs	r1, #248	; 0xf8
 80023c0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	fa91 f1a1 	rbit	r1, r1
 80023c8:	60f9      	str	r1, [r7, #12]
  return result;
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	fab1 f181 	clz	r1, r1
 80023d0:	b2c9      	uxtb	r1, r1
 80023d2:	408b      	lsls	r3, r1
 80023d4:	4948      	ldr	r1, [pc, #288]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	e015      	b.n	8002408 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_RCC_OscConfig+0x2b4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff f801 	bl	80013e8 <HAL_GetTick>
 80023e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7fe fffd 	bl	80013e8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e168      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d030      	beq.n	8002476 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCC_OscConfig+0x2b8>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe ffe1 	bl	80013e8 <HAL_GetTick>
 8002426:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe ffdd 	bl	80013e8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e148      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1de>
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_RCC_OscConfig+0x2b8>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7fe ffca 	bl	80013e8 <HAL_GetTick>
 8002454:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe ffc6 	bl	80013e8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e131      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8088 	beq.w	8002594 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d110      	bne.n	80024b8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_RCC_OscConfig+0x2bc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_RCC_OscConfig+0x2bc>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x2bc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d123      	bne.n	8002518 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_OscConfig+0x2bc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <HAL_RCC_OscConfig+0x2bc>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024dc:	f7fe ff84 	bl	80013e8 <HAL_GetTick>
 80024e0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe ff80 	bl	80013e8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0eb      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40023802 	.word	0x40023802
 8002500:	42470000 	.word	0x42470000
 8002504:	42470e80 	.word	0x42470e80
 8002508:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x48c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0e5      	beq.n	80024e4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x490>)
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe ff5d 	bl	80013e8 <HAL_GetTick>
 800252e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe ff59 	bl	80013e8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0c2      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x2e6>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe ff47 	bl	80013e8 <HAL_GetTick>
 800255a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe ff43 	bl	80013e8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ac      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8097 	beq.w	80026cc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d061      	beq.n	800266e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d146      	bne.n	8002640 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_RCC_OscConfig+0x498>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff16 	bl	80013e8 <HAL_GetTick>
 80025bc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe ff12 	bl	80013e8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e07d      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025de:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x49c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	69d1      	ldr	r1, [r2, #28]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a12      	ldr	r2, [r2, #32]
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f4:	0192      	lsls	r2, r2, #6
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025fc:	0612      	lsls	r2, r2, #24
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002604:	0852      	lsrs	r2, r2, #1
 8002606:	3a01      	subs	r2, #1
 8002608:	0412      	lsls	r2, r2, #16
 800260a:	430a      	orrs	r2, r1
 800260c:	4934      	ldr	r1, [pc, #208]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_OscConfig+0x498>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fee6 	bl	80013e8 <HAL_GetTick>
 800261c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fee2 	bl	80013e8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04d      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x3d4>
 800263e:	e045      	b.n	80026cc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x498>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fecf 	bl	80013e8 <HAL_GetTick>
 800264a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fecb 	bl	80013e8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e036      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x402>
 800266c:	e02e      	b.n	80026cc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e029      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_OscConfig+0x494>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	429a      	cmp	r2, r3
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d115      	bne.n	80026c8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3728      	adds	r7, #40	; 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000
 80026dc:	40023870 	.word	0x40023870
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470060 	.word	0x42470060
 80026e8:	f0bc8000 	.word	0xf0bc8000

080026ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0d2      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d90c      	bls.n	8002728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0be      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002758:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a55      	ldr	r2, [pc, #340]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4950      	ldr	r1, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d040      	beq.n	8002804 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d115      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e085      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e079      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e071      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4939      	ldr	r1, [pc, #228]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fe08 	bl	80013e8 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fe04 	bl	80013e8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e059      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d20c      	bcs.n	800282c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e03c      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	491b      	ldr	r1, [pc, #108]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4913      	ldr	r1, [pc, #76]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800286a:	f000 f82b 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002878:	22f0      	movs	r2, #240	; 0xf0
 800287a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	60fa      	str	r2, [r7, #12]
  return result;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	40d3      	lsrs	r3, r2
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	fa21 f303 	lsr.w	r3, r1, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1d0>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1d4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fbc0 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	080086c8 	.word	0x080086c8
 80028bc:	20000060 	.word	0x20000060
 80028c0:	20000064 	.word	0x20000064

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d007      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x32>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d008      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x38>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 80b4 	bne.w	8002a58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028f2:	60bb      	str	r3, [r7, #8]
       break;
 80028f4:	e0b3      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b5e      	ldr	r3, [pc, #376]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028f8:	60bb      	str	r3, [r7, #8]
      break;
 80028fa:	e0b0      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002904:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04a      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	f04f 0400 	mov.w	r4, #0
 800291c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	ea03 0501 	and.w	r5, r3, r1
 8002928:	ea04 0602 	and.w	r6, r4, r2
 800292c:	4629      	mov	r1, r5
 800292e:	4632      	mov	r2, r6
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f04f 0400 	mov.w	r4, #0
 8002938:	0154      	lsls	r4, r2, #5
 800293a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800293e:	014b      	lsls	r3, r1, #5
 8002940:	4619      	mov	r1, r3
 8002942:	4622      	mov	r2, r4
 8002944:	1b49      	subs	r1, r1, r5
 8002946:	eb62 0206 	sbc.w	r2, r2, r6
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	0194      	lsls	r4, r2, #6
 8002954:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002958:	018b      	lsls	r3, r1, #6
 800295a:	1a5b      	subs	r3, r3, r1
 800295c:	eb64 0402 	sbc.w	r4, r4, r2
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	00e2      	lsls	r2, r4, #3
 800296a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800296e:	00d9      	lsls	r1, r3, #3
 8002970:	460b      	mov	r3, r1
 8002972:	4614      	mov	r4, r2
 8002974:	195b      	adds	r3, r3, r5
 8002976:	eb44 0406 	adc.w	r4, r4, r6
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	0262      	lsls	r2, r4, #9
 8002984:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002988:	0259      	lsls	r1, r3, #9
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	4618      	mov	r0, r3
 8002990:	4621      	mov	r1, r4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f04f 0400 	mov.w	r4, #0
 8002998:	461a      	mov	r2, r3
 800299a:	4623      	mov	r3, r4
 800299c:	f7fd fc18 	bl	80001d0 <__aeabi_uldivmod>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e049      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	f04f 0400 	mov.w	r4, #0
 80029b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	ea03 0501 	and.w	r5, r3, r1
 80029be:	ea04 0602 	and.w	r6, r4, r2
 80029c2:	4629      	mov	r1, r5
 80029c4:	4632      	mov	r2, r6
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f04f 0400 	mov.w	r4, #0
 80029ce:	0154      	lsls	r4, r2, #5
 80029d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d4:	014b      	lsls	r3, r1, #5
 80029d6:	4619      	mov	r1, r3
 80029d8:	4622      	mov	r2, r4
 80029da:	1b49      	subs	r1, r1, r5
 80029dc:	eb62 0206 	sbc.w	r2, r2, r6
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	f04f 0400 	mov.w	r4, #0
 80029e8:	0194      	lsls	r4, r2, #6
 80029ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ee:	018b      	lsls	r3, r1, #6
 80029f0:	1a5b      	subs	r3, r3, r1
 80029f2:	eb64 0402 	sbc.w	r4, r4, r2
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a04:	00d9      	lsls	r1, r3, #3
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	195b      	adds	r3, r3, r5
 8002a0c:	eb44 0406 	adc.w	r4, r4, r6
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	02a2      	lsls	r2, r4, #10
 8002a1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a1e:	0299      	lsls	r1, r3, #10
 8002a20:	460b      	mov	r3, r1
 8002a22:	4614      	mov	r4, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	4621      	mov	r1, r4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4623      	mov	r3, r4
 8002a32:	f7fd fbcd 	bl	80001d0 <__aeabi_uldivmod>
 8002a36:	4603      	mov	r3, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	60bb      	str	r3, [r7, #8]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a5a:	60bb      	str	r3, [r7, #8]
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000060 	.word	0x20000060

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002a8e:	f7ff fff1 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a92:	4601      	mov	r1, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002a9c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002aa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	603a      	str	r2, [r7, #0]
  return result;
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	080086d8 	.word	0x080086d8

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002ad2:	f7ff ffcf 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ae0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ae4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	603a      	str	r2, [r7, #0]
  return result;
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	40d3      	lsrs	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080086d8 	.word	0x080086d8

08002b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_GetClockConfig+0x58>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_GetClockConfig+0x58>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_GetClockConfig+0x58>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_RCC_GetClockConfig+0x58>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_GetClockConfig+0x5c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e041      	b.n	8002c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f839 	bl	8002c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 f9d0 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e04e      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d01d      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_TIM_Base_Start_IT+0xcc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d010      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	e007      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40001800 	.word	0x40001800

08002cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8ed 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8e0 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8ef 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0204 	mvn.w	r2, #4
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8c3 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8b6 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8c5 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0208 	mvn.w	r2, #8
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f899 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f88c 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f89b 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0210 	mvn.w	r2, #16
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f86f 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f862 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f871 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fdd0 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8fb 	bl	80030a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f835 	bl	8002f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8c6 	bl	8003090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3f      	ldr	r2, [pc, #252]	; (8003064 <TIM_Base_SetConfig+0x110>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d00f      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <TIM_Base_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a39      	ldr	r2, [pc, #228]	; (8003074 <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	; (8003064 <TIM_Base_SetConfig+0x110>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d027      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	; (8003068 <TIM_Base_SetConfig+0x114>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d023      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d017      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00f      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a23      	ldr	r2, [pc, #140]	; (8003088 <TIM_Base_SetConfig+0x134>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <TIM_Base_SetConfig+0x138>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <TIM_Base_SetConfig+0x110>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <TIM_Base_SetConfig+0x120>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d103      	bne.n	8003054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40010000 	.word	0x40010000
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40010400 	.word	0x40010400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800
 8003084:	40001800 	.word	0x40001800
 8003088:	40001c00 	.word	0x40001c00
 800308c:	40002000 	.word	0x40002000

08003090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03f      	b.n	8003146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fce2 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fbb9 	bl	8003870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01e      	b.n	800319e <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd fecf 	bl	8000f1c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d17c      	bne.n	80032c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_UART_Transmit+0x2c>
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e075      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Transmit+0x3e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e06e      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2221      	movs	r2, #33	; 0x21
 80031f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031fa:	f7fe f8f5 	bl	80013e8 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d108      	bne.n	8003228 <HAL_UART_Transmit+0x82>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e003      	b.n	8003230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003238:	e02a      	b.n	8003290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f9b0 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e036      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	3302      	adds	r3, #2
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e007      	b.n	8003282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1cf      	bne.n	800323a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f980 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	4613      	mov	r3, r2
 80032d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d140      	bne.n	8003366 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Receive_IT+0x26>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e039      	b.n	8003368 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Receive_IT+0x38>
 80032fe:	2302      	movs	r3, #2
 8003300:	e032      	b.n	8003368 <HAL_UART_Receive_IT+0x9e>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2222      	movs	r2, #34	; 0x22
 8003326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003340:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9d5 	bl	800376e <UART_Receive_IT>
      return;
 80033c4:	e0d1      	b.n	800356a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80b0 	beq.w	800352e <HAL_UART_IRQHandler+0x1ba>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_IRQHandler+0x70>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a5 	beq.w	800352e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_UART_IRQHandler+0xee>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	f043 0208 	orr.w	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d078      	beq.n	8003568 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_UART_IRQHandler+0x11c>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f96f 	bl	800376e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_UART_IRQHandler+0x144>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d031      	beq.n	800351c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8c0 	bl	800363e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d123      	bne.n	8003514 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <HAL_UART_IRQHandler+0x1fc>)
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe f99f 	bl	8001834 <HAL_DMA_Abort_IT>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003506:	4610      	mov	r0, r2
 8003508:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350a:	e00e      	b.n	800352a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f843 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003512:	e00a      	b.n	800352a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f83f 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351a:	e006      	b.n	800352a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f83b 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003528:	e01e      	b.n	8003568 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352a:	bf00      	nop
    return;
 800352c:	e01c      	b.n	8003568 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x1d6>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8ac 	bl	80036a0 <UART_Transmit_IT>
    return;
 8003548:	e00f      	b.n	800356a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_UART_IRQHandler+0x1f6>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8ed 	bl	800373e <UART_EndTransmit_IT>
    return;
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003568:	bf00      	nop
  }
}
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	08003679 	.word	0x08003679

08003574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e02c      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d028      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x30>
 80035ca:	f7fd ff0d 	bl	80013e8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d21d      	bcs.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e00f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0c3      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003654:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff ff80 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b21      	cmp	r3, #33	; 0x21
 80036b2:	d13e      	bne.n	8003732 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d114      	bne.n	80036e8 <UART_Transmit_IT+0x48>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d110      	bne.n	80036e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]
 80036e6:	e008      	b.n	80036fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6211      	str	r1, [r2, #32]
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4619      	mov	r1, r3
 8003708:	84d1      	strh	r1, [r2, #38]	; 0x26
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff08 	bl	8003574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b22      	cmp	r3, #34	; 0x22
 8003780:	d170      	bne.n	8003864 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d117      	bne.n	80037bc <UART_Receive_IT+0x4e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
 80037ba:	e026      	b.n	800380a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d007      	beq.n	80037e0 <UART_Receive_IT+0x72>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4619      	mov	r1, r3
 8003818:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800381a:	2b00      	cmp	r3, #0
 800381c:	d120      	bne.n	8003860 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0220 	bic.w	r2, r2, #32
 800382c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fe95 	bl	8003586 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e002      	b.n	8003866 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038b0:	f023 030c 	bic.w	r3, r3, #12
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	430b      	orrs	r3, r1
 80038bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a57      	ldr	r2, [pc, #348]	; (8003a38 <UART_SetConfig+0x1c8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <UART_SetConfig+0x78>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a56      	ldr	r2, [pc, #344]	; (8003a3c <UART_SetConfig+0x1cc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7ff f8f0 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	e002      	b.n	80038f6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7ff f8ca 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 80038f4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fe:	d14c      	bne.n	800399a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009a      	lsls	r2, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4a4a      	ldr	r2, [pc, #296]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	0119      	lsls	r1, r3, #4
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fbb2 f2f3 	udiv	r2, r2, r3
 8003936:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003938:	fba3 0302 	umull	r0, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2064      	movs	r0, #100	; 0x64
 8003940:	fb00 f303 	mul.w	r3, r0, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	3332      	adds	r3, #50	; 0x32
 800394a:	4a3d      	ldr	r2, [pc, #244]	; (8003a40 <UART_SetConfig+0x1d0>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003958:	4419      	add	r1, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009a      	lsls	r2, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003970:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003972:	fba3 0302 	umull	r0, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2064      	movs	r0, #100	; 0x64
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	3332      	adds	r3, #50	; 0x32
 8003984:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	f003 0207 	and.w	r2, r3, #7
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	440a      	add	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003998:	e04a      	b.n	8003a30 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <UART_SetConfig+0x1d0>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	0119      	lsls	r1, r3, #4
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <UART_SetConfig+0x1d0>)
 80039d2:	fba3 0302 	umull	r0, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <UART_SetConfig+0x1d0>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f0:	4419      	add	r1, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2064      	movs	r0, #100	; 0x64
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	3332      	adds	r3, #50	; 0x32
 8003a1c:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <UART_SetConfig+0x1d0>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	40011400 	.word	0x40011400
 8003a40:	51eb851f 	.word	0x51eb851f

08003a44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4a:	f3ef 8305 	mrs	r3, IPSR
 8003a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <osKernelInitialize+0x32>
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <osKernelInitialize+0x60>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d109      	bne.n	8003a7e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a76:	f06f 0305 	mvn.w	r3, #5
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e00c      	b.n	8003a98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <osKernelInitialize+0x60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <osKernelInitialize+0x60>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e002      	b.n	8003a98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	200000f4 	.word	0x200000f4

08003aa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aae:	f3ef 8305 	mrs	r3, IPSR
 8003ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aba:	f3ef 8310 	mrs	r3, PRIMASK
 8003abe:	607b      	str	r3, [r7, #4]
  return(result);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <osKernelStart+0x32>
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <osKernelStart+0x64>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d109      	bne.n	8003ae2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ace:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ada:	f06f 0305 	mvn.w	r3, #5
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e00e      	b.n	8003b00 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <osKernelStart+0x64>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <osKernelStart+0x64>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003af0:	f001 fcb6 	bl	8005460 <vTaskStartScheduler>
      stat = osOK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e002      	b.n	8003b00 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200000f4 	.word	0x200000f4

08003b10 <osKernelLock>:

int32_t osKernelLock (void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b16:	f3ef 8305 	mrs	r3, IPSR
 8003b1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b22:	f3ef 8310 	mrs	r3, PRIMASK
 8003b26:	607b      	str	r3, [r7, #4]
  return(result);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <osKernelLock+0x32>
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <osKernelLock+0x6c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d109      	bne.n	8003b4a <osKernelLock+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b36:	f3ef 8311 	mrs	r3, BASEPRI
 8003b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 8003b42:	f06f 0305 	mvn.w	r3, #5
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e013      	b.n	8003b72 <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8003b4a:	f002 f8d5 	bl	8005cf8 <xTaskGetSchedulerState>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <osKernelLock+0x4a>
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d003      	beq.n	8003b60 <osKernelLock+0x50>
 8003b58:	e007      	b.n	8003b6a <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
        break;
 8003b5e:	e008      	b.n	8003b72 <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8003b60:	f001 fce2 	bl	8005528 <vTaskSuspendAll>
        lock = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
        break;
 8003b68:	e003      	b.n	8003b72 <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	60fb      	str	r3, [r7, #12]
        break;
 8003b70:	bf00      	nop
    }
  }

  return (lock);
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200000f4 	.word	0x200000f4

08003b80 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b86:	f3ef 8305 	mrs	r3, IPSR
 8003b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <osKernelUnlock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b92:	f3ef 8310 	mrs	r3, PRIMASK
 8003b96:	607b      	str	r3, [r7, #4]
  return(result);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <osKernelUnlock+0x32>
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <osKernelUnlock+0x84>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d109      	bne.n	8003bba <osKernelUnlock+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8003baa:	603b      	str	r3, [r7, #0]
  return(result);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <osKernelUnlock+0x3a>
    lock = (int32_t)osErrorISR;
 8003bb2:	f06f 0305 	mvn.w	r3, #5
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e01f      	b.n	8003bfa <osKernelUnlock+0x7a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8003bba:	f002 f89d 	bl	8005cf8 <xTaskGetSchedulerState>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <osKernelUnlock+0x4a>
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d010      	beq.n	8003bea <osKernelUnlock+0x6a>
 8003bc8:	e012      	b.n	8003bf0 <osKernelUnlock+0x70>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

        if (xTaskResumeAll() != pdTRUE) {
 8003bce:	f001 fcb9 	bl	8005544 <xTaskResumeAll>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d00f      	beq.n	8003bf8 <osKernelUnlock+0x78>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8003bd8:	f002 f88e 	bl	8005cf8 <xTaskGetSchedulerState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <osKernelUnlock+0x78>
            lock = (int32_t)osError;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	60fb      	str	r3, [r7, #12]
          }
        }
        break;
 8003be8:	e006      	b.n	8003bf8 <osKernelUnlock+0x78>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e004      	b.n	8003bfa <osKernelUnlock+0x7a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	60fb      	str	r3, [r7, #12]
        break;
 8003bf6:	e000      	b.n	8003bfa <osKernelUnlock+0x7a>
        break;
 8003bf8:	bf00      	nop
    }
  }

  return (lock);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200000f4 	.word	0x200000f4

08003c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b092      	sub	sp, #72	; 0x48
 8003c0c:	af04      	add	r7, sp, #16
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c18:	f3ef 8305 	mrs	r3, IPSR
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8095 	bne.w	8003d50 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808e 	bne.w	8003d50 <osThreadNew+0x148>
 8003c34:	4b49      	ldr	r3, [pc, #292]	; (8003d5c <osThreadNew+0x154>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d106      	bne.n	8003c4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c40:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 8083 	bne.w	8003d50 <osThreadNew+0x148>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d07f      	beq.n	8003d50 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8003c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003c56:	2318      	movs	r3, #24
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003c5e:	f107 031b 	add.w	r3, r7, #27
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d045      	beq.n	8003cfc <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <osThreadNew+0x76>
        name = attr->name;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <osThreadNew+0x9c>
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2b38      	cmp	r3, #56	; 0x38
 8003c96:	d805      	bhi.n	8003ca4 <osThreadNew+0x9c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <osThreadNew+0xa0>
        return (NULL);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e054      	b.n	8003d52 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <osThreadNew+0xd6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b5b      	cmp	r3, #91	; 0x5b
 8003cc6:	d90a      	bls.n	8003cde <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <osThreadNew+0xd6>
        mem = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cdc:	e010      	b.n	8003d00 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <osThreadNew+0xf8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d108      	bne.n	8003d00 <osThreadNew+0xf8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <osThreadNew+0xf8>
          mem = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	e001      	b.n	8003d00 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d110      	bne.n	8003d28 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f001 f965 	bl	8004fec <xTaskCreateStatic>
 8003d22:	4603      	mov	r3, r0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e013      	b.n	8003d50 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d110      	bne.n	8003d50 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f001 f9ac 	bl	800509e <xTaskCreate>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <osThreadNew+0x148>
          hTask = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3738      	adds	r7, #56	; 0x38
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200000f4 	.word	0x200000f4

08003d60 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f001 fad5 	bl	8005314 <vTaskDelete>
#endif
  for (;;);
 8003d6a:	e7fe      	b.n	8003d6a <osThreadExit+0xa>

08003d6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d74:	f3ef 8305 	mrs	r3, IPSR
 8003d78:	613b      	str	r3, [r7, #16]
  return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <osDelay+0x34>
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <osDelay+0x58>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d109      	bne.n	8003da8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d94:	f3ef 8311 	mrs	r3, BASEPRI
 8003d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <osDelay+0x3c>
    stat = osErrorISR;
 8003da0:	f06f 0305 	mvn.w	r3, #5
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e007      	b.n	8003db8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fb20 	bl	80053f8 <vTaskDelay>
    }
  }

  return (stat);
 8003db8:	697b      	ldr	r3, [r7, #20]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200000f4 	.word	0x200000f4

08003dc8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd4:	f3ef 8305 	mrs	r3, IPSR
 8003dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 8085 	bne.w	8003eec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d17e      	bne.n	8003eec <osMutexNew+0x124>
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <osMutexNew+0x130>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d105      	bne.n	8003e02 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003df6:	f3ef 8311 	mrs	r3, BASEPRI
 8003dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d174      	bne.n	8003eec <osMutexNew+0x124>
    if (attr != NULL) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e001      	b.n	8003e14 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <osMutexNew+0x5c>
      rmtx = 1U;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e001      	b.n	8003e28 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d15c      	bne.n	8003eec <osMutexNew+0x124>
      mem = -1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <osMutexNew+0x8c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b4f      	cmp	r3, #79	; 0x4f
 8003e4c:	d902      	bls.n	8003e54 <osMutexNew+0x8c>
          mem = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e00c      	b.n	8003e6e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <osMutexNew+0xa6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <osMutexNew+0xa6>
            mem = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e001      	b.n	8003e6e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d112      	bne.n	8003e9a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	2004      	movs	r0, #4
 8003e82:	f000 fb39 	bl	80044f8 <xQueueCreateMutexStatic>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24
 8003e88:	e016      	b.n	8003eb8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	2001      	movs	r0, #1
 8003e92:	f000 fb31 	bl	80044f8 <xQueueCreateMutexStatic>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24
 8003e98:	e00e      	b.n	8003eb8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ea6:	2004      	movs	r0, #4
 8003ea8:	f000 fb0e 	bl	80044c8 <xQueueCreateMutex>
 8003eac:	6278      	str	r0, [r7, #36]	; 0x24
 8003eae:	e003      	b.n	8003eb8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f000 fb09 	bl	80044c8 <xQueueCreateMutex>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <osMutexNew+0x110>
        if (attr != NULL) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <osMutexNew+0x104>
          name = attr->name;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e001      	b.n	8003ed0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ed0:	6979      	ldr	r1, [r7, #20]
 8003ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed4:	f001 f82e 	bl	8004f34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <osMutexNew+0x124>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3728      	adds	r7, #40	; 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200000f4 	.word	0x200000f4

08003efc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1a:	f3ef 8305 	mrs	r3, IPSR
 8003f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f20:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f26:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <osMutexAcquire+0x4a>
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <osMutexAcquire+0xb8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d109      	bne.n	8003f4e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003f46:	f06f 0305 	mvn.w	r3, #5
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e02c      	b.n	8003fa8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003f54:	f06f 0303 	mvn.w	r3, #3
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e025      	b.n	8003fa8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d011      	beq.n	8003f86 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	69b8      	ldr	r0, [r7, #24]
 8003f66:	f000 fb15 	bl	8004594 <xQueueTakeMutexRecursive>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d01b      	beq.n	8003fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003f76:	f06f 0301 	mvn.w	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e014      	b.n	8003fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003f7e:	f06f 0302 	mvn.w	r3, #2
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e010      	b.n	8003fa8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	69b8      	ldr	r0, [r7, #24]
 8003f8a:	f000 fda3 	bl	8004ad4 <xQueueSemaphoreTake>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d009      	beq.n	8003fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003f9a:	f06f 0301 	mvn.w	r3, #1
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e002      	b.n	8003fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003fa2:	f06f 0302 	mvn.w	r3, #2
 8003fa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200000f4 	.word	0x200000f4

08003fb8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd4:	f3ef 8305 	mrs	r3, IPSR
 8003fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8003fda:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10f      	bne.n	8004000 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <osMutexRelease+0x48>
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <osMutexRelease+0x9c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d109      	bne.n	8004008 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004000:	f06f 0305 	mvn.w	r3, #5
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e01f      	b.n	8004048 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800400e:	f06f 0303 	mvn.w	r3, #3
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e018      	b.n	8004048 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800401c:	69b8      	ldr	r0, [r7, #24]
 800401e:	f000 fa86 	bl	800452e <xQueueGiveMutexRecursive>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d00f      	beq.n	8004048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004028:	f06f 0302 	mvn.w	r3, #2
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e00b      	b.n	8004048 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004030:	2300      	movs	r3, #0
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	69b8      	ldr	r0, [r7, #24]
 8004038:	f000 fae2 	bl	8004600 <xQueueGenericSend>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d002      	beq.n	8004048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004042:	f06f 0302 	mvn.w	r3, #2
 8004046:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004048:	69fb      	ldr	r3, [r7, #28]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200000f4 	.word	0x200000f4

08004058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a07      	ldr	r2, [pc, #28]	; (8004084 <vApplicationGetIdleTaskMemory+0x2c>)
 8004068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <vApplicationGetIdleTaskMemory+0x30>)
 800406e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200000f8 	.word	0x200000f8
 8004088:	20000154 	.word	0x20000154

0800408c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800409c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a06      	ldr	r2, [pc, #24]	; (80040bc <vApplicationGetTimerTaskMemory+0x30>)
 80040a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040aa:	601a      	str	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000554 	.word	0x20000554
 80040bc:	200005b0 	.word	0x200005b0

080040c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f103 0208 	add.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f103 0208 	add.w	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f103 0208 	add.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d103      	bne.n	800417c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e00c      	b.n	8004196 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3308      	adds	r3, #8
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e002      	b.n	800418a <vListInsert+0x2e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	d2f6      	bcs.n	8004184 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d103      	bne.n	8004200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
	...

08004220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	e7fe      	b.n	8004246 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004248:	f002 fb2e 	bl	80068a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	441a      	add	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	3b01      	subs	r3, #1
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	22ff      	movs	r2, #255	; 0xff
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	22ff      	movs	r2, #255	; 0xff
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d114      	bne.n	80042c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01a      	beq.n	80042dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3310      	adds	r3, #16
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 fb5c 	bl	8005968 <xTaskRemoveFromEventList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <xQueueGenericReset+0xcc>)
 80042b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	e009      	b.n	80042dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3310      	adds	r3, #16
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fef7 	bl	80040c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fef2 	bl	80040c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042dc:	f002 fb12 	bl	8006904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042e0:	2301      	movs	r3, #1
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	; 0x38
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <xQueueGenericCreateStatic+0x28>
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 8004316:	e7fe      	b.n	8004316 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <xQueueGenericCreateStatic+0x42>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e7fe      	b.n	8004330 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <xQueueGenericCreateStatic+0x4e>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <xQueueGenericCreateStatic+0x52>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <xQueueGenericCreateStatic+0x54>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <xQueueGenericCreateStatic+0x6c>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	e7fe      	b.n	800435a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <xQueueGenericCreateStatic+0x78>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <xQueueGenericCreateStatic+0x7c>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <xQueueGenericCreateStatic+0x7e>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <xQueueGenericCreateStatic+0x96>
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004386:	2350      	movs	r3, #80	; 0x50
 8004388:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b50      	cmp	r3, #80	; 0x50
 800438e:	d009      	beq.n	80043a4 <xQueueGenericCreateStatic+0xb4>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e7fe      	b.n	80043a2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f842 	bl	800444e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	; 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xQueueGenericCreate+0x28>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e7fe      	b.n	80043fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e004      	b.n	8004412 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3350      	adds	r3, #80	; 0x50
 8004416:	4618      	mov	r0, r3
 8004418:	f002 fb3c 	bl	8006a94 <pvPortMalloc>
 800441c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	3350      	adds	r3, #80	; 0x50
 8004428:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004432:	79fa      	ldrb	r2, [r7, #7]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f805 	bl	800444e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004444:	69bb      	ldr	r3, [r7, #24]
	}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e002      	b.n	8004470 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800447c:	2101      	movs	r1, #1
 800447e:	69b8      	ldr	r0, [r7, #24]
 8004480:	f7ff fece 	bl	8004220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00e      	beq.n	80044c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044b4:	2300      	movs	r3, #0
 80044b6:	2200      	movs	r2, #0
 80044b8:	2100      	movs	r1, #0
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8a0 	bl	8004600 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	461a      	mov	r2, r3
 80044de:	6939      	ldr	r1, [r7, #16]
 80044e0:	6978      	ldr	r0, [r7, #20]
 80044e2:	f7ff ff77 	bl	80043d4 <xQueueGenericCreate>
 80044e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff ffd3 	bl	8004494 <prvInitialiseMutex>

		return pxNewQueue;
 80044ee:	68fb      	ldr	r3, [r7, #12]
	}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	6939      	ldr	r1, [r7, #16]
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff feea 	bl	80042f0 <xQueueGenericCreateStatic>
 800451c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff ffb8 	bl	8004494 <prvInitialiseMutex>

		return pxNewQueue;
 8004524:	68fb      	ldr	r3, [r7, #12]
	}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800452e:	b590      	push	{r4, r7, lr}
 8004530:	b087      	sub	sp, #28
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <xQueueGiveMutexRecursive+0x26>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e7fe      	b.n	8004552 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685c      	ldr	r4, [r3, #4]
 8004558:	f001 fbc0 	bl	8005cdc <xTaskGetCurrentTaskHandle>
 800455c:	4603      	mov	r3, r0
 800455e:	429c      	cmp	r4, r3
 8004560:	d111      	bne.n	8004586 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004574:	2300      	movs	r3, #0
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	6938      	ldr	r0, [r7, #16]
 800457c:	f000 f840 	bl	8004600 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004580:	2301      	movs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e001      	b.n	800458a <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800458a:	697b      	ldr	r3, [r7, #20]
	}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}

08004594 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <xQueueTakeMutexRecursive+0x28>
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e7fe      	b.n	80045ba <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	685c      	ldr	r4, [r3, #4]
 80045c0:	f001 fb8c 	bl	8005cdc <xTaskGetCurrentTaskHandle>
 80045c4:	4603      	mov	r3, r0
 80045c6:	429c      	cmp	r4, r3
 80045c8:	d107      	bne.n	80045da <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e00c      	b.n	80045f4 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6938      	ldr	r0, [r7, #16]
 80045de:	f000 fa79 	bl	8004ad4 <xQueueSemaphoreTake>
 80045e2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80045f4:	697b      	ldr	r3, [r7, #20]
	}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd90      	pop	{r4, r7, pc}
	...

08004600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	; 0x38
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <xQueueGenericSend+0x30>
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
 800462e:	e7fe      	b.n	800462e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <xQueueGenericSend+0x3e>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <xQueueGenericSend+0x42>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueGenericSend+0x44>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <xQueueGenericSend+0x5c>
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e7fe      	b.n	800465a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x6a>
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <xQueueGenericSend+0x6e>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xQueueGenericSend+0x70>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <xQueueGenericSend+0x88>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	e7fe      	b.n	8004686 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004688:	f001 fb36 	bl	8005cf8 <xTaskGetSchedulerState>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <xQueueGenericSend+0x98>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <xQueueGenericSend+0x9c>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <xQueueGenericSend+0x9e>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <xQueueGenericSend+0xb6>
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	e7fe      	b.n	80046b4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046b6:	f002 f8f7 	bl	80068a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <xQueueGenericSend+0xcc>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d129      	bne.n	8004720 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fb1e 	bl	8004d12 <prvCopyDataToQueue>
 80046d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f93f 	bl	8005968 <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f0:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <xQueueGenericSend+0x1f0>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	e00a      	b.n	8004718 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <xQueueGenericSend+0x1f0>)
 800470a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004718:	f002 f8f4 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 800471c:	2301      	movs	r3, #1
 800471e:	e063      	b.n	80047e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004726:	f002 f8ed 	bl	8006904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800472a:	2300      	movs	r3, #0
 800472c:	e05c      	b.n	80047e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f977 	bl	8005a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004742:	f002 f8df 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004746:	f000 feef 	bl	8005528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474a:	f002 f8ad 	bl	80068a8 <vPortEnterCritical>
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004754:	b25b      	sxtb	r3, r3
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d103      	bne.n	8004764 <xQueueGenericSend+0x164>
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476a:	b25b      	sxtb	r3, r3
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d103      	bne.n	800477a <xQueueGenericSend+0x17a>
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477a:	f002 f8c3 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800477e:	1d3a      	adds	r2, r7, #4
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f001 f966 	bl	8005a58 <xTaskCheckForTimeOut>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d124      	bne.n	80047dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004794:	f000 fbb5 	bl	8004f02 <prvIsQueueFull>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	3310      	adds	r3, #16
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f890 	bl	80058cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ae:	f000 fb40 	bl	8004e32 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047b2:	f000 fec7 	bl	8005544 <xTaskResumeAll>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af7c 	bne.w	80046b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <xQueueGenericSend+0x1f0>)
 80047c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	e772      	b.n	80046b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d2:	f000 fb2e 	bl	8004e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d6:	f000 feb5 	bl	8005544 <xTaskResumeAll>
 80047da:	e76c      	b.n	80046b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047de:	f000 fb28 	bl	8004e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e2:	f000 feaf 	bl	8005544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047e6:	2300      	movs	r3, #0
		}
	}
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3738      	adds	r7, #56	; 0x38
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <xQueueGenericSendFromISR+0x2c>
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	e7fe      	b.n	800481e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueGenericSendFromISR+0x3a>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xQueueGenericSendFromISR+0x3e>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSendFromISR+0x40>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <xQueueGenericSendFromISR+0x58>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	e7fe      	b.n	800484a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d103      	bne.n	800485a <xQueueGenericSendFromISR+0x66>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <xQueueGenericSendFromISR+0x6a>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueGenericSendFromISR+0x6c>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <xQueueGenericSendFromISR+0x84>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	e7fe      	b.n	8004876 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004878:	f002 f8d0 	bl	8006a1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800487c:	f3ef 8211 	mrs	r2, BASEPRI
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61ba      	str	r2, [r7, #24]
 8004892:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004894:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <xQueueGenericSendFromISR+0xb6>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d12c      	bne.n	8004904 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ba:	f000 fa2a 	bl	8004d12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d112      	bne.n	80048ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f847 	bl	8005968 <xTaskRemoveFromEventList>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e007      	b.n	80048fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048f2:	3301      	adds	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048fe:	2301      	movs	r3, #1
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004902:	e001      	b.n	8004908 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004904:	2300      	movs	r3, #0
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004914:	4618      	mov	r0, r3
 8004916:	3738      	adds	r7, #56	; 0x38
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <xQueueReceive+0x2e>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	e7fe      	b.n	8004948 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <xQueueReceive+0x3c>
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xQueueReceive+0x40>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <xQueueReceive+0x42>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <xQueueReceive+0x5a>
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e7fe      	b.n	8004974 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004976:	f001 f9bf 	bl	8005cf8 <xTaskGetSchedulerState>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <xQueueReceive+0x6a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <xQueueReceive+0x6e>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueReceive+0x70>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <xQueueReceive+0x88>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e7fe      	b.n	80049a2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a4:	f001 ff80 	bl	80068a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01f      	beq.n	80049f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b8:	f000 fa15 	bl	8004de6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00f      	beq.n	80049ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	3310      	adds	r3, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 ffc9 	bl	8005968 <xTaskRemoveFromEventList>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <xQueueReceive+0x1b4>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049ec:	f001 ff8a 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e069      	b.n	8004ac8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049fa:	f001 ff83 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e062      	b.n	8004ac8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a08:	f107 0310 	add.w	r3, r7, #16
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 f80d 	bl	8005a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a16:	f001 ff75 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a1a:	f000 fd85 	bl	8005528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1e:	f001 ff43 	bl	80068a8 <vPortEnterCritical>
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d103      	bne.n	8004a38 <xQueueReceive+0x11c>
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d103      	bne.n	8004a4e <xQueueReceive+0x132>
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a4e:	f001 ff59 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a52:	1d3a      	adds	r2, r7, #4
 8004a54:	f107 0310 	add.w	r3, r7, #16
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fffc 	bl	8005a58 <xTaskCheckForTimeOut>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d123      	bne.n	8004aae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a68:	f000 fa35 	bl	8004ed6 <prvIsQueueEmpty>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d017      	beq.n	8004aa2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	3324      	adds	r3, #36	; 0x24
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff26 	bl	80058cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f000 f9d6 	bl	8004e32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f000 fd5d 	bl	8005544 <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d189      	bne.n	80049a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <xQueueReceive+0x1b4>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	e780      	b.n	80049a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa4:	f000 f9c5 	bl	8004e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa8:	f000 fd4c 	bl	8005544 <xTaskResumeAll>
 8004aac:	e77a      	b.n	80049a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab0:	f000 f9bf 	bl	8004e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab4:	f000 fd46 	bl	8005544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aba:	f000 fa0c 	bl	8004ed6 <prvIsQueueEmpty>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f43f af6f 	beq.w	80049a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ac6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3730      	adds	r7, #48	; 0x30
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <xQueueSemaphoreTake+0x30>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e7fe      	b.n	8004b02 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <xQueueSemaphoreTake+0x4c>
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e7fe      	b.n	8004b1e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b20:	f001 f8ea 	bl	8005cf8 <xTaskGetSchedulerState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <xQueueSemaphoreTake+0x5c>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <xQueueSemaphoreTake+0x60>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <xQueueSemaphoreTake+0x62>
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <xQueueSemaphoreTake+0x7a>
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e7fe      	b.n	8004b4c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4e:	f001 feab 	bl	80068a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d024      	beq.n	8004ba8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	1e5a      	subs	r2, r3, #1
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b6e:	f001 fa3f 	bl	8005ff0 <pvTaskIncrementMutexHeldCount>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	3310      	adds	r3, #16
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 feef 	bl	8005968 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <xQueueSemaphoreTake+0x20c>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ba0:	f001 feb0 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e096      	b.n	8004cd6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d110      	bne.n	8004bd0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <xQueueSemaphoreTake+0xf4>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bc8:	f001 fe9c 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e082      	b.n	8004cd6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 ff26 	bl	8005a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be4:	f001 fe8e 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be8:	f000 fc9e 	bl	8005528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bec:	f001 fe5c 	bl	80068a8 <vPortEnterCritical>
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <xQueueSemaphoreTake+0x132>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d103      	bne.n	8004c1c <xQueueSemaphoreTake+0x148>
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	f001 fe72 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c20:	463a      	mov	r2, r7
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 ff15 	bl	8005a58 <xTaskCheckForTimeOut>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d132      	bne.n	8004c9a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c36:	f000 f94e 	bl	8004ed6 <prvIsQueueEmpty>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d026      	beq.n	8004c8e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004c48:	f001 fe2e 	bl	80068a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f86f 	bl	8005d34 <xTaskPriorityInherit>
 8004c56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c58:	f001 fe54 	bl	8006904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fe31 	bl	80058cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c6c:	f000 f8e1 	bl	8004e32 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c70:	f000 fc68 	bl	8005544 <xTaskResumeAll>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f47f af69 	bne.w	8004b4e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004c7c:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <xQueueSemaphoreTake+0x20c>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e75f      	b.n	8004b4e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c90:	f000 f8cf 	bl	8004e32 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c94:	f000 fc56 	bl	8005544 <xTaskResumeAll>
 8004c98:	e759      	b.n	8004b4e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c9c:	f000 f8c9 	bl	8004e32 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca0:	f000 fc50 	bl	8005544 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ca6:	f000 f916 	bl	8004ed6 <prvIsQueueEmpty>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f43f af4e 	beq.w	8004b4e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004cb8:	f001 fdf6 	bl	80068a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cbe:	f000 f811 	bl	8004ce4 <prvGetDisinheritPriorityAfterTimeout>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 f90c 	bl	8005ee8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cd0:	f001 fe18 	bl	8006904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3738      	adds	r7, #56	; 0x38
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e001      	b.n	8004d06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d06:	68fb      	ldr	r3, [r7, #12]
	}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d14d      	bne.n	8004dd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f867 	bl	8005e10 <xTaskPriorityDisinherit>
 8004d42:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e043      	b.n	8004dd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6898      	ldr	r0, [r3, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	f002 fc79 	bl	8007654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	441a      	add	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d32b      	bcc.n	8004dd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e026      	b.n	8004dd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68d8      	ldr	r0, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	f002 fc5f 	bl	8007654 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	425b      	negs	r3, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d207      	bcs.n	8004dc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	425b      	negs	r3, r3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d105      	bne.n	8004dd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d018      	beq.n	8004e2a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d303      	bcc.n	8004e1a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68d9      	ldr	r1, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	461a      	mov	r2, r3
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f002 fc15 	bl	8007654 <memcpy>
	}
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e3a:	f001 fd35 	bl	80068a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e44:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e46:	e011      	b.n	8004e6c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d012      	beq.n	8004e76 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3324      	adds	r3, #36	; 0x24
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fd87 	bl	8005968 <xTaskRemoveFromEventList>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e60:	f000 fe5a 	bl	8005b18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dce9      	bgt.n	8004e48 <prvUnlockQueue+0x16>
 8004e74:	e000      	b.n	8004e78 <prvUnlockQueue+0x46>
					break;
 8004e76:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	22ff      	movs	r2, #255	; 0xff
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e80:	f001 fd40 	bl	8006904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e84:	f001 fd10 	bl	80068a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e90:	e011      	b.n	8004eb6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d012      	beq.n	8004ec0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3310      	adds	r3, #16
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fd62 	bl	8005968 <xTaskRemoveFromEventList>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004eaa:	f000 fe35 	bl	8005b18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004eae:	7bbb      	ldrb	r3, [r7, #14]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	dce9      	bgt.n	8004e92 <prvUnlockQueue+0x60>
 8004ebe:	e000      	b.n	8004ec2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ec0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004eca:	f001 fd1b 	bl	8006904 <vPortExitCritical>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ede:	f001 fce3 	bl	80068a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e001      	b.n	8004ef4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ef4:	f001 fd06 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f0a:	f001 fccd 	bl	80068a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d102      	bne.n	8004f20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e001      	b.n	8004f24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f24:	f001 fcee 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e014      	b.n	8004f6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f44:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <vQueueAddToRegistry+0x4c>)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f50:	490b      	ldr	r1, [pc, #44]	; (8004f80 <vQueueAddToRegistry+0x4c>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <vQueueAddToRegistry+0x4c>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f66:	e005      	b.n	8004f74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b07      	cmp	r3, #7
 8004f72:	d9e7      	bls.n	8004f44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20005394 	.word	0x20005394

08004f84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f94:	f001 fc88 	bl	80068a8 <vPortEnterCritical>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d103      	bne.n	8004fae <vQueueWaitForMessageRestricted+0x2a>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d103      	bne.n	8004fc4 <vQueueWaitForMessageRestricted+0x40>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc4:	f001 fc9e 	bl	8006904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fc9b 	bl	8005914 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fde:	6978      	ldr	r0, [r7, #20]
 8004fe0:	f7ff ff27 	bl	8004e32 <prvUnlockQueue>
	}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08e      	sub	sp, #56	; 0x38
 8004ff0:	af04      	add	r7, sp, #16
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <xTaskCreateStatic+0x28>
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	e7fe      	b.n	8005012 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <xTaskCreateStatic+0x42>
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	e7fe      	b.n	800502c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800502e:	235c      	movs	r3, #92	; 0x5c
 8005030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b5c      	cmp	r3, #92	; 0x5c
 8005036:	d009      	beq.n	800504c <xTaskCreateStatic+0x60>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e7fe      	b.n	800504a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01e      	beq.n	8005090 <xTaskCreateStatic+0xa4>
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	2202      	movs	r2, #2
 8005066:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800506a:	2300      	movs	r3, #0
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	9302      	str	r3, [sp, #8]
 8005072:	f107 0314 	add.w	r3, r7, #20
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f850 	bl	8005128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508a:	f000 f8d3 	bl	8005234 <prvAddNewTaskToReadyList>
 800508e:	e001      	b.n	8005094 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005094:	697b      	ldr	r3, [r7, #20]
	}
 8005096:	4618      	mov	r0, r3
 8005098:	3728      	adds	r7, #40	; 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b08c      	sub	sp, #48	; 0x30
 80050a2:	af04      	add	r7, sp, #16
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fcee 	bl	8006a94 <pvPortMalloc>
 80050b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050c0:	205c      	movs	r0, #92	; 0x5c
 80050c2:	f001 fce7 	bl	8006a94 <pvPortMalloc>
 80050c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
 80050d4:	e005      	b.n	80050e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	f001 fd9e 	bl	8006c18 <vPortFree>
 80050dc:	e001      	b.n	80050e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d017      	beq.n	8005118 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	9302      	str	r3, [sp, #8]
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f80e 	bl	8005128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510c:	69f8      	ldr	r0, [r7, #28]
 800510e:	f000 f891 	bl	8005234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005112:	2301      	movs	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	e002      	b.n	800511e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800511e:	69bb      	ldr	r3, [r7, #24]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	461a      	mov	r2, r3
 8005140:	21a5      	movs	r1, #165	; 0xa5
 8005142:	f002 fa92 	bl	800766a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005150:	3b01      	subs	r3, #1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <prvInitialiseNewTask+0x56>
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e7fe      	b.n	800517c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e012      	b.n	80051aa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	7819      	ldrb	r1, [r3, #0]
 800518c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	3334      	adds	r3, #52	; 0x34
 8005194:	460a      	mov	r2, r1
 8005196:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b0f      	cmp	r3, #15
 80051ae:	d9e9      	bls.n	8005184 <prvInitialiseNewTask+0x5c>
 80051b0:	e000      	b.n	80051b4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80051b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b37      	cmp	r3, #55	; 0x37
 80051c0:	d901      	bls.n	80051c6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051c2:	2337      	movs	r3, #55	; 0x37
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe ff8e 	bl	80040fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	3318      	adds	r3, #24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe ff89 	bl	80040fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	69b8      	ldr	r0, [r7, #24]
 8005216:	f001 fa5d 	bl	80066d4 <pxPortInitialiseStack>
 800521a:	4602      	mov	r2, r0
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800522c:	bf00      	nop
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800523c:	f001 fb34 	bl	80068a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3301      	adds	r3, #1
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 8005248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <prvAddNewTaskToReadyList+0xc8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005252:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <prvAddNewTaskToReadyList+0xc8>)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <prvAddNewTaskToReadyList+0xc4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d110      	bne.n	8005282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005260:	f000 fc7e 	bl	8005b60 <prvInitialiseTaskLists>
 8005264:	e00d      	b.n	8005282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005266:	4b26      	ldr	r3, [pc, #152]	; (8005300 <prvAddNewTaskToReadyList+0xcc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <prvAddNewTaskToReadyList+0xc8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d802      	bhi.n	8005282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <prvAddNewTaskToReadyList+0xc8>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <prvAddNewTaskToReadyList+0xd0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <prvAddNewTaskToReadyList+0xd0>)
 800528a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <prvAddNewTaskToReadyList+0xd0>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <prvAddNewTaskToReadyList+0xd4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d903      	bls.n	80052a8 <prvAddNewTaskToReadyList+0x74>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <prvAddNewTaskToReadyList+0xd4>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <prvAddNewTaskToReadyList+0xd8>)
 80052b6:	441a      	add	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7fe ff29 	bl	8004116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052c4:	f001 fb1e 	bl	8006904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <prvAddNewTaskToReadyList+0xcc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00e      	beq.n	80052ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <prvAddNewTaskToReadyList+0xc8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	429a      	cmp	r2, r3
 80052dc:	d207      	bcs.n	80052ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <prvAddNewTaskToReadyList+0xdc>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001284 	.word	0x20001284
 80052fc:	20000db0 	.word	0x20000db0
 8005300:	20001290 	.word	0x20001290
 8005304:	200012a0 	.word	0x200012a0
 8005308:	2000128c 	.word	0x2000128c
 800530c:	20000db4 	.word	0x20000db4
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800531c:	f001 fac4 	bl	80068a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <vTaskDelete+0x18>
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <vTaskDelete+0xc4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	e000      	b.n	800532e <vTaskDelete+0x1a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe ff49 	bl	80041cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3318      	adds	r3, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe ff40 	bl	80041cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800534c:	4b23      	ldr	r3, [pc, #140]	; (80053dc <vTaskDelete+0xc8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a22      	ldr	r2, [pc, #136]	; (80053dc <vTaskDelete+0xc8>)
 8005354:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005356:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <vTaskDelete+0xc4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d10b      	bne.n	8005378 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	481e      	ldr	r0, [pc, #120]	; (80053e0 <vTaskDelete+0xcc>)
 8005368:	f7fe fed5 	bl	8004116 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <vTaskDelete+0xd0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <vTaskDelete+0xd0>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e009      	b.n	800538c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <vTaskDelete+0xd4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <vTaskDelete+0xd4>)
 8005380:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fc58 	bl	8005c38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005388:	f000 fc84 	bl	8005c94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800538c:	f001 faba 	bl	8006904 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005390:	4b16      	ldr	r3, [pc, #88]	; (80053ec <vTaskDelete+0xd8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <vTaskDelete+0xc4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d115      	bne.n	80053ce <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80053a2:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <vTaskDelete+0xdc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <vTaskDelete+0xaa>
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	e7fe      	b.n	80053bc <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <vTaskDelete+0xe0>)
 80053c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000db0 	.word	0x20000db0
 80053dc:	200012a0 	.word	0x200012a0
 80053e0:	20001258 	.word	0x20001258
 80053e4:	2000126c 	.word	0x2000126c
 80053e8:	20001284 	.word	0x20001284
 80053ec:	20001290 	.word	0x20001290
 80053f0:	200012ac 	.word	0x200012ac
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <vTaskDelay+0x60>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <vTaskDelay+0x2e>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	e7fe      	b.n	8005424 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005426:	f000 f87f 	bl	8005528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800542a:	2100      	movs	r1, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fdf3 	bl	8006018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005432:	f000 f887 	bl	8005544 <xTaskResumeAll>
 8005436:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <vTaskDelay+0x64>)
 8005440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200012ac 	.word	0x200012ac
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800546e:	463a      	mov	r2, r7
 8005470:	1d39      	adds	r1, r7, #4
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fdee 	bl	8004058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	9202      	str	r2, [sp, #8]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	2300      	movs	r3, #0
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	460a      	mov	r2, r1
 800548e:	4920      	ldr	r1, [pc, #128]	; (8005510 <vTaskStartScheduler+0xb0>)
 8005490:	4820      	ldr	r0, [pc, #128]	; (8005514 <vTaskStartScheduler+0xb4>)
 8005492:	f7ff fdab 	bl	8004fec <xTaskCreateStatic>
 8005496:	4602      	mov	r2, r0
 8005498:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <vTaskStartScheduler+0xb8>)
 800549a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800549c:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <vTaskStartScheduler+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e001      	b.n	80054ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d102      	bne.n	80054ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054b4:	f000 fe04 	bl	80060c0 <xTimerCreateTimerTask>
 80054b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d115      	bne.n	80054ec <vTaskStartScheduler+0x8c>
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <vTaskStartScheduler+0xbc>)
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <vTaskStartScheduler+0xc0>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <vTaskStartScheduler+0xc4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054e6:	f001 f96f 	bl	80067c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ea:	e00d      	b.n	8005508 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d109      	bne.n	8005508 <vTaskStartScheduler+0xa8>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e7fe      	b.n	8005506 <vTaskStartScheduler+0xa6>
}
 8005508:	bf00      	nop
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08008650 	.word	0x08008650
 8005514:	08005b31 	.word	0x08005b31
 8005518:	200012a8 	.word	0x200012a8
 800551c:	200012a4 	.word	0x200012a4
 8005520:	20001290 	.word	0x20001290
 8005524:	20001288 	.word	0x20001288

08005528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <vTaskSuspendAll+0x18>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a03      	ldr	r2, [pc, #12]	; (8005540 <vTaskSuspendAll+0x18>)
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	200012ac 	.word	0x200012ac

08005544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005552:	4b41      	ldr	r3, [pc, #260]	; (8005658 <xTaskResumeAll+0x114>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <xTaskResumeAll+0x2a>
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	e7fe      	b.n	800556c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800556e:	f001 f99b 	bl	80068a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005572:	4b39      	ldr	r3, [pc, #228]	; (8005658 <xTaskResumeAll+0x114>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a37      	ldr	r2, [pc, #220]	; (8005658 <xTaskResumeAll+0x114>)
 800557a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <xTaskResumeAll+0x114>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d162      	bne.n	800564a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <xTaskResumeAll+0x118>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05e      	beq.n	800564a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558c:	e02f      	b.n	80055ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <xTaskResumeAll+0x11c>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3318      	adds	r3, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fe16 	bl	80041cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe fe11 	bl	80041cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <xTaskResumeAll+0x120>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d903      	bls.n	80055be <xTaskResumeAll+0x7a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <xTaskResumeAll+0x120>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a27      	ldr	r2, [pc, #156]	; (8005668 <xTaskResumeAll+0x124>)
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7fe fd9e 	bl	8004116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <xTaskResumeAll+0x128>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055e8:	4b21      	ldr	r3, [pc, #132]	; (8005670 <xTaskResumeAll+0x12c>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <xTaskResumeAll+0x11c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1cb      	bne.n	800558e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055fc:	f000 fb4a 	bl	8005c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005600:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <xTaskResumeAll+0x130>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800560c:	f000 f844 	bl	8005698 <xTaskIncrementTick>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <xTaskResumeAll+0x12c>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f1      	bne.n	800560c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <xTaskResumeAll+0x130>)
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <xTaskResumeAll+0x12c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <xTaskResumeAll+0x134>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800564a:	f001 f95b 	bl	8006904 <vPortExitCritical>

	return xAlreadyYielded;
 800564e:	68bb      	ldr	r3, [r7, #8]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	200012ac 	.word	0x200012ac
 800565c:	20001284 	.word	0x20001284
 8005660:	20001244 	.word	0x20001244
 8005664:	2000128c 	.word	0x2000128c
 8005668:	20000db4 	.word	0x20000db4
 800566c:	20000db0 	.word	0x20000db0
 8005670:	20001298 	.word	0x20001298
 8005674:	20001294 	.word	0x20001294
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <xTaskGetTickCount+0x18>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005688:	687b      	ldr	r3, [r7, #4]
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	20001288 	.word	0x20001288

08005698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a2:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <xTaskIncrementTick+0x150>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 808d 	bne.w	80057c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056ac:	4b4f      	ldr	r3, [pc, #316]	; (80057ec <xTaskIncrementTick+0x154>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056b4:	4a4d      	ldr	r2, [pc, #308]	; (80057ec <xTaskIncrementTick+0x154>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11f      	bne.n	8005700 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056c0:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <xTaskIncrementTick+0x158>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <xTaskIncrementTick+0x46>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	e7fe      	b.n	80056dc <xTaskIncrementTick+0x44>
 80056de:	4b44      	ldr	r3, [pc, #272]	; (80057f0 <xTaskIncrementTick+0x158>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <xTaskIncrementTick+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a41      	ldr	r2, [pc, #260]	; (80057f0 <xTaskIncrementTick+0x158>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	4a41      	ldr	r2, [pc, #260]	; (80057f4 <xTaskIncrementTick+0x15c>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <xTaskIncrementTick+0x160>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <xTaskIncrementTick+0x160>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	f000 faca 	bl	8005c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <xTaskIncrementTick+0x164>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d34e      	bcc.n	80057a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800570a:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <xTaskIncrementTick+0x158>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <xTaskIncrementTick+0x80>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <xTaskIncrementTick+0x82>
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800571e:	4b37      	ldr	r3, [pc, #220]	; (80057fc <xTaskIncrementTick+0x164>)
 8005720:	f04f 32ff 	mov.w	r2, #4294967295
 8005724:	601a      	str	r2, [r3, #0]
					break;
 8005726:	e03f      	b.n	80057a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005728:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <xTaskIncrementTick+0x158>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d203      	bcs.n	8005748 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005740:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <xTaskIncrementTick+0x164>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6013      	str	r3, [r2, #0]
						break;
 8005746:	e02f      	b.n	80057a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3304      	adds	r3, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fd3d 	bl	80041cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3318      	adds	r3, #24
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fd34 	bl	80041cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <xTaskIncrementTick+0x168>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d903      	bls.n	8005778 <xTaskIncrementTick+0xe0>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <xTaskIncrementTick+0x168>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <xTaskIncrementTick+0x16c>)
 8005786:	441a      	add	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fe fcc1 	bl	8004116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <xTaskIncrementTick+0x170>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	429a      	cmp	r2, r3
 80057a0:	d3b3      	bcc.n	800570a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a6:	e7b0      	b.n	800570a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <xTaskIncrementTick+0x170>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	4915      	ldr	r1, [pc, #84]	; (8005804 <xTaskIncrementTick+0x16c>)
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d907      	bls.n	80057d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e004      	b.n	80057d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <xTaskIncrementTick+0x174>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a0f      	ldr	r2, [pc, #60]	; (800580c <xTaskIncrementTick+0x174>)
 80057ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <xTaskIncrementTick+0x178>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057dc:	697b      	ldr	r3, [r7, #20]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200012ac 	.word	0x200012ac
 80057ec:	20001288 	.word	0x20001288
 80057f0:	2000123c 	.word	0x2000123c
 80057f4:	20001240 	.word	0x20001240
 80057f8:	2000129c 	.word	0x2000129c
 80057fc:	200012a4 	.word	0x200012a4
 8005800:	2000128c 	.word	0x2000128c
 8005804:	20000db4 	.word	0x20000db4
 8005808:	20000db0 	.word	0x20000db0
 800580c:	20001294 	.word	0x20001294
 8005810:	20001298 	.word	0x20001298

08005814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581a:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <vTaskSwitchContext+0xa4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <vTaskSwitchContext+0xa8>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005828:	e040      	b.n	80058ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800582a:	4b24      	ldr	r3, [pc, #144]	; (80058bc <vTaskSwitchContext+0xa8>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005830:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <vTaskSwitchContext+0xac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e00f      	b.n	8005858 <vTaskSwitchContext+0x44>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <vTaskSwitchContext+0x3e>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	e7fe      	b.n	8005850 <vTaskSwitchContext+0x3c>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	491a      	ldr	r1, [pc, #104]	; (80058c4 <vTaskSwitchContext+0xb0>)
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0e5      	beq.n	8005838 <vTaskSwitchContext+0x24>
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <vTaskSwitchContext+0xb0>)
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3308      	adds	r3, #8
 800588e:	429a      	cmp	r2, r3
 8005890:	d104      	bne.n	800589c <vTaskSwitchContext+0x88>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <vTaskSwitchContext+0xb4>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <vTaskSwitchContext+0xac>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	200012ac 	.word	0x200012ac
 80058bc:	20001298 	.word	0x20001298
 80058c0:	2000128c 	.word	0x2000128c
 80058c4:	20000db4 	.word	0x20000db4
 80058c8:	20000db0 	.word	0x20000db0

080058cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <vTaskPlaceOnEventList+0x24>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e7fe      	b.n	80058ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <vTaskPlaceOnEventList+0x44>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fe fc2f 	bl	800415c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058fe:	2101      	movs	r1, #1
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f000 fb89 	bl	8006018 <prvAddCurrentTaskToDelayedList>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000db0 	.word	0x20000db0

08005914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <vTaskPlaceOnEventListRestricted+0x26>
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e7fe      	b.n	8005938 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <vTaskPlaceOnEventListRestricted+0x50>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3318      	adds	r3, #24
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe fbe7 	bl	8004116 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f000 fb5e 	bl	8006018 <prvAddCurrentTaskToDelayedList>
	}
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000db0 	.word	0x20000db0

08005968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <xTaskRemoveFromEventList+0x2a>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e7fe      	b.n	8005990 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3318      	adds	r3, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fc18 	bl	80041cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <xTaskRemoveFromEventList+0xac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11d      	bne.n	80059e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fc0f 	bl	80041cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <xTaskRemoveFromEventList+0xb0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d903      	bls.n	80059c2 <xTaskRemoveFromEventList+0x5a>
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <xTaskRemoveFromEventList+0xb0>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a13      	ldr	r2, [pc, #76]	; (8005a1c <xTaskRemoveFromEventList+0xb4>)
 80059d0:	441a      	add	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fe fb9c 	bl	8004116 <vListInsertEnd>
 80059de:	e005      	b.n	80059ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3318      	adds	r3, #24
 80059e4:	4619      	mov	r1, r3
 80059e6:	480e      	ldr	r0, [pc, #56]	; (8005a20 <xTaskRemoveFromEventList+0xb8>)
 80059e8:	f7fe fb95 	bl	8004116 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <xTaskRemoveFromEventList+0xbc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d905      	bls.n	8005a06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <xTaskRemoveFromEventList+0xc0>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e001      	b.n	8005a0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200012ac 	.word	0x200012ac
 8005a18:	2000128c 	.word	0x2000128c
 8005a1c:	20000db4 	.word	0x20000db4
 8005a20:	20001244 	.word	0x20001244
 8005a24:	20000db0 	.word	0x20000db0
 8005a28:	20001298 	.word	0x20001298

08005a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <vTaskInternalSetTimeOutState+0x24>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <vTaskInternalSetTimeOutState+0x28>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000129c 	.word	0x2000129c
 8005a54:	20001288 	.word	0x20001288

08005a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <xTaskCheckForTimeOut+0x24>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e7fe      	b.n	8005a7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <xTaskCheckForTimeOut+0x3e>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e7fe      	b.n	8005a94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a96:	f000 ff07 	bl	80068a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <xTaskCheckForTimeOut+0xb8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d102      	bne.n	8005aba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e023      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <xTaskCheckForTimeOut+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d007      	beq.n	8005ad6 <xTaskCheckForTimeOut+0x7e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d302      	bcc.n	8005ad6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	e015      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d20b      	bcs.n	8005af8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff9d 	bl	8005a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e004      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005afe:	2301      	movs	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b02:	f000 feff 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005b06:	69fb      	ldr	r3, [r7, #28]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20001288 	.word	0x20001288
 8005b14:	2000129c 	.word	0x2000129c

08005b18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <vTaskMissedYield+0x14>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20001298 	.word	0x20001298

08005b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b38:	f000 f852 	bl	8005be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <prvIdleTask+0x28>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d9f9      	bls.n	8005b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <prvIdleTask+0x2c>)
 8005b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b54:	e7f0      	b.n	8005b38 <prvIdleTask+0x8>
 8005b56:	bf00      	nop
 8005b58:	20000db4 	.word	0x20000db4
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	e00c      	b.n	8005b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <prvInitialiseTaskLists+0x60>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe faa0 	bl	80040c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3301      	adds	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b37      	cmp	r3, #55	; 0x37
 8005b8a:	d9ef      	bls.n	8005b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b8c:	480d      	ldr	r0, [pc, #52]	; (8005bc4 <prvInitialiseTaskLists+0x64>)
 8005b8e:	f7fe fa97 	bl	80040c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b92:	480d      	ldr	r0, [pc, #52]	; (8005bc8 <prvInitialiseTaskLists+0x68>)
 8005b94:	f7fe fa94 	bl	80040c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b98:	480c      	ldr	r0, [pc, #48]	; (8005bcc <prvInitialiseTaskLists+0x6c>)
 8005b9a:	f7fe fa91 	bl	80040c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b9e:	480c      	ldr	r0, [pc, #48]	; (8005bd0 <prvInitialiseTaskLists+0x70>)
 8005ba0:	f7fe fa8e 	bl	80040c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ba4:	480b      	ldr	r0, [pc, #44]	; (8005bd4 <prvInitialiseTaskLists+0x74>)
 8005ba6:	f7fe fa8b 	bl	80040c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <prvInitialiseTaskLists+0x78>)
 8005bac:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <prvInitialiseTaskLists+0x64>)
 8005bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <prvInitialiseTaskLists+0x7c>)
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <prvInitialiseTaskLists+0x68>)
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000db4 	.word	0x20000db4
 8005bc4:	20001214 	.word	0x20001214
 8005bc8:	20001228 	.word	0x20001228
 8005bcc:	20001244 	.word	0x20001244
 8005bd0:	20001258 	.word	0x20001258
 8005bd4:	20001270 	.word	0x20001270
 8005bd8:	2000123c 	.word	0x2000123c
 8005bdc:	20001240 	.word	0x20001240

08005be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005be6:	e019      	b.n	8005c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005be8:	f000 fe5e 	bl	80068a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <prvCheckTasksWaitingTermination+0x4c>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fae7 	bl	80041cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <prvCheckTasksWaitingTermination+0x50>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <prvCheckTasksWaitingTermination+0x50>)
 8005c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c12:	f000 fe77 	bl	8006904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f80e 	bl	8005c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e1      	bne.n	8005be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20001258 	.word	0x20001258
 8005c30:	20001284 	.word	0x20001284
 8005c34:	2000126c 	.word	0x2000126c

08005c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ffe2 	bl	8006c18 <vPortFree>
				vPortFree( pxTCB );
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 ffdf 	bl	8006c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c5a:	e017      	b.n	8005c8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d103      	bne.n	8005c6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 ffd6 	bl	8006c18 <vPortFree>
	}
 8005c6c:	e00e      	b.n	8005c8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d009      	beq.n	8005c8c <prvDeleteTCB+0x54>
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e7fe      	b.n	8005c8a <prvDeleteTCB+0x52>
	}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <prvResetNextTaskUnblockTime+0x40>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <prvResetNextTaskUnblockTime+0x14>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <prvResetNextTaskUnblockTime+0x16>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvResetNextTaskUnblockTime+0x44>)
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cb6:	e008      	b.n	8005cca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <prvResetNextTaskUnblockTime+0x40>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <prvResetNextTaskUnblockTime+0x44>)
 8005cc8:	6013      	str	r3, [r2, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	2000123c 	.word	0x2000123c
 8005cd8:	200012a4 	.word	0x200012a4

08005cdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005ce2:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <xTaskGetCurrentTaskHandle+0x18>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ce8:	687b      	ldr	r3, [r7, #4]
	}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	20000db0 	.word	0x20000db0

08005cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <xTaskGetSchedulerState+0x34>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d06:	2301      	movs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	e008      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <xTaskGetSchedulerState+0x38>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d14:	2302      	movs	r3, #2
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	e001      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d1e:	687b      	ldr	r3, [r7, #4]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20001290 	.word	0x20001290
 8005d30:	200012ac 	.word	0x200012ac

08005d34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d056      	beq.n	8005df8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <xTaskPriorityInherit+0xd0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d246      	bcs.n	8005de6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db06      	blt.n	8005d6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d60:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <xTaskPriorityInherit+0xd0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6959      	ldr	r1, [r3, #20]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <xTaskPriorityInherit+0xd4>)
 8005d80:	4413      	add	r3, r2
 8005d82:	4299      	cmp	r1, r3
 8005d84:	d101      	bne.n	8005d8a <xTaskPriorityInherit+0x56>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <xTaskPriorityInherit+0x58>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d022      	beq.n	8005dd6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fa19 	bl	80041cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <xTaskPriorityInherit+0xd0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <xTaskPriorityInherit+0xd8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <xTaskPriorityInherit+0x84>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <xTaskPriorityInherit+0xd8>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <xTaskPriorityInherit+0xd4>)
 8005dc6:	441a      	add	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fe f9a1 	bl	8004116 <vListInsertEnd>
 8005dd4:	e004      	b.n	8005de0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <xTaskPriorityInherit+0xd0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e008      	b.n	8005df8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <xTaskPriorityInherit+0xd0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d201      	bcs.n	8005df8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005df8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000db0 	.word	0x20000db0
 8005e08:	20000db4 	.word	0x20000db4
 8005e0c:	2000128c 	.word	0x2000128c

08005e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d054      	beq.n	8005ed0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e26:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <xTaskPriorityDisinherit+0xcc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d009      	beq.n	8005e44 <xTaskPriorityDisinherit+0x34>
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	e7fe      	b.n	8005e42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <xTaskPriorityDisinherit+0x50>
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	e7fe      	b.n	8005e5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	1e5a      	subs	r2, r3, #1
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d02c      	beq.n	8005ed0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d128      	bne.n	8005ed0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe f9a2 	bl	80041cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskPriorityDisinherit+0xd0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d903      	bls.n	8005eb0 <xTaskPriorityDisinherit+0xa0>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <xTaskPriorityDisinherit+0xd0>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <xTaskPriorityDisinherit+0xd4>)
 8005ebe:	441a      	add	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe f925 	bl	8004116 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ed0:	697b      	ldr	r3, [r7, #20]
	}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000db0 	.word	0x20000db0
 8005ee0:	2000128c 	.word	0x2000128c
 8005ee4:	20000db4 	.word	0x20000db4

08005ee8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d06d      	beq.n	8005fdc <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e7fe      	b.n	8005f1a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d902      	bls.n	8005f2c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	e002      	b.n	8005f32 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d04f      	beq.n	8005fdc <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d14a      	bne.n	8005fdc <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f46:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d109      	bne.n	8005f64 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	e7fe      	b.n	8005f62 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db04      	blt.n	8005f82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	6959      	ldr	r1, [r3, #20]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f92:	4413      	add	r3, r2
 8005f94:	4299      	cmp	r1, r3
 8005f96:	d101      	bne.n	8005f9c <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01c      	beq.n	8005fdc <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f910 	bl	80041cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	; (8005fec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4a06      	ldr	r2, [pc, #24]	; (8005fe8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005fce:	441a      	add	r2, r3
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f7fe f89d 	bl	8004116 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fdc:	bf00      	nop
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000db0 	.word	0x20000db0
 8005fe8:	20000db4 	.word	0x20000db4
 8005fec:	2000128c 	.word	0x2000128c

08005ff0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ff4:	4b07      	ldr	r3, [pc, #28]	; (8006014 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006002:	3201      	adds	r2, #1
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006006:	4b03      	ldr	r3, [pc, #12]	; (8006014 <pvTaskIncrementMutexHeldCount+0x24>)
 8006008:	681b      	ldr	r3, [r3, #0]
	}
 800600a:	4618      	mov	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000db0 	.word	0x20000db0

08006018 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006022:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006028:	4b20      	ldr	r3, [pc, #128]	; (80060ac <prvAddCurrentTaskToDelayedList+0x94>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3304      	adds	r3, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe f8cc 	bl	80041cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d10a      	bne.n	8006052 <prvAddCurrentTaskToDelayedList+0x3a>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4819      	ldr	r0, [pc, #100]	; (80060b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800604c:	f7fe f863 	bl	8004116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006050:	e026      	b.n	80060a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <prvAddCurrentTaskToDelayedList+0x94>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	429a      	cmp	r2, r3
 8006068:	d209      	bcs.n	800607e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe f870 	bl	800415c <vListInsert>
}
 800607c:	e010      	b.n	80060a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607e:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fe f866 	bl	800415c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d202      	bcs.n	80060a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6013      	str	r3, [r2, #0]
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20001288 	.word	0x20001288
 80060ac:	20000db0 	.word	0x20000db0
 80060b0:	20001270 	.word	0x20001270
 80060b4:	20001240 	.word	0x20001240
 80060b8:	2000123c 	.word	0x2000123c
 80060bc:	200012a4 	.word	0x200012a4

080060c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ca:	f000 fac3 	bl	8006654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ce:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <xTimerCreateTimerTask+0x80>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d021      	beq.n	800611a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060de:	1d3a      	adds	r2, r7, #4
 80060e0:	f107 0108 	add.w	r1, r7, #8
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd ffcf 	bl	800408c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	9202      	str	r2, [sp, #8]
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	2302      	movs	r3, #2
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2300      	movs	r3, #0
 80060fe:	460a      	mov	r2, r1
 8006100:	4910      	ldr	r1, [pc, #64]	; (8006144 <xTimerCreateTimerTask+0x84>)
 8006102:	4811      	ldr	r0, [pc, #68]	; (8006148 <xTimerCreateTimerTask+0x88>)
 8006104:	f7fe ff72 	bl	8004fec <xTaskCreateStatic>
 8006108:	4602      	mov	r2, r0
 800610a:	4b10      	ldr	r3, [pc, #64]	; (800614c <xTimerCreateTimerTask+0x8c>)
 800610c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <xTimerCreateTimerTask+0x8c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <xTimerCreateTimerTask+0x74>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	e7fe      	b.n	8006132 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006134:	697b      	ldr	r3, [r7, #20]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200012e0 	.word	0x200012e0
 8006144:	08008658 	.word	0x08008658
 8006148:	08006269 	.word	0x08006269
 800614c:	200012e4 	.word	0x200012e4

08006150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <xTimerGenericCommand+0x2c>
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	e7fe      	b.n	800617a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <xTimerGenericCommand+0x94>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02a      	beq.n	80061da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b05      	cmp	r3, #5
 8006194:	dc18      	bgt.n	80061c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006196:	f7ff fdaf 	bl	8005cf8 <xTaskGetSchedulerState>
 800619a:	4603      	mov	r3, r0
 800619c:	2b02      	cmp	r3, #2
 800619e:	d109      	bne.n	80061b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <xTimerGenericCommand+0x94>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	f107 0110 	add.w	r1, r7, #16
 80061a8:	2300      	movs	r3, #0
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	f7fe fa28 	bl	8004600 <xQueueGenericSend>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24
 80061b2:	e012      	b.n	80061da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <xTimerGenericCommand+0x94>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f107 0110 	add.w	r1, r7, #16
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	f7fe fa1e 	bl	8004600 <xQueueGenericSend>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
 80061c6:	e008      	b.n	80061da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <xTimerGenericCommand+0x94>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	f107 0110 	add.w	r1, r7, #16
 80061d0:	2300      	movs	r3, #0
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	f7fe fb0e 	bl	80047f4 <xQueueGenericSendFromISR>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	; 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200012e0 	.word	0x200012e0

080061e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <prvProcessExpiredTimer+0x7c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fd ffe3 	bl	80041cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d121      	bne.n	8006252 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	18d1      	adds	r1, r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f000 f8c8 	bl	80063b0 <prvInsertTimerInActiveList>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d015      	beq.n	8006252 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	2100      	movs	r1, #0
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f7ff ff8d 	bl	8006150 <xTimerGenericCommand>
 8006236:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <prvProcessExpiredTimer+0x6a>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e7fe      	b.n	8006250 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	4798      	blx	r3
}
 800625a:	bf00      	nop
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200012d8 	.word	0x200012d8

08006268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f857 	bl	8006328 <prvGetNextExpireTime>
 800627a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f803 	bl	800628c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006286:	f000 f8d5 	bl	8006434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800628a:	e7f1      	b.n	8006270 <prvTimerTask+0x8>

0800628c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006296:	f7ff f947 	bl	8005528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f866 	bl	8006370 <prvSampleTimeNow>
 80062a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d130      	bne.n	800630e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d806      	bhi.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ba:	f7ff f943 	bl	8005544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff91 	bl	80061e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c6:	e024      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvProcessTimerOrBlockTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prvProcessTimerOrBlockTask+0x94>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	f7fe fe49 	bl	8004f84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062f2:	f7ff f927 	bl	8005544 <xTaskResumeAll>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <prvProcessTimerOrBlockTask+0x98>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
}
 800630c:	e001      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630e:	f7ff f919 	bl	8005544 <xTaskResumeAll>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200012dc 	.word	0x200012dc
 8006320:	200012e0 	.word	0x200012e0
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvGetNextExpireTime+0x44>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e001      	b.n	800635e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	200012d8 	.word	0x200012d8

08006370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006378:	f7ff f980 	bl	800567c <xTaskGetTickCount>
 800637c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvSampleTimeNow+0x3c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d205      	bcs.n	8006394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006388:	f000 f904 	bl	8006594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e002      	b.n	800639a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSampleTimeNow+0x3c>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200012e8 	.word	0x200012e8

080063b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d812      	bhi.n	80063fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e01b      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvInsertTimerInActiveList+0x7c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fd feb1 	bl	800415c <vListInsert>
 80063fa:	e012      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d206      	bcs.n	8006412 <prvInsertTimerInActiveList+0x62>
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e007      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <prvInsertTimerInActiveList+0x80>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fd fe9d 	bl	800415c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200012dc 	.word	0x200012dc
 8006430:	200012d8 	.word	0x200012d8

08006434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643a:	e099      	b.n	8006570 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da17      	bge.n	8006472 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	3304      	adds	r3, #4
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <prvProcessReceivedCommands+0x2e>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e7fe      	b.n	8006460 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006468:	6850      	ldr	r0, [r2, #4]
 800646a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	4611      	mov	r1, r2
 8006470:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	db7a      	blt.n	800656e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd fe9f 	bl	80041cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800648e:	463b      	mov	r3, r7
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff6d 	bl	8006370 <prvSampleTimeNow>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b09      	cmp	r3, #9
 800649c:	d868      	bhi.n	8006570 <prvProcessReceivedCommands+0x13c>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <prvProcessReceivedCommands+0x70>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064cd 	.word	0x080064cd
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064cd 	.word	0x080064cd
 80064b0:	08006571 	.word	0x08006571
 80064b4:	08006527 	.word	0x08006527
 80064b8:	0800655d 	.word	0x0800655d
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	080064cd 	.word	0x080064cd
 80064c4:	08006571 	.word	0x08006571
 80064c8:	08006527 	.word	0x08006527
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	18d1      	adds	r1, r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064da:	f7ff ff69 	bl	80063b0 <prvInsertTimerInActiveList>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d045      	beq.n	8006570 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d13d      	bne.n	8006570 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	441a      	add	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	2100      	movs	r1, #0
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f7ff fe23 	bl	8006150 <xTimerGenericCommand>
 800650a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d12e      	bne.n	8006570 <prvProcessReceivedCommands+0x13c>
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e7fe      	b.n	8006524 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <prvProcessReceivedCommands+0x114>
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e7fe      	b.n	8006546 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	18d1      	adds	r1, r2, r3
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006556:	f7ff ff2b 	bl	80063b0 <prvInsertTimerInActiveList>
					break;
 800655a:	e009      	b.n	8006570 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006568:	f000 fb56 	bl	8006c18 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800656c:	e000      	b.n	8006570 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800656e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <prvProcessReceivedCommands+0x15c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	1d39      	adds	r1, r7, #4
 8006576:	2200      	movs	r2, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe f9cf 	bl	800491c <xQueueReceive>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f af5b 	bne.w	800643c <prvProcessReceivedCommands+0x8>
	}
}
 8006586:	bf00      	nop
 8006588:	3730      	adds	r7, #48	; 0x30
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200012e0 	.word	0x200012e0

08006594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800659a:	e044      	b.n	8006626 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800659c:	4b2b      	ldr	r3, [pc, #172]	; (800664c <prvSwitchTimerLists+0xb8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <prvSwitchTimerLists+0xb8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fd fe09 	bl	80041cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d12d      	bne.n	8006626 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4413      	add	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d90e      	bls.n	80065fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <prvSwitchTimerLists+0xb8>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f7fd fdb2 	bl	800415c <vListInsert>
 80065f8:	e015      	b.n	8006626 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	2100      	movs	r1, #0
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff fda3 	bl	8006150 <xTimerGenericCommand>
 800660a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <prvSwitchTimerLists+0x92>
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	e7fe      	b.n	8006624 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <prvSwitchTimerLists+0xb8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1b5      	bne.n	800659c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <prvSwitchTimerLists+0xb8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <prvSwitchTimerLists+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a04      	ldr	r2, [pc, #16]	; (800664c <prvSwitchTimerLists+0xb8>)
 800663c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800663e:	4a04      	ldr	r2, [pc, #16]	; (8006650 <prvSwitchTimerLists+0xbc>)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200012d8 	.word	0x200012d8
 8006650:	200012dc 	.word	0x200012dc

08006654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800665a:	f000 f925 	bl	80068a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800665e:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <prvCheckForValidListAndQueue+0x60>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d120      	bne.n	80066a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006666:	4814      	ldr	r0, [pc, #80]	; (80066b8 <prvCheckForValidListAndQueue+0x64>)
 8006668:	f7fd fd2a 	bl	80040c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800666c:	4813      	ldr	r0, [pc, #76]	; (80066bc <prvCheckForValidListAndQueue+0x68>)
 800666e:	f7fd fd27 	bl	80040c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006672:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <prvCheckForValidListAndQueue+0x6c>)
 8006674:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <prvCheckForValidListAndQueue+0x64>)
 8006676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006678:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <prvCheckForValidListAndQueue+0x70>)
 800667a:	4a10      	ldr	r2, [pc, #64]	; (80066bc <prvCheckForValidListAndQueue+0x68>)
 800667c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <prvCheckForValidListAndQueue+0x74>)
 8006684:	4a11      	ldr	r2, [pc, #68]	; (80066cc <prvCheckForValidListAndQueue+0x78>)
 8006686:	2110      	movs	r1, #16
 8006688:	200a      	movs	r0, #10
 800668a:	f7fd fe31 	bl	80042f0 <xQueueGenericCreateStatic>
 800668e:	4602      	mov	r2, r0
 8006690:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <prvCheckForValidListAndQueue+0x60>)
 8006692:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006694:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <prvCheckForValidListAndQueue+0x60>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <prvCheckForValidListAndQueue+0x60>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	490b      	ldr	r1, [pc, #44]	; (80066d0 <prvCheckForValidListAndQueue+0x7c>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fc46 	bl	8004f34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a8:	f000 f92c 	bl	8006904 <vPortExitCritical>
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200012e0 	.word	0x200012e0
 80066b8:	200012b0 	.word	0x200012b0
 80066bc:	200012c4 	.word	0x200012c4
 80066c0:	200012d8 	.word	0x200012d8
 80066c4:	200012dc 	.word	0x200012dc
 80066c8:	2000138c 	.word	0x2000138c
 80066cc:	200012ec 	.word	0x200012ec
 80066d0:	08008660 	.word	0x08008660

080066d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3b04      	subs	r3, #4
 80066f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3b04      	subs	r3, #4
 8006702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <pxPortInitialiseStack+0x54>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b14      	subs	r3, #20
 800670e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b20      	subs	r3, #32
 800671a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	0800672d 	.word	0x0800672d

0800672c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <prvTaskExitError+0x4c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d009      	beq.n	8006754 <prvTaskExitError+0x28>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e7fe      	b.n	8006752 <prvTaskExitError+0x26>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006766:	bf00      	nop
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0fc      	beq.n	8006768 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	2000006c 	.word	0x2000006c
 800677c:	00000000 	.word	0x00000000

08006780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <pxCurrentTCBConst2>)
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	6808      	ldr	r0, [r1, #0]
 8006786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800678a:	f380 8809 	msr	PSP, r0
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8811 	msr	BASEPRI, r0
 800679a:	f04e 0e0d 	orr.w	lr, lr, #13
 800679e:	4770      	bx	lr

080067a0 <pxCurrentTCBConst2>:
 80067a0:	20000db0 	.word	0x20000db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80067a8:	4806      	ldr	r0, [pc, #24]	; (80067c4 <prvPortStartFirstTask+0x1c>)
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	f380 8808 	msr	MSP, r0
 80067b2:	b662      	cpsie	i
 80067b4:	b661      	cpsie	f
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	df00      	svc	0
 80067c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067c2:	bf00      	nop
 80067c4:	e000ed08 	.word	0xe000ed08

080067c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <xPortStartScheduler+0xcc>)
 80067d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22ff      	movs	r2, #255	; 0xff
 80067de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <xPortStartScheduler+0xd0>)
 80067f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067f6:	4b29      	ldr	r3, [pc, #164]	; (800689c <xPortStartScheduler+0xd4>)
 80067f8:	2207      	movs	r2, #7
 80067fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067fc:	e009      	b.n	8006812 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067fe:	4b27      	ldr	r3, [pc, #156]	; (800689c <xPortStartScheduler+0xd4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	4a25      	ldr	r2, [pc, #148]	; (800689c <xPortStartScheduler+0xd4>)
 8006806:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	d0ef      	beq.n	80067fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <xPortStartScheduler+0xd4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1c3 0307 	rsb	r3, r3, #7
 8006826:	2b04      	cmp	r3, #4
 8006828:	d009      	beq.n	800683e <xPortStartScheduler+0x76>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	e7fe      	b.n	800683c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800683e:	4b17      	ldr	r3, [pc, #92]	; (800689c <xPortStartScheduler+0xd4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	4a15      	ldr	r2, [pc, #84]	; (800689c <xPortStartScheduler+0xd4>)
 8006846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006848:	4b14      	ldr	r3, [pc, #80]	; (800689c <xPortStartScheduler+0xd4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <xPortStartScheduler+0xd4>)
 8006852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xPortStartScheduler+0xd8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <xPortStartScheduler+0xd8>)
 8006862:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <xPortStartScheduler+0xd8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <xPortStartScheduler+0xd8>)
 800686e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006874:	f000 f8b0 	bl	80069d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <xPortStartScheduler+0xdc>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800687e:	f7ff ff93 	bl	80067a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006882:	f7fe ffc7 	bl	8005814 <vTaskSwitchContext>
	prvTaskExitError();
 8006886:	f7ff ff51 	bl	800672c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	e000e400 	.word	0xe000e400
 8006898:	200013dc 	.word	0x200013dc
 800689c:	200013e0 	.word	0x200013e0
 80068a0:	e000ed20 	.word	0xe000ed20
 80068a4:	2000006c 	.word	0x2000006c

080068a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <vPortEnterCritical+0x54>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <vPortEnterCritical+0x54>)
 80068c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <vPortEnterCritical+0x54>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d10e      	bne.n	80068f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortEnterCritical+0x58>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <vPortEnterCritical+0x48>
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	e7fe      	b.n	80068ee <vPortEnterCritical+0x46>
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	2000006c 	.word	0x2000006c
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690a:	4b10      	ldr	r3, [pc, #64]	; (800694c <vPortExitCritical+0x48>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <vPortExitCritical+0x22>
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	e7fe      	b.n	8006924 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <vPortExitCritical+0x48>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a07      	ldr	r2, [pc, #28]	; (800694c <vPortExitCritical+0x48>)
 800692e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <vPortExitCritical+0x48>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <vPortExitCritical+0x3e>
 8006938:	2300      	movs	r3, #0
 800693a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	2000006c 	.word	0x2000006c

08006950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006950:	f3ef 8009 	mrs	r0, PSP
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <pxCurrentTCBConst>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006960:	6010      	str	r0, [r2, #0]
 8006962:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006966:	f04f 0050 	mov.w	r0, #80	; 0x50
 800696a:	f380 8811 	msr	BASEPRI, r0
 800696e:	f7fe ff51 	bl	8005814 <vTaskSwitchContext>
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8811 	msr	BASEPRI, r0
 800697a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6808      	ldr	r0, [r1, #0]
 8006982:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006986:	f380 8809 	msr	PSP, r0
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	4770      	bx	lr

08006990 <pxCurrentTCBConst>:
 8006990:	20000db0 	.word	0x20000db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069b0:	f7fe fe72 	bl	8005698 <xTaskIncrementTick>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <SysTick_Handler+0x3c>)
 80069bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vPortSetupTimerInterrupt+0x30>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <vPortSetupTimerInterrupt+0x34>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <vPortSetupTimerInterrupt+0x38>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <vPortSetupTimerInterrupt+0x3c>)
 80069ee:	fba2 2303 	umull	r2, r3, r2, r3
 80069f2:	099b      	lsrs	r3, r3, #6
 80069f4:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <vPortSetupTimerInterrupt+0x40>)
 80069f6:	3b01      	subs	r3, #1
 80069f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <vPortSetupTimerInterrupt+0x30>)
 80069fc:	2207      	movs	r2, #7
 80069fe:	601a      	str	r2, [r3, #0]
}
 8006a00:	bf00      	nop
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr
 8006a08:	e000e010 	.word	0xe000e010
 8006a0c:	e000e018 	.word	0xe000e018
 8006a10:	20000060 	.word	0x20000060
 8006a14:	10624dd3 	.word	0x10624dd3
 8006a18:	e000e014 	.word	0xe000e014

08006a1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d913      	bls.n	8006a56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <vPortValidateInterruptPriority+0x68>)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <vPortValidateInterruptPriority+0x6c>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	7afa      	ldrb	r2, [r7, #11]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d209      	bcs.n	8006a56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	e7fe      	b.n	8006a54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <vPortValidateInterruptPriority+0x70>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <vPortValidateInterruptPriority+0x74>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d909      	bls.n	8006a7a <vPortValidateInterruptPriority+0x5e>
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	e7fe      	b.n	8006a78 <vPortValidateInterruptPriority+0x5c>
	}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr
 8006a84:	e000e3f0 	.word	0xe000e3f0
 8006a88:	200013dc 	.word	0x200013dc
 8006a8c:	e000ed0c 	.word	0xe000ed0c
 8006a90:	200013e0 	.word	0x200013e0

08006a94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa0:	f7fe fd42 	bl	8005528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aa4:	4b57      	ldr	r3, [pc, #348]	; (8006c04 <pvPortMalloc+0x170>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006aac:	f000 f90c 	bl	8006cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab0:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <pvPortMalloc+0x174>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 808c 	bne.w	8006bd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01c      	beq.n	8006afe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d013      	beq.n	8006afe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	3308      	adds	r3, #8
 8006ade:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <pvPortMalloc+0x6a>
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e7fe      	b.n	8006afc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d068      	beq.n	8006bd6 <pvPortMalloc+0x142>
 8006b04:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <pvPortMalloc+0x178>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d863      	bhi.n	8006bd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b0e:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <pvPortMalloc+0x17c>)
 8006b10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b12:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <pvPortMalloc+0x17c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b18:	e004      	b.n	8006b24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <pvPortMalloc+0xa2>
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b36:	4b33      	ldr	r3, [pc, #204]	; (8006c04 <pvPortMalloc+0x170>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d04a      	beq.n	8006bd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2208      	movs	r2, #8
 8006b46:	4413      	add	r3, r2
 8006b48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d91e      	bls.n	8006ba0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4413      	add	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <pvPortMalloc+0xf4>
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e7fe      	b.n	8006b86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b9a:	69b8      	ldr	r0, [r7, #24]
 8006b9c:	f000 f8f6 	bl	8006d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <pvPortMalloc+0x178>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <pvPortMalloc+0x178>)
 8006bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bae:	4b17      	ldr	r3, [pc, #92]	; (8006c0c <pvPortMalloc+0x178>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <pvPortMalloc+0x180>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d203      	bcs.n	8006bc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <pvPortMalloc+0x178>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <pvPortMalloc+0x180>)
 8006bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <pvPortMalloc+0x174>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bd6:	f7fe fcb5 	bl	8005544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <pvPortMalloc+0x164>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e7fe      	b.n	8006bf6 <pvPortMalloc+0x162>
	return pvReturn;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20004fec 	.word	0x20004fec
 8006c08:	20004ff8 	.word	0x20004ff8
 8006c0c:	20004ff0 	.word	0x20004ff0
 8006c10:	20004fe4 	.word	0x20004fe4
 8006c14:	20004ff4 	.word	0x20004ff4

08006c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d046      	beq.n	8006cb8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	425b      	negs	r3, r3
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <vPortFree+0xa8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <vPortFree+0x42>
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e7fe      	b.n	8006c58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <vPortFree+0x5e>
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	e7fe      	b.n	8006c74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <vPortFree+0xa8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d019      	beq.n	8006cb8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d115      	bne.n	8006cb8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <vPortFree+0xa8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c9c:	f7fe fc44 	bl	8005528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <vPortFree+0xac>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <vPortFree+0xac>)
 8006cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f000 f86c 	bl	8006d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006cb4:	f7fe fc46 	bl	8005544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cb8:	bf00      	nop
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20004ff8 	.word	0x20004ff8
 8006cc4:	20004ff0 	.word	0x20004ff0

08006cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <prvHeapInit+0xac>)
 8006cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00c      	beq.n	8006cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <prvHeapInit+0xac>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d00:	4a1d      	ldr	r2, [pc, #116]	; (8006d78 <prvHeapInit+0xb0>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <prvHeapInit+0xb0>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d14:	2208      	movs	r2, #8
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <prvHeapInit+0xb4>)
 8006d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <prvHeapInit+0xb4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <prvHeapInit+0xb4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <prvHeapInit+0xb4>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <prvHeapInit+0xb8>)
 8006d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <prvHeapInit+0xbc>)
 8006d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <prvHeapInit+0xc0>)
 8006d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d66:	601a      	str	r2, [r3, #0]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	200013e4 	.word	0x200013e4
 8006d78:	20004fe4 	.word	0x20004fe4
 8006d7c:	20004fec 	.word	0x20004fec
 8006d80:	20004ff4 	.word	0x20004ff4
 8006d84:	20004ff0 	.word	0x20004ff0
 8006d88:	20004ff8 	.word	0x20004ff8

08006d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <prvInsertBlockIntoFreeList+0xa8>)
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e002      	b.n	8006da0 <prvInsertBlockIntoFreeList+0x14>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d8f7      	bhi.n	8006d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	4413      	add	r3, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d108      	bne.n	8006dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	441a      	add	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d118      	bne.n	8006e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <prvInsertBlockIntoFreeList+0xac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d00d      	beq.n	8006e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e008      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <prvInsertBlockIntoFreeList+0xac>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e003      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d002      	beq.n	8006e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	20004fe4 	.word	0x20004fe4
 8006e38:	20004fec 	.word	0x20004fec

08006e3c <prv_send_bit>:
 * \param[in]       ow: OneWire instance
 * \param[in]       btw: Bit to send, either `1` or `0`
 * \param[out]      btr: Pointer to output variable to write read bit
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
static lwowr_t prv_send_bit(lwow_t *const ow, uint8_t btw, uint8_t *btr) {
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	460b      	mov	r3, r1
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	72fb      	strb	r3, [r7, #11]
	uint8_t b;

	SET_NOT_NULL(btr, 0);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <prv_send_bit+0x1a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]

	/*
	 * To send logical 1 over 1-wire, send 0xFF over UART
	 * To send logical 0 over 1-wire, send 0x00 over UART
	 */
	btw = btw > 0 ? 0xFF : 0x00; /* Convert to 0 or 1 */
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <prv_send_bit+0x24>
 8006e5c:	23ff      	movs	r3, #255	; 0xff
 8006e5e:	e000      	b.n	8006e62 <prv_send_bit+0x26>
 8006e60:	2300      	movs	r3, #0
 8006e62:	72fb      	strb	r3, [r7, #11]
	if (!ow->ll_drv->tx_rx(&btw, &b, 1, ow->arg)) {
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	68dc      	ldr	r4, [r3, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f107 0117 	add.w	r1, r7, #23
 8006e72:	f107 000b 	add.w	r0, r7, #11
 8006e76:	2201      	movs	r2, #1
 8006e78:	47a0      	blx	r4
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <prv_send_bit+0x48>
		return lwowERRTXRX; /* Transmit error */
 8006e80:	2303      	movs	r3, #3
 8006e82:	e00d      	b.n	8006ea0 <prv_send_bit+0x64>
	}
	b = b == 0xFF ? 1 : 0; /* Go to bit values */
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2bff      	cmp	r3, #255	; 0xff
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	75fb      	strb	r3, [r7, #23]
	SET_NOT_NULL(btr, b); /* Set new byte */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <prv_send_bit+0x62>
 8006e98:	7dfa      	ldrb	r2, [r7, #23]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	701a      	strb	r2, [r3, #0]
	return lwowOK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <lwow_init>:
 * \param[in]       ll_drv: Low-level driver
 * \param[in]       arg: Custom argument
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_init(lwow_t *const ow, const lwow_ll_drv_t *const ll_drv,
		void *arg) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
	LWOW_ASSERT("ow != NULL", ow != NULL);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <lwow_init+0x16>
 8006eba:	2305      	movs	r3, #5
 8006ebc:	e041      	b.n	8006f42 <lwow_init+0x9a>
	LWOW_ASSERT("ll_drv != NULL", ll_drv != NULL);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <lwow_init+0x20>
 8006ec4:	2305      	movs	r3, #5
 8006ec6:	e03c      	b.n	8006f42 <lwow_init+0x9a>
	LWOW_ASSERT("ll_drv->init != NULL", ll_drv->init != NULL);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <lwow_init+0x2c>
 8006ed0:	2305      	movs	r3, #5
 8006ed2:	e036      	b.n	8006f42 <lwow_init+0x9a>
	LWOW_ASSERT("ll_drv->deinit != NULL", ll_drv->deinit != NULL);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <lwow_init+0x38>
 8006edc:	2305      	movs	r3, #5
 8006ede:	e030      	b.n	8006f42 <lwow_init+0x9a>
	LWOW_ASSERT("ll_drv->set_baudrate != NULL", ll_drv->set_baudrate != NULL);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <lwow_init+0x44>
 8006ee8:	2305      	movs	r3, #5
 8006eea:	e02a      	b.n	8006f42 <lwow_init+0x9a>
	LWOW_ASSERT("ll_drv->tx_rx != NULL", ll_drv->tx_rx != NULL);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <lwow_init+0x50>
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	e024      	b.n	8006f42 <lwow_init+0x9a>

	ow->arg = arg;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]
	ow->ll_drv = ll_drv; /* Assign low-level driver */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	611a      	str	r2, [r3, #16]
	if (!ow->ll_drv->init(ow->arg)) { /* Init low-level directly */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	68d2      	ldr	r2, [r2, #12]
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <lwow_init+0x74>
		return lwowERR;
 8006f18:	2306      	movs	r3, #6
 8006f1a:	e012      	b.n	8006f42 <lwow_init+0x9a>
	}
#if LWOW_CFG_OS
    if (!lwow_sys_mutex_create(&ow->mutex, arg)) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fabf 	bl	80074a6 <lwow_sys_mutex_create>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d108      	bne.n	8006f40 <lwow_init+0x98>
        ow->ll_drv->deinit(ow->arg);            /* Deinit low-level */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	68d2      	ldr	r2, [r2, #12]
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
        return lwowERR;
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	e000      	b.n	8006f42 <lwow_init+0x9a>
    }
#endif /* LWOW_CFG_OS */
	return lwowOK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <lwow_protect>:
 * \note            Used only for OS systems
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_protect(lwow_t *const ow, const uint8_t protect) {
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
	LWOW_ASSERT("ow != NULL", ow != NULL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <lwow_protect+0x16>
 8006f5c:	2305      	movs	r3, #5
 8006f5e:	e011      	b.n	8006f84 <lwow_protect+0x3a>

#if LWOW_CFG_OS
    if (protect && !lwow_sys_mutex_wait(&ow->mutex, ow->arg)) {
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <lwow_protect+0x38>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f103 0214 	add.w	r2, r3, #20
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f000 fab8 	bl	80074e8 <lwow_sys_mutex_wait>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <lwow_protect+0x38>
        return lwowERR;
 8006f7e:	2306      	movs	r3, #6
 8006f80:	e000      	b.n	8006f84 <lwow_protect+0x3a>
    }
#else
	(void) ow;
	(void) protect;
#endif /* LWOW_CFG_OS */
	return lwowOK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <lwow_unprotect>:
 * \note            Used only for OS systems
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_unprotect(lwow_t *const ow, const uint8_t protect) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
	LWOW_ASSERT("ow != NULL", ow != NULL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <lwow_unprotect+0x16>
 8006f9e:	2305      	movs	r3, #5
 8006fa0:	e011      	b.n	8006fc6 <lwow_unprotect+0x3a>

#if LWOW_CFG_OS
    if (protect && !lwow_sys_mutex_release(&ow->mutex, ow->arg)) {
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00d      	beq.n	8006fc4 <lwow_unprotect+0x38>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f103 0214 	add.w	r2, r3, #20
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 faad 	bl	8007514 <lwow_sys_mutex_release>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <lwow_unprotect+0x38>
        return lwowERR;
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	e000      	b.n	8006fc6 <lwow_unprotect+0x3a>
    }
#else
	(void) ow;
	(void) protect;
#endif /* LWOW_CFG_OS */
	return lwowOK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <lwow_reset_raw>:
/**
 * \brief           Reset 1-Wire bus and set connected devices to idle state
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_reset_raw(lwow_t *const ow) {
 8006fce:	b590      	push	{r4, r7, lr}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
	uint8_t b;

	LWOW_ASSERT("ow != NULL", ow != NULL);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <lwow_reset_raw+0x12>
 8006fdc:	2305      	movs	r3, #5
 8006fde:	e036      	b.n	800704e <lwow_reset_raw+0x80>

	/* First send reset pulse */
	b = OW_RESET_BYTE; /* Set reset sequence byte = 0xF0 */
 8006fe0:	23f0      	movs	r3, #240	; 0xf0
 8006fe2:	73fb      	strb	r3, [r7, #15]
	if (!ow->ll_drv->set_baudrate(9600, ow->arg)) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68d2      	ldr	r2, [r2, #12]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <lwow_reset_raw+0x32>
		return lwowERRBAUD; /* Error setting baudrate */
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	e026      	b.n	800704e <lwow_reset_raw+0x80>
	}
	if (!ow->ll_drv->tx_rx(&b, &b, 1, ow->arg)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	68dc      	ldr	r4, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f107 010f 	add.w	r1, r7, #15
 800700e:	f107 000f 	add.w	r0, r7, #15
 8007012:	2201      	movs	r2, #1
 8007014:	47a0      	blx	r4
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <lwow_reset_raw+0x52>
		return lwowERRTXRX; /* Error with data exchange */
 800701c:	2303      	movs	r3, #3
 800701e:	e016      	b.n	800704e <lwow_reset_raw+0x80>
	}
	if (!ow->ll_drv->set_baudrate(115200, ow->arg)) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68d2      	ldr	r2, [r2, #12]
 800702a:	4611      	mov	r1, r2
 800702c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8007030:	4798      	blx	r3
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <lwow_reset_raw+0x6e>
		return lwowERRBAUD; /* Error setting baudrate */
 8007038:	2304      	movs	r3, #4
 800703a:	e008      	b.n	800704e <lwow_reset_raw+0x80>
	}

	/* Check if there is reply from any device */
	if (b == 0 || b == OW_RESET_BYTE) {
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <lwow_reset_raw+0x7a>
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2bf0      	cmp	r3, #240	; 0xf0
 8007046:	d101      	bne.n	800704c <lwow_reset_raw+0x7e>
		return lwowERRPRESENCE;
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <lwow_reset_raw+0x80>
	}
	return lwowOK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}

08007056 <lwow_write_byte_ex_raw>:
 * \param[in]       btw: Byte to write
 * \param[out]      br: Pointer to read value. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_write_byte_ex_raw(lwow_t *const ow, const uint8_t btw,
		uint8_t *const br) {
 8007056:	b590      	push	{r4, r7, lr}
 8007058:	b089      	sub	sp, #36	; 0x24
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	460b      	mov	r3, r1
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	72fb      	strb	r3, [r7, #11]
	uint8_t tr[8];

	LWOW_ASSERT("ow != NULL", ow != NULL);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <lwow_write_byte_ex_raw+0x18>
 800706a:	2305      	movs	r3, #5
 800706c:	e053      	b.n	8007116 <lwow_write_byte_ex_raw+0xc0>
	SET_NOT_NULL(br, 0);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <lwow_write_byte_ex_raw+0x24>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	701a      	strb	r2, [r3, #0]

	/* Prepare output data */
	for (uint8_t i = 0; i < 8; ++i) {
 800707a:	2300      	movs	r3, #0
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e013      	b.n	80070a8 <lwow_write_byte_ex_raw+0x52>
		/*
		 * If we have to send high bit, set byte as 0xFF,
		 * otherwise set it as low bit, 0x00
		 */
		tr[i] = (btw & (1 << i)) ? 0xFF : 0x00;
 8007080:	7afa      	ldrb	r2, [r7, #11]
 8007082:	7ffb      	ldrb	r3, [r7, #31]
 8007084:	fa42 f303 	asr.w	r3, r2, r3
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <lwow_write_byte_ex_raw+0x3e>
 8007090:	22ff      	movs	r2, #255	; 0xff
 8007092:	e000      	b.n	8007096 <lwow_write_byte_ex_raw+0x40>
 8007094:	2200      	movs	r2, #0
 8007096:	7ffb      	ldrb	r3, [r7, #31]
 8007098:	f107 0120 	add.w	r1, r7, #32
 800709c:	440b      	add	r3, r1
 800709e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < 8; ++i) {
 80070a2:	7ffb      	ldrb	r3, [r7, #31]
 80070a4:	3301      	adds	r3, #1
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	d9e8      	bls.n	8007080 <lwow_write_byte_ex_raw+0x2a>

	/*
	 * Exchange data on UART level,
	 * send single byte for each bit = 8 bytes
	 */
	if (!ow->ll_drv->tx_rx(tr, tr, 8, ow->arg)) {
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	68dc      	ldr	r4, [r3, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f107 0114 	add.w	r1, r7, #20
 80070bc:	f107 0014 	add.w	r0, r7, #20
 80070c0:	2208      	movs	r2, #8
 80070c2:	47a0      	blx	r4
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <lwow_write_byte_ex_raw+0x78>
		return lwowERRTXRX;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e023      	b.n	8007116 <lwow_write_byte_ex_raw+0xc0>
	}

	/* Update output value */
	if (br != NULL) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01f      	beq.n	8007114 <lwow_write_byte_ex_raw+0xbe>
		uint8_t r = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	77bb      	strb	r3, [r7, #30]
		/*
		 * Check received data. If we read 0xFF,
		 * our logical write 1 was successful, otherwise it was 0.
		 */
		for (uint8_t i = 0; i < 8; ++i) {
 80070d8:	2300      	movs	r3, #0
 80070da:	777b      	strb	r3, [r7, #29]
 80070dc:	e014      	b.n	8007108 <lwow_write_byte_ex_raw+0xb2>
			if (tr[i] == 0xFF) {
 80070de:	7f7b      	ldrb	r3, [r7, #29]
 80070e0:	f107 0220 	add.w	r2, r7, #32
 80070e4:	4413      	add	r3, r2
 80070e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80070ea:	2bff      	cmp	r3, #255	; 0xff
 80070ec:	d109      	bne.n	8007102 <lwow_write_byte_ex_raw+0xac>
				r |= 0x01 << i;
 80070ee:	7f7b      	ldrb	r3, [r7, #29]
 80070f0:	2201      	movs	r2, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	b25a      	sxtb	r2, r3
 80070f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b25b      	sxtb	r3, r3
 8007100:	77bb      	strb	r3, [r7, #30]
		for (uint8_t i = 0; i < 8; ++i) {
 8007102:	7f7b      	ldrb	r3, [r7, #29]
 8007104:	3301      	adds	r3, #1
 8007106:	777b      	strb	r3, [r7, #29]
 8007108:	7f7b      	ldrb	r3, [r7, #29]
 800710a:	2b07      	cmp	r3, #7
 800710c:	d9e7      	bls.n	80070de <lwow_write_byte_ex_raw+0x88>
			}
		}
		*br = r;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7fba      	ldrb	r2, [r7, #30]
 8007112:	701a      	strb	r2, [r3, #0]
	}
	return lwowOK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3724      	adds	r7, #36	; 0x24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}

0800711e <lwow_search_reset_raw>:
/**
 * \brief           Reset search
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_search_reset_raw(lwow_t *const ow) {
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
	LWOW_ASSERT("ow != NULL", ow != NULL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <lwow_search_reset_raw+0x12>
 800712c:	2305      	movs	r3, #5
 800712e:	e003      	b.n	8007138 <lwow_search_reset_raw+0x1a>

	ow->disrepancy = OW_FIRST_DEV; /* Reset disrepancy to default value */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22ff      	movs	r2, #255	; 0xff
 8007134:	721a      	strb	r2, [r3, #8]
	return lwowOK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <lwow_search_with_command_raw>:
 * \param[in]       cmd: command to use for search operation
 * \param[out]      rom_id: Pointer to ROM structure to store address
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_search_with_command_raw(lwow_t *const ow, const uint8_t cmd,
		lwow_rom_t *const rom_id) {
 8007142:	b580      	push	{r7, lr}
 8007144:	b088      	sub	sp, #32
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	460b      	mov	r3, r1
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	72fb      	strb	r3, [r7, #11]
	lwowr_t res;
	uint8_t id_bit_number, next_disrepancy, *id;

	LWOW_ASSERT("ow != NULL", ow != NULL);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <lwow_search_with_command_raw+0x18>
 8007156:	2305      	movs	r3, #5
 8007158:	e08f      	b.n	800727a <lwow_search_with_command_raw+0x138>
	LWOW_ASSERT("rom_id != NULL", rom_id != NULL);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <lwow_search_with_command_raw+0x22>
 8007160:	2305      	movs	r3, #5
 8007162:	e08a      	b.n	800727a <lwow_search_with_command_raw+0x138>

	id = ow->rom.rom;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	61bb      	str	r3, [r7, #24]

	/* Check for last device */
	if (ow->disrepancy == 0) {
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	7a1b      	ldrb	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <lwow_search_with_command_raw+0x38>
		lwow_search_reset_raw(ow); /* Reset search for next search */
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff ffd4 	bl	800711e <lwow_search_reset_raw>
		return lwowERRNODEV; /* No devices anymore */
 8007176:	2302      	movs	r3, #2
 8007178:	e07f      	b.n	800727a <lwow_search_with_command_raw+0x138>
	}

	/* Step 1: Reset all devices on 1-Wire line to be able to listen for new command */
	if ((res = lwow_reset_raw(ow)) != lwowOK) {
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff ff27 	bl	8006fce <lwow_reset_raw>
 8007180:	4603      	mov	r3, r0
 8007182:	75bb      	strb	r3, [r7, #22]
 8007184:	7dbb      	ldrb	r3, [r7, #22]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <lwow_search_with_command_raw+0x4c>
		return res;
 800718a:	7dbb      	ldrb	r3, [r7, #22]
 800718c:	e075      	b.n	800727a <lwow_search_with_command_raw+0x138>
	}

	/* Step 2: Send search rom command for all devices on 1-Wire */
	lwow_write_byte_ex_raw(ow, cmd, NULL); /* Start with search ROM command */
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	2200      	movs	r2, #0
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f7ff ff5e 	bl	8007056 <lwow_write_byte_ex_raw>
	next_disrepancy = OW_LAST_DEV; /* This is currently last device */
 800719a:	2300      	movs	r3, #0
 800719c:	77bb      	strb	r3, [r7, #30]

	for (id_bit_number = 64; id_bit_number > 0;) {
 800719e:	2340      	movs	r3, #64	; 0x40
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e057      	b.n	8007254 <lwow_search_with_command_raw+0x112>
		uint8_t b, b_cpl;
		for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 80071a4:	2308      	movs	r3, #8
 80071a6:	75fb      	strb	r3, [r7, #23]
 80071a8:	e04e      	b.n	8007248 <lwow_search_with_command_raw+0x106>
			/* Read first bit and its complimentary one */
			if (prv_send_bit(ow, 1, &b) != lwowOK
 80071aa:	f107 0315 	add.w	r3, r7, #21
 80071ae:	461a      	mov	r2, r3
 80071b0:	2101      	movs	r1, #1
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fe42 	bl	8006e3c <prv_send_bit>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <lwow_search_with_command_raw+0x90>
					|| prv_send_bit(ow, 1, &b_cpl) != lwowOK) {
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	461a      	mov	r2, r3
 80071c4:	2101      	movs	r1, #1
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff fe38 	bl	8006e3c <prv_send_bit>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <lwow_search_with_command_raw+0x94>
				return lwowERRTXRX;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e051      	b.n	800727a <lwow_search_with_command_raw+0x138>
			 *
			 *  - Single device connected on 1-Wire or
			 *  - All devices on 1-Wire have the same bit value at current position
			 *      - In this case, we move to direction of b value
			 */
			if (b && b_cpl) {
 80071d6:	7d7b      	ldrb	r3, [r7, #21]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <lwow_search_with_command_raw+0xa0>
 80071dc:	7d3b      	ldrb	r3, [r7, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d13c      	bne.n	800725c <lwow_search_with_command_raw+0x11a>
				goto out;
				/* We do not have device connected */
			} else if (!b && !b_cpl) {
 80071e2:	7d7b      	ldrb	r3, [r7, #21]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d116      	bne.n	8007216 <lwow_search_with_command_raw+0xd4>
 80071e8:	7d3b      	ldrb	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d113      	bne.n	8007216 <lwow_search_with_command_raw+0xd4>
				 *  - Previous ROM address bit 0 was 1 and known diff is different than reading
				 *
				 * Because we shift *id variable down by 1 bit every iteration,
				 * *id & 0x01 always returns 1 if bit on previous ROM is the same as current bit
				 */
				if (id_bit_number < ow->disrepancy
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	7a1b      	ldrb	r3, [r3, #8]
 80071f2:	7ffa      	ldrb	r2, [r7, #31]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d30a      	bcc.n	800720e <lwow_search_with_command_raw+0xcc>
						|| ((*id & 0x01) && ow->disrepancy != id_bit_number)) {
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <lwow_search_with_command_raw+0xd4>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	7a1b      	ldrb	r3, [r3, #8]
 8007208:	7ffa      	ldrb	r2, [r7, #31]
 800720a:	429a      	cmp	r2, r3
 800720c:	d003      	beq.n	8007216 <lwow_search_with_command_raw+0xd4>
					b = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	757b      	strb	r3, [r7, #21]
					next_disrepancy = id_bit_number;
 8007212:	7ffb      	ldrb	r3, [r7, #31]
 8007214:	77bb      	strb	r3, [r7, #30]
			 * will go to blocked state and will wait for next reset sequence
			 *
			 * In case of "collision", we decide here which devices we will
			 * continue to scan (binary tree)
			 */
			prv_send_bit(ow, b, NULL);
 8007216:	7d7b      	ldrb	r3, [r7, #21]
 8007218:	2200      	movs	r2, #0
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fe0d 	bl	8006e3c <prv_send_bit>

			/*
			 * Because we shift down *id each iteration, we have to position bit value to the MSB position
			 * and it will be automatically positioned correct way.
			 */
			*id = (*id >> 0x01) | (b << 0x07); /* Shift ROM byte down and add next, protocol is LSB first */
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	b2db      	uxtb	r3, r3
 800722a:	b25a      	sxtb	r2, r3
 800722c:	7d7b      	ldrb	r3, [r7, #21]
 800722e:	01db      	lsls	r3, r3, #7
 8007230:	b25b      	sxtb	r3, r3
 8007232:	4313      	orrs	r3, r2
 8007234:	b25b      	sxtb	r3, r3
 8007236:	b2da      	uxtb	r2, r3
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	3b01      	subs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
 8007242:	7ffb      	ldrb	r3, [r7, #31]
 8007244:	3b01      	subs	r3, #1
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ad      	bne.n	80071aa <lwow_search_with_command_raw+0x68>
		}
		++id; /* Go to next byte */
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3301      	adds	r3, #1
 8007252:	61bb      	str	r3, [r7, #24]
	for (id_bit_number = 64; id_bit_number > 0;) {
 8007254:	7ffb      	ldrb	r3, [r7, #31]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1a4      	bne.n	80071a4 <lwow_search_with_command_raw+0x62>
	}
	out: ow->disrepancy = next_disrepancy; /* Save disrepancy value */
 800725a:	bf00      	nop
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	7fba      	ldrb	r2, [r7, #30]
 8007260:	721a      	strb	r2, [r3, #8]
	memcpy(rom_id->rom, ow->rom.rom, sizeof(ow->rom.rom)); /* Copy ROM to user memory */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68f9      	ldr	r1, [r7, #12]
 8007266:	2208      	movs	r2, #8
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f9f3 	bl	8007654 <memcpy>
	return id_bit_number == 0 ? lwowOK : lwowERRNODEV; /* Return search result status */
 800726e:	7ffb      	ldrb	r3, [r7, #31]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <lwow_search_with_command_raw+0x136>
 8007274:	2300      	movs	r3, #0
 8007276:	e000      	b.n	800727a <lwow_search_with_command_raw+0x138>
 8007278:	2302      	movs	r3, #2
}
 800727a:	4618      	mov	r0, r3
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <lwow_search_devices_with_command_raw>:
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_search_devices_with_command_raw(lwow_t *const ow,
		const uint8_t cmd, lwow_rom_t *const rom_id_arr, const size_t rom_len,
		size_t *const roms_found) {
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	460b      	mov	r3, r1
 8007290:	72fb      	strb	r3, [r7, #11]
	lwowr_t res;
	size_t cnt = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]

	LWOW_ASSERT("ow != NULL", ow != NULL);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <lwow_search_devices_with_command_raw+0x1e>
 800729c:	2305      	movs	r3, #5
 800729e:	e037      	b.n	8007310 <lwow_search_devices_with_command_raw+0x8e>
	LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <lwow_search_devices_with_command_raw+0x28>
 80072a6:	2305      	movs	r3, #5
 80072a8:	e032      	b.n	8007310 <lwow_search_devices_with_command_raw+0x8e>
	LWOW_ASSERT("rom_len > 0", rom_len > 0);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <lwow_search_devices_with_command_raw+0x32>
 80072b0:	2305      	movs	r3, #5
 80072b2:	e02d      	b.n	8007310 <lwow_search_devices_with_command_raw+0x8e>

	for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff ff30 	bl	800711e <lwow_search_reset_raw>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
 80072c2:	e010      	b.n	80072e6 <lwow_search_devices_with_command_raw+0x64>
		if ((res = lwow_search_with_command_raw(ow, cmd, &rom_id_arr[cnt]))
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	441a      	add	r2, r3
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff ff36 	bl	8007142 <lwow_search_with_command_raw>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d107      	bne.n	80072f0 <lwow_search_devices_with_command_raw+0x6e>
	for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d3ea      	bcc.n	80072c4 <lwow_search_devices_with_command_raw+0x42>
 80072ee:	e000      	b.n	80072f2 <lwow_search_devices_with_command_raw+0x70>
				!= lwowOK) {
			break;
 80072f0:	bf00      	nop
		}
	}
	if (roms_found != NULL) {
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <lwow_search_devices_with_command_raw+0x7c>
		*roms_found = cnt;
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	601a      	str	r2, [r3, #0]
	}
	if (res == lwowERRNODEV && cnt > 0) {
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d104      	bne.n	800730e <lwow_search_devices_with_command_raw+0x8c>
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <lwow_search_devices_with_command_raw+0x8c>
		res = lwowOK;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <lwow_search_devices_raw>:
 * \param[in]       rom_len: Length of input ROM array
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t lwow_search_devices_raw(lwow_t *const ow, lwow_rom_t *const rom_id_arr,
		const size_t rom_len, size_t *const roms_found) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af02      	add	r7, sp, #8
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
	LWOW_ASSERT("ow != NULL", ow != NULL);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <lwow_search_devices_raw+0x18>
 800732c:	2305      	movs	r3, #5
 800732e:	e012      	b.n	8007356 <lwow_search_devices_raw+0x3e>
	LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <lwow_search_devices_raw+0x22>
 8007336:	2305      	movs	r3, #5
 8007338:	e00d      	b.n	8007356 <lwow_search_devices_raw+0x3e>
	LWOW_ASSERT("rom_len > 0", rom_len > 0);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <lwow_search_devices_raw+0x2c>
 8007340:	2305      	movs	r3, #5
 8007342:	e008      	b.n	8007356 <lwow_search_devices_raw+0x3e>

	return lwow_search_devices_with_command_raw(ow, LWOW_CMD_SEARCHROM,
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	21f0      	movs	r1, #240	; 0xf0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff ff97 	bl	8007282 <lwow_search_devices_with_command_raw>
 8007354:	4603      	mov	r3, r0
			rom_id_arr, rom_len, roms_found);
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <lwow_search_devices>:
/**
 * \copydoc         lwow_search_devices_raw
 * \note            This function is thread-safe
 */
lwowr_t lwow_search_devices(lwow_t *const ow, lwow_rom_t *const rom_id_arr,
		const size_t rom_len, size_t *const roms_found) {
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
	lwowr_t res;

	LWOW_ASSERT("ow != NULL", ow != NULL);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <lwow_search_devices+0x18>
 8007372:	2305      	movs	r3, #5
 8007374:	e01a      	b.n	80073ac <lwow_search_devices+0x4e>
	LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <lwow_search_devices+0x22>
 800737c:	2305      	movs	r3, #5
 800737e:	e015      	b.n	80073ac <lwow_search_devices+0x4e>
	LWOW_ASSERT("rom_len > 0", rom_len > 0);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <lwow_search_devices+0x2c>
 8007386:	2305      	movs	r3, #5
 8007388:	e010      	b.n	80073ac <lwow_search_devices+0x4e>

	lwow_protect(ow, 1);
 800738a:	2101      	movs	r1, #1
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff fddc 	bl	8006f4a <lwow_protect>
	res = lwow_search_devices_raw(ow, rom_id_arr, rom_len, roms_found);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff ffbd 	bl	8007318 <lwow_search_devices_raw>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
	lwow_unprotect(ow, 1);
 80073a2:	2101      	movs	r1, #1
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fdf1 	bl	8006f8c <lwow_unprotect>
	return res;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <init>:

/* STM32 LL driver for OW */
const lwow_ll_drv_t lwow_ll_drv_stm32_hal = { .init = init, .deinit = deinit,
		.set_baudrate = set_baudrate, .tx_rx = transmit_receive, };

static uint8_t init(void *arg) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = arg;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60fb      	str	r3, [r7, #12]

	LWOW_ASSERT0("arg != NULL", arg != NULL);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <init+0x16>
 80073c6:	2300      	movs	r3, #0
 80073c8:	e00b      	b.n	80073e2 <init+0x2e>

	/* Initialize UART */
	HAL_UART_DeInit(huart);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7fb febf 	bl	800314e <HAL_UART_DeInit>
	return HAL_UART_Init(huart) == HAL_OK;
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7fb fe6f 	bl	80030b4 <HAL_UART_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <deinit>:

static uint8_t deinit(void *arg) {
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = arg;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60fb      	str	r3, [r7, #12]

	LWOW_ASSERT0("arg != NULL", arg != NULL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <deinit+0x16>
 80073fc:	2300      	movs	r3, #0
 80073fe:	e003      	b.n	8007408 <deinit+0x1e>

	return HAL_UART_DeInit(huart);
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7fb fea4 	bl	800314e <HAL_UART_DeInit>
 8007406:	4603      	mov	r3, r0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <set_baudrate>:

static uint8_t set_baudrate(uint32_t baud, void *arg) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef *huart = arg;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	60fb      	str	r3, [r7, #12]

	LWOW_ASSERT0("arg != NULL", arg != NULL);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <set_baudrate+0x18>
 8007424:	2300      	movs	r3, #0
 8007426:	e006      	b.n	8007436 <set_baudrate+0x26>

	huart->Init.BaudRate = baud;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
	return init(huart);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff ffc0 	bl	80073b4 <init>
 8007434:	4603      	mov	r3, r0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <transmit_receive>:

static uint8_t transmit_receive(const uint8_t *tx, uint8_t *rx, size_t len,
		void *arg) {
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]
	UART_HandleTypeDef *huart = arg;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	617b      	str	r3, [r7, #20]
	uint32_t start;

	LWOW_ASSERT0("arg != NULL", arg != NULL);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <transmit_receive+0x1c>
 8007456:	2300      	movs	r3, #0
 8007458:	e021      	b.n	800749e <transmit_receive+0x60>

	/* Get current HAL tick */
	start = HAL_GetTick();
 800745a:	f7f9 ffc5 	bl	80013e8 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

	/* Start RX in interrupt mode */
	HAL_UART_Receive_IT(huart, rx, len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	6978      	ldr	r0, [r7, #20]
 800746a:	f7fb ff2e 	bl	80032ca <HAL_UART_Receive_IT>

	/* Process TX in polling mode */
	HAL_UART_Transmit(huart, (void*) tx, len, 100);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	b29a      	uxth	r2, r3
 8007472:	2364      	movs	r3, #100	; 0x64
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	6978      	ldr	r0, [r7, #20]
 8007478:	f7fb fe95 	bl	80031a6 <HAL_UART_Transmit>

	/* Wait RX to finish */
	while (huart->RxState != HAL_UART_STATE_READY) {
 800747c:	e008      	b.n	8007490 <transmit_receive+0x52>
		if (HAL_GetTick() - start > 100) {
 800747e:	f7f9 ffb3 	bl	80013e8 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b64      	cmp	r3, #100	; 0x64
 800748a:	d901      	bls.n	8007490 <transmit_receive+0x52>
			return 0;
 800748c:	2300      	movs	r3, #0
 800748e:	e006      	b.n	800749e <transmit_receive+0x60>
	while (huart->RxState != HAL_UART_STATE_READY) {
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b20      	cmp	r3, #32
 800749a:	d1f0      	bne.n	800747e <transmit_receive+0x40>
		}
	}

	return 1;
 800749c:	2301      	movs	r3, #1
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <lwow_sys_mutex_create>:
#if LWOW_CFG_OS && !__DOXYGEN__

#include "cmsis_os.h"

uint8_t
lwow_sys_mutex_create(LWOW_CFG_OS_MUTEX_HANDLE* m, void* arg) {
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
    LWOW_UNUSED(arg);
    const osMutexAttr_t attr = {
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	2301      	movs	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
        .attr_bits = osMutexRecursive
    };

    *m = osMutexNew(&attr);
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fc fc7e 	bl	8003dc8 <osMutexNew>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
    return *m != NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf14      	ite	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	2300      	moveq	r3, #0
 80074de:	b2db      	uxtb	r3, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <lwow_sys_mutex_wait>:
    LWOW_UNUSED(arg);
    return osMutexDelete(*m) == osOK;
}

uint8_t
lwow_sys_mutex_wait(LWOW_CFG_OS_MUTEX_HANDLE* m, void* arg) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
    LWOW_UNUSED(arg);
    return osMutexAcquire(*m, osWaitForever) == osOK;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f04f 31ff 	mov.w	r1, #4294967295
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc fcfe 	bl	8003efc <osMutexAcquire>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <lwow_sys_mutex_release>:

uint8_t
lwow_sys_mutex_release(LWOW_CFG_OS_MUTEX_HANDLE* m, void* arg) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
    LWOW_UNUSED(arg);
    return osMutexRelease(*m) == osOK;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fc fd48 	bl	8003fb8 <osMutexRelease>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <scan_onewire_devices>:
 * \param[in]       rom_ids: pointer to array of \ref lwow_rom_t structures
 * \param[in]       rtf: Number of roms to find
 * \param[out]      rf: Number of roms found after scan
 */
lwowr_t scan_onewire_devices(lwow_t *ow, lwow_rom_t *rom_ids, size_t rtf,
		size_t *rf) {
 800753c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753e:	b08f      	sub	sp, #60	; 0x3c
 8007540:	af06      	add	r7, sp, #24
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	lwowr_t res;
	size_t found;

	/* Search for devices and save it to array */
	res = lwow_search_devices(ow, rom_ids, rtf, &found);
 800754a:	f107 0314 	add.w	r3, r7, #20
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff ff03 	bl	800735e <lwow_search_devices>
 8007558:	4603      	mov	r3, r0
 800755a:	76fb      	strb	r3, [r7, #27]

	/* Print all devices */
	for (size_t i = 0; i < found; ++i) {
 800755c:	2300      	movs	r3, #0
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	e03c      	b.n	80075dc <scan_onewire_devices+0xa0>
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
				(unsigned) rom_ids[i].rom[0], (unsigned) rom_ids[i].rom[1],
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800756c:	461e      	mov	r6, r3
				(unsigned) rom_ids[i].rom[0], (unsigned) rom_ids[i].rom[1],
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4413      	add	r3, r2
 8007576:	785b      	ldrb	r3, [r3, #1]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007578:	469c      	mov	ip, r3
				(unsigned) rom_ids[i].rom[2], (unsigned) rom_ids[i].rom[3],
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	4413      	add	r3, r2
 8007582:	789b      	ldrb	r3, [r3, #2]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007584:	469e      	mov	lr, r3
				(unsigned) rom_ids[i].rom[2], (unsigned) rom_ids[i].rom[3],
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	78db      	ldrb	r3, [r3, #3]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007590:	4619      	mov	r1, r3
				(unsigned) rom_ids[i].rom[4], (unsigned) rom_ids[i].rom[5],
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4413      	add	r3, r2
 800759a:	791b      	ldrb	r3, [r3, #4]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800759c:	4618      	mov	r0, r3
				(unsigned) rom_ids[i].rom[4], (unsigned) rom_ids[i].rom[5],
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4413      	add	r3, r2
 80075a6:	795b      	ldrb	r3, [r3, #5]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80075a8:	461c      	mov	r4, r3
				(unsigned) rom_ids[i].rom[6], (unsigned) rom_ids[i].rom[7]);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	799b      	ldrb	r3, [r3, #6]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80075b4:	461d      	mov	r5, r3
				(unsigned) rom_ids[i].rom[6], (unsigned) rom_ids[i].rom[7]);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	79db      	ldrb	r3, [r3, #7]
		printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9503      	str	r5, [sp, #12]
 80075c4:	9402      	str	r4, [sp, #8]
 80075c6:	9001      	str	r0, [sp, #4]
 80075c8:	9100      	str	r1, [sp, #0]
 80075ca:	4673      	mov	r3, lr
 80075cc:	4662      	mov	r2, ip
 80075ce:	4631      	mov	r1, r6
 80075d0:	480a      	ldr	r0, [pc, #40]	; (80075fc <scan_onewire_devices+0xc0>)
 80075d2:	f000 f853 	bl	800767c <iprintf>
	for (size_t i = 0; i < found; ++i) {
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3301      	adds	r3, #1
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3be      	bcc.n	8007562 <scan_onewire_devices+0x26>
	}
	if (rf != NULL) {
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <scan_onewire_devices+0xb4>
		*rf = found;
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	601a      	str	r2, [r3, #0]
	}
	return res;
 80075f0:	7efb      	ldrb	r3, [r7, #27]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3724      	adds	r7, #36	; 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075fa:	bf00      	nop
 80075fc:	08008668 	.word	0x08008668

08007600 <__errno>:
 8007600:	4b01      	ldr	r3, [pc, #4]	; (8007608 <__errno+0x8>)
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20000070 	.word	0x20000070

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	2500      	movs	r5, #0
 8007610:	4e0c      	ldr	r6, [pc, #48]	; (8007644 <__libc_init_array+0x38>)
 8007612:	4c0d      	ldr	r4, [pc, #52]	; (8007648 <__libc_init_array+0x3c>)
 8007614:	1ba4      	subs	r4, r4, r6
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	42a5      	cmp	r5, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	f000 ff96 	bl	800854c <_init>
 8007620:	2500      	movs	r5, #0
 8007622:	4e0a      	ldr	r6, [pc, #40]	; (800764c <__libc_init_array+0x40>)
 8007624:	4c0a      	ldr	r4, [pc, #40]	; (8007650 <__libc_init_array+0x44>)
 8007626:	1ba4      	subs	r4, r4, r6
 8007628:	10a4      	asrs	r4, r4, #2
 800762a:	42a5      	cmp	r5, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007634:	4798      	blx	r3
 8007636:	3501      	adds	r5, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800763e:	4798      	blx	r3
 8007640:	3501      	adds	r5, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	08008798 	.word	0x08008798
 8007648:	08008798 	.word	0x08008798
 800764c:	08008798 	.word	0x08008798
 8007650:	0800879c 	.word	0x0800879c

08007654 <memcpy>:
 8007654:	b510      	push	{r4, lr}
 8007656:	1e43      	subs	r3, r0, #1
 8007658:	440a      	add	r2, r1
 800765a:	4291      	cmp	r1, r2
 800765c:	d100      	bne.n	8007660 <memcpy+0xc>
 800765e:	bd10      	pop	{r4, pc}
 8007660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007668:	e7f7      	b.n	800765a <memcpy+0x6>

0800766a <memset>:
 800766a:	4603      	mov	r3, r0
 800766c:	4402      	add	r2, r0
 800766e:	4293      	cmp	r3, r2
 8007670:	d100      	bne.n	8007674 <memset+0xa>
 8007672:	4770      	bx	lr
 8007674:	f803 1b01 	strb.w	r1, [r3], #1
 8007678:	e7f9      	b.n	800766e <memset+0x4>
	...

0800767c <iprintf>:
 800767c:	b40f      	push	{r0, r1, r2, r3}
 800767e:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <iprintf+0x2c>)
 8007680:	b513      	push	{r0, r1, r4, lr}
 8007682:	681c      	ldr	r4, [r3, #0]
 8007684:	b124      	cbz	r4, 8007690 <iprintf+0x14>
 8007686:	69a3      	ldr	r3, [r4, #24]
 8007688:	b913      	cbnz	r3, 8007690 <iprintf+0x14>
 800768a:	4620      	mov	r0, r4
 800768c:	f000 fa38 	bl	8007b00 <__sinit>
 8007690:	ab05      	add	r3, sp, #20
 8007692:	9a04      	ldr	r2, [sp, #16]
 8007694:	68a1      	ldr	r1, [r4, #8]
 8007696:	4620      	mov	r0, r4
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	f000 fbed 	bl	8007e78 <_vfiprintf_r>
 800769e:	b002      	add	sp, #8
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	b004      	add	sp, #16
 80076a6:	4770      	bx	lr
 80076a8:	20000070 	.word	0x20000070

080076ac <_puts_r>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	4605      	mov	r5, r0
 80076b2:	b118      	cbz	r0, 80076bc <_puts_r+0x10>
 80076b4:	6983      	ldr	r3, [r0, #24]
 80076b6:	b90b      	cbnz	r3, 80076bc <_puts_r+0x10>
 80076b8:	f000 fa22 	bl	8007b00 <__sinit>
 80076bc:	69ab      	ldr	r3, [r5, #24]
 80076be:	68ac      	ldr	r4, [r5, #8]
 80076c0:	b913      	cbnz	r3, 80076c8 <_puts_r+0x1c>
 80076c2:	4628      	mov	r0, r5
 80076c4:	f000 fa1c 	bl	8007b00 <__sinit>
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <_puts_r+0xac>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d117      	bne.n	80076fe <_puts_r+0x52>
 80076ce:	686c      	ldr	r4, [r5, #4]
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	071b      	lsls	r3, r3, #28
 80076d4:	d51d      	bpl.n	8007712 <_puts_r+0x66>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	b1db      	cbz	r3, 8007712 <_puts_r+0x66>
 80076da:	3e01      	subs	r6, #1
 80076dc:	68a3      	ldr	r3, [r4, #8]
 80076de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076e2:	3b01      	subs	r3, #1
 80076e4:	60a3      	str	r3, [r4, #8]
 80076e6:	b9e9      	cbnz	r1, 8007724 <_puts_r+0x78>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da2e      	bge.n	800774a <_puts_r+0x9e>
 80076ec:	4622      	mov	r2, r4
 80076ee:	210a      	movs	r1, #10
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 f855 	bl	80077a0 <__swbuf_r>
 80076f6:	3001      	adds	r0, #1
 80076f8:	d011      	beq.n	800771e <_puts_r+0x72>
 80076fa:	200a      	movs	r0, #10
 80076fc:	e011      	b.n	8007722 <_puts_r+0x76>
 80076fe:	4b17      	ldr	r3, [pc, #92]	; (800775c <_puts_r+0xb0>)
 8007700:	429c      	cmp	r4, r3
 8007702:	d101      	bne.n	8007708 <_puts_r+0x5c>
 8007704:	68ac      	ldr	r4, [r5, #8]
 8007706:	e7e3      	b.n	80076d0 <_puts_r+0x24>
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <_puts_r+0xb4>)
 800770a:	429c      	cmp	r4, r3
 800770c:	bf08      	it	eq
 800770e:	68ec      	ldreq	r4, [r5, #12]
 8007710:	e7de      	b.n	80076d0 <_puts_r+0x24>
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f000 f895 	bl	8007844 <__swsetup_r>
 800771a:	2800      	cmp	r0, #0
 800771c:	d0dd      	beq.n	80076da <_puts_r+0x2e>
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	2b00      	cmp	r3, #0
 8007726:	da04      	bge.n	8007732 <_puts_r+0x86>
 8007728:	69a2      	ldr	r2, [r4, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	dc06      	bgt.n	800773c <_puts_r+0x90>
 800772e:	290a      	cmp	r1, #10
 8007730:	d004      	beq.n	800773c <_puts_r+0x90>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	6022      	str	r2, [r4, #0]
 8007738:	7019      	strb	r1, [r3, #0]
 800773a:	e7cf      	b.n	80076dc <_puts_r+0x30>
 800773c:	4622      	mov	r2, r4
 800773e:	4628      	mov	r0, r5
 8007740:	f000 f82e 	bl	80077a0 <__swbuf_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1c9      	bne.n	80076dc <_puts_r+0x30>
 8007748:	e7e9      	b.n	800771e <_puts_r+0x72>
 800774a:	200a      	movs	r0, #10
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	6022      	str	r2, [r4, #0]
 8007752:	7018      	strb	r0, [r3, #0]
 8007754:	e7e5      	b.n	8007722 <_puts_r+0x76>
 8007756:	bf00      	nop
 8007758:	0800871c 	.word	0x0800871c
 800775c:	0800873c 	.word	0x0800873c
 8007760:	080086fc 	.word	0x080086fc

08007764 <puts>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <puts+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f7ff bf9f 	b.w	80076ac <_puts_r>
 800776e:	bf00      	nop
 8007770:	20000070 	.word	0x20000070

08007774 <viprintf>:
 8007774:	4b09      	ldr	r3, [pc, #36]	; (800779c <viprintf+0x28>)
 8007776:	b570      	push	{r4, r5, r6, lr}
 8007778:	681c      	ldr	r4, [r3, #0]
 800777a:	4605      	mov	r5, r0
 800777c:	460e      	mov	r6, r1
 800777e:	b124      	cbz	r4, 800778a <viprintf+0x16>
 8007780:	69a3      	ldr	r3, [r4, #24]
 8007782:	b913      	cbnz	r3, 800778a <viprintf+0x16>
 8007784:	4620      	mov	r0, r4
 8007786:	f000 f9bb 	bl	8007b00 <__sinit>
 800778a:	4633      	mov	r3, r6
 800778c:	462a      	mov	r2, r5
 800778e:	68a1      	ldr	r1, [r4, #8]
 8007790:	4620      	mov	r0, r4
 8007792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007796:	f000 bb6f 	b.w	8007e78 <_vfiprintf_r>
 800779a:	bf00      	nop
 800779c:	20000070 	.word	0x20000070

080077a0 <__swbuf_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	4605      	mov	r5, r0
 80077a8:	b118      	cbz	r0, 80077b2 <__swbuf_r+0x12>
 80077aa:	6983      	ldr	r3, [r0, #24]
 80077ac:	b90b      	cbnz	r3, 80077b2 <__swbuf_r+0x12>
 80077ae:	f000 f9a7 	bl	8007b00 <__sinit>
 80077b2:	4b21      	ldr	r3, [pc, #132]	; (8007838 <__swbuf_r+0x98>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	d12a      	bne.n	800780e <__swbuf_r+0x6e>
 80077b8:	686c      	ldr	r4, [r5, #4]
 80077ba:	69a3      	ldr	r3, [r4, #24]
 80077bc:	60a3      	str	r3, [r4, #8]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	071a      	lsls	r2, r3, #28
 80077c2:	d52e      	bpl.n	8007822 <__swbuf_r+0x82>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	b363      	cbz	r3, 8007822 <__swbuf_r+0x82>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	b2f6      	uxtb	r6, r6
 80077ce:	1ac0      	subs	r0, r0, r3
 80077d0:	6963      	ldr	r3, [r4, #20]
 80077d2:	4637      	mov	r7, r6
 80077d4:	4283      	cmp	r3, r0
 80077d6:	dc04      	bgt.n	80077e2 <__swbuf_r+0x42>
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f926 	bl	8007a2c <_fflush_r>
 80077e0:	bb28      	cbnz	r0, 800782e <__swbuf_r+0x8e>
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	3001      	adds	r0, #1
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60a3      	str	r3, [r4, #8]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	701e      	strb	r6, [r3, #0]
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	4283      	cmp	r3, r0
 80077f6:	d004      	beq.n	8007802 <__swbuf_r+0x62>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	07db      	lsls	r3, r3, #31
 80077fc:	d519      	bpl.n	8007832 <__swbuf_r+0x92>
 80077fe:	2e0a      	cmp	r6, #10
 8007800:	d117      	bne.n	8007832 <__swbuf_r+0x92>
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 f911 	bl	8007a2c <_fflush_r>
 800780a:	b190      	cbz	r0, 8007832 <__swbuf_r+0x92>
 800780c:	e00f      	b.n	800782e <__swbuf_r+0x8e>
 800780e:	4b0b      	ldr	r3, [pc, #44]	; (800783c <__swbuf_r+0x9c>)
 8007810:	429c      	cmp	r4, r3
 8007812:	d101      	bne.n	8007818 <__swbuf_r+0x78>
 8007814:	68ac      	ldr	r4, [r5, #8]
 8007816:	e7d0      	b.n	80077ba <__swbuf_r+0x1a>
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <__swbuf_r+0xa0>)
 800781a:	429c      	cmp	r4, r3
 800781c:	bf08      	it	eq
 800781e:	68ec      	ldreq	r4, [r5, #12]
 8007820:	e7cb      	b.n	80077ba <__swbuf_r+0x1a>
 8007822:	4621      	mov	r1, r4
 8007824:	4628      	mov	r0, r5
 8007826:	f000 f80d 	bl	8007844 <__swsetup_r>
 800782a:	2800      	cmp	r0, #0
 800782c:	d0cc      	beq.n	80077c8 <__swbuf_r+0x28>
 800782e:	f04f 37ff 	mov.w	r7, #4294967295
 8007832:	4638      	mov	r0, r7
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	bf00      	nop
 8007838:	0800871c 	.word	0x0800871c
 800783c:	0800873c 	.word	0x0800873c
 8007840:	080086fc 	.word	0x080086fc

08007844 <__swsetup_r>:
 8007844:	4b32      	ldr	r3, [pc, #200]	; (8007910 <__swsetup_r+0xcc>)
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	681d      	ldr	r5, [r3, #0]
 800784a:	4606      	mov	r6, r0
 800784c:	460c      	mov	r4, r1
 800784e:	b125      	cbz	r5, 800785a <__swsetup_r+0x16>
 8007850:	69ab      	ldr	r3, [r5, #24]
 8007852:	b913      	cbnz	r3, 800785a <__swsetup_r+0x16>
 8007854:	4628      	mov	r0, r5
 8007856:	f000 f953 	bl	8007b00 <__sinit>
 800785a:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <__swsetup_r+0xd0>)
 800785c:	429c      	cmp	r4, r3
 800785e:	d10f      	bne.n	8007880 <__swsetup_r+0x3c>
 8007860:	686c      	ldr	r4, [r5, #4]
 8007862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007866:	b29a      	uxth	r2, r3
 8007868:	0715      	lsls	r5, r2, #28
 800786a:	d42c      	bmi.n	80078c6 <__swsetup_r+0x82>
 800786c:	06d0      	lsls	r0, r2, #27
 800786e:	d411      	bmi.n	8007894 <__swsetup_r+0x50>
 8007870:	2209      	movs	r2, #9
 8007872:	6032      	str	r2, [r6, #0]
 8007874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e03e      	b.n	80078fe <__swsetup_r+0xba>
 8007880:	4b25      	ldr	r3, [pc, #148]	; (8007918 <__swsetup_r+0xd4>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d101      	bne.n	800788a <__swsetup_r+0x46>
 8007886:	68ac      	ldr	r4, [r5, #8]
 8007888:	e7eb      	b.n	8007862 <__swsetup_r+0x1e>
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <__swsetup_r+0xd8>)
 800788c:	429c      	cmp	r4, r3
 800788e:	bf08      	it	eq
 8007890:	68ec      	ldreq	r4, [r5, #12]
 8007892:	e7e6      	b.n	8007862 <__swsetup_r+0x1e>
 8007894:	0751      	lsls	r1, r2, #29
 8007896:	d512      	bpl.n	80078be <__swsetup_r+0x7a>
 8007898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800789a:	b141      	cbz	r1, 80078ae <__swsetup_r+0x6a>
 800789c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d002      	beq.n	80078aa <__swsetup_r+0x66>
 80078a4:	4630      	mov	r0, r6
 80078a6:	f000 fa19 	bl	8007cdc <_free_r>
 80078aa:	2300      	movs	r3, #0
 80078ac:	6363      	str	r3, [r4, #52]	; 0x34
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	2300      	movs	r3, #0
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f043 0308 	orr.w	r3, r3, #8
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	b94b      	cbnz	r3, 80078de <__swsetup_r+0x9a>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d4:	d003      	beq.n	80078de <__swsetup_r+0x9a>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 f9bf 	bl	8007c5c <__smakebuf_r>
 80078de:	89a2      	ldrh	r2, [r4, #12]
 80078e0:	f012 0301 	ands.w	r3, r2, #1
 80078e4:	d00c      	beq.n	8007900 <__swsetup_r+0xbc>
 80078e6:	2300      	movs	r3, #0
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6963      	ldr	r3, [r4, #20]
 80078ec:	425b      	negs	r3, r3
 80078ee:	61a3      	str	r3, [r4, #24]
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b953      	cbnz	r3, 800790a <__swsetup_r+0xc6>
 80078f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80078fc:	d1ba      	bne.n	8007874 <__swsetup_r+0x30>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	0792      	lsls	r2, r2, #30
 8007902:	bf58      	it	pl
 8007904:	6963      	ldrpl	r3, [r4, #20]
 8007906:	60a3      	str	r3, [r4, #8]
 8007908:	e7f2      	b.n	80078f0 <__swsetup_r+0xac>
 800790a:	2000      	movs	r0, #0
 800790c:	e7f7      	b.n	80078fe <__swsetup_r+0xba>
 800790e:	bf00      	nop
 8007910:	20000070 	.word	0x20000070
 8007914:	0800871c 	.word	0x0800871c
 8007918:	0800873c 	.word	0x0800873c
 800791c:	080086fc 	.word	0x080086fc

08007920 <__sflush_r>:
 8007920:	898a      	ldrh	r2, [r1, #12]
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	0710      	lsls	r0, r2, #28
 800792a:	460c      	mov	r4, r1
 800792c:	d458      	bmi.n	80079e0 <__sflush_r+0xc0>
 800792e:	684b      	ldr	r3, [r1, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc05      	bgt.n	8007940 <__sflush_r+0x20>
 8007934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc02      	bgt.n	8007940 <__sflush_r+0x20>
 800793a:	2000      	movs	r0, #0
 800793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007942:	2e00      	cmp	r6, #0
 8007944:	d0f9      	beq.n	800793a <__sflush_r+0x1a>
 8007946:	2300      	movs	r3, #0
 8007948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800794c:	682f      	ldr	r7, [r5, #0]
 800794e:	6a21      	ldr	r1, [r4, #32]
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	d032      	beq.n	80079ba <__sflush_r+0x9a>
 8007954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	075a      	lsls	r2, r3, #29
 800795a:	d505      	bpl.n	8007968 <__sflush_r+0x48>
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	1ac0      	subs	r0, r0, r3
 8007960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007962:	b10b      	cbz	r3, 8007968 <__sflush_r+0x48>
 8007964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007966:	1ac0      	subs	r0, r0, r3
 8007968:	2300      	movs	r3, #0
 800796a:	4602      	mov	r2, r0
 800796c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800796e:	6a21      	ldr	r1, [r4, #32]
 8007970:	4628      	mov	r0, r5
 8007972:	47b0      	blx	r6
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	d106      	bne.n	8007988 <__sflush_r+0x68>
 800797a:	6829      	ldr	r1, [r5, #0]
 800797c:	291d      	cmp	r1, #29
 800797e:	d848      	bhi.n	8007a12 <__sflush_r+0xf2>
 8007980:	4a29      	ldr	r2, [pc, #164]	; (8007a28 <__sflush_r+0x108>)
 8007982:	40ca      	lsrs	r2, r1
 8007984:	07d6      	lsls	r6, r2, #31
 8007986:	d544      	bpl.n	8007a12 <__sflush_r+0xf2>
 8007988:	2200      	movs	r2, #0
 800798a:	6062      	str	r2, [r4, #4]
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	04d9      	lsls	r1, r3, #19
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	d504      	bpl.n	800799e <__sflush_r+0x7e>
 8007994:	1c42      	adds	r2, r0, #1
 8007996:	d101      	bne.n	800799c <__sflush_r+0x7c>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b903      	cbnz	r3, 800799e <__sflush_r+0x7e>
 800799c:	6560      	str	r0, [r4, #84]	; 0x54
 800799e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a0:	602f      	str	r7, [r5, #0]
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d0c9      	beq.n	800793a <__sflush_r+0x1a>
 80079a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079aa:	4299      	cmp	r1, r3
 80079ac:	d002      	beq.n	80079b4 <__sflush_r+0x94>
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f994 	bl	8007cdc <_free_r>
 80079b4:	2000      	movs	r0, #0
 80079b6:	6360      	str	r0, [r4, #52]	; 0x34
 80079b8:	e7c0      	b.n	800793c <__sflush_r+0x1c>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	1c41      	adds	r1, r0, #1
 80079c2:	d1c8      	bne.n	8007956 <__sflush_r+0x36>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c5      	beq.n	8007956 <__sflush_r+0x36>
 80079ca:	2b1d      	cmp	r3, #29
 80079cc:	d001      	beq.n	80079d2 <__sflush_r+0xb2>
 80079ce:	2b16      	cmp	r3, #22
 80079d0:	d101      	bne.n	80079d6 <__sflush_r+0xb6>
 80079d2:	602f      	str	r7, [r5, #0]
 80079d4:	e7b1      	b.n	800793a <__sflush_r+0x1a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	e7ad      	b.n	800793c <__sflush_r+0x1c>
 80079e0:	690f      	ldr	r7, [r1, #16]
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d0a9      	beq.n	800793a <__sflush_r+0x1a>
 80079e6:	0793      	lsls	r3, r2, #30
 80079e8:	bf18      	it	ne
 80079ea:	2300      	movne	r3, #0
 80079ec:	680e      	ldr	r6, [r1, #0]
 80079ee:	bf08      	it	eq
 80079f0:	694b      	ldreq	r3, [r1, #20]
 80079f2:	eba6 0807 	sub.w	r8, r6, r7
 80079f6:	600f      	str	r7, [r1, #0]
 80079f8:	608b      	str	r3, [r1, #8]
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	dd9c      	ble.n	800793a <__sflush_r+0x1a>
 8007a00:	4643      	mov	r3, r8
 8007a02:	463a      	mov	r2, r7
 8007a04:	6a21      	ldr	r1, [r4, #32]
 8007a06:	4628      	mov	r0, r5
 8007a08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a0a:	47b0      	blx	r6
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	dc06      	bgt.n	8007a1e <__sflush_r+0xfe>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	e78e      	b.n	800793c <__sflush_r+0x1c>
 8007a1e:	4407      	add	r7, r0
 8007a20:	eba8 0800 	sub.w	r8, r8, r0
 8007a24:	e7e9      	b.n	80079fa <__sflush_r+0xda>
 8007a26:	bf00      	nop
 8007a28:	20400001 	.word	0x20400001

08007a2c <_fflush_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	4605      	mov	r5, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b1db      	cbz	r3, 8007a6e <_fflush_r+0x42>
 8007a36:	b118      	cbz	r0, 8007a40 <_fflush_r+0x14>
 8007a38:	6983      	ldr	r3, [r0, #24]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <_fflush_r+0x14>
 8007a3c:	f000 f860 	bl	8007b00 <__sinit>
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <_fflush_r+0x48>)
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d109      	bne.n	8007a5a <_fflush_r+0x2e>
 8007a46:	686c      	ldr	r4, [r5, #4]
 8007a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4c:	b17b      	cbz	r3, 8007a6e <_fflush_r+0x42>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a56:	f7ff bf63 	b.w	8007920 <__sflush_r>
 8007a5a:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <_fflush_r+0x4c>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	d101      	bne.n	8007a64 <_fflush_r+0x38>
 8007a60:	68ac      	ldr	r4, [r5, #8]
 8007a62:	e7f1      	b.n	8007a48 <_fflush_r+0x1c>
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <_fflush_r+0x50>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	bf08      	it	eq
 8007a6a:	68ec      	ldreq	r4, [r5, #12]
 8007a6c:	e7ec      	b.n	8007a48 <_fflush_r+0x1c>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	bd38      	pop	{r3, r4, r5, pc}
 8007a72:	bf00      	nop
 8007a74:	0800871c 	.word	0x0800871c
 8007a78:	0800873c 	.word	0x0800873c
 8007a7c:	080086fc 	.word	0x080086fc

08007a80 <std>:
 8007a80:	2300      	movs	r3, #0
 8007a82:	b510      	push	{r4, lr}
 8007a84:	4604      	mov	r4, r0
 8007a86:	e9c0 3300 	strd	r3, r3, [r0]
 8007a8a:	6083      	str	r3, [r0, #8]
 8007a8c:	8181      	strh	r1, [r0, #12]
 8007a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a90:	81c2      	strh	r2, [r0, #14]
 8007a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a96:	6183      	str	r3, [r0, #24]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	2208      	movs	r2, #8
 8007a9c:	305c      	adds	r0, #92	; 0x5c
 8007a9e:	f7ff fde4 	bl	800766a <memset>
 8007aa2:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <std+0x38>)
 8007aa4:	6224      	str	r4, [r4, #32]
 8007aa6:	6263      	str	r3, [r4, #36]	; 0x24
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <std+0x3c>)
 8007aaa:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <std+0x40>)
 8007aae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <std+0x44>)
 8007ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ab4:	bd10      	pop	{r4, pc}
 8007ab6:	bf00      	nop
 8007ab8:	080083d5 	.word	0x080083d5
 8007abc:	080083f7 	.word	0x080083f7
 8007ac0:	0800842f 	.word	0x0800842f
 8007ac4:	08008453 	.word	0x08008453

08007ac8 <_cleanup_r>:
 8007ac8:	4901      	ldr	r1, [pc, #4]	; (8007ad0 <_cleanup_r+0x8>)
 8007aca:	f000 b885 	b.w	8007bd8 <_fwalk_reent>
 8007ace:	bf00      	nop
 8007ad0:	08007a2d 	.word	0x08007a2d

08007ad4 <__sfmoreglue>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	2568      	movs	r5, #104	; 0x68
 8007ad8:	1e4a      	subs	r2, r1, #1
 8007ada:	4355      	muls	r5, r2
 8007adc:	460e      	mov	r6, r1
 8007ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ae2:	f000 f947 	bl	8007d74 <_malloc_r>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	b140      	cbz	r0, 8007afc <__sfmoreglue+0x28>
 8007aea:	2100      	movs	r1, #0
 8007aec:	e9c0 1600 	strd	r1, r6, [r0]
 8007af0:	300c      	adds	r0, #12
 8007af2:	60a0      	str	r0, [r4, #8]
 8007af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007af8:	f7ff fdb7 	bl	800766a <memset>
 8007afc:	4620      	mov	r0, r4
 8007afe:	bd70      	pop	{r4, r5, r6, pc}

08007b00 <__sinit>:
 8007b00:	6983      	ldr	r3, [r0, #24]
 8007b02:	b510      	push	{r4, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	bb33      	cbnz	r3, 8007b56 <__sinit+0x56>
 8007b08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b0c:	6503      	str	r3, [r0, #80]	; 0x50
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <__sinit+0x58>)
 8007b10:	4a12      	ldr	r2, [pc, #72]	; (8007b5c <__sinit+0x5c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6282      	str	r2, [r0, #40]	; 0x28
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bf04      	itt	eq
 8007b1a:	2301      	moveq	r3, #1
 8007b1c:	6183      	streq	r3, [r0, #24]
 8007b1e:	f000 f81f 	bl	8007b60 <__sfp>
 8007b22:	6060      	str	r0, [r4, #4]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 f81b 	bl	8007b60 <__sfp>
 8007b2a:	60a0      	str	r0, [r4, #8]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 f817 	bl	8007b60 <__sfp>
 8007b32:	2200      	movs	r2, #0
 8007b34:	60e0      	str	r0, [r4, #12]
 8007b36:	2104      	movs	r1, #4
 8007b38:	6860      	ldr	r0, [r4, #4]
 8007b3a:	f7ff ffa1 	bl	8007a80 <std>
 8007b3e:	2201      	movs	r2, #1
 8007b40:	2109      	movs	r1, #9
 8007b42:	68a0      	ldr	r0, [r4, #8]
 8007b44:	f7ff ff9c 	bl	8007a80 <std>
 8007b48:	2202      	movs	r2, #2
 8007b4a:	2112      	movs	r1, #18
 8007b4c:	68e0      	ldr	r0, [r4, #12]
 8007b4e:	f7ff ff97 	bl	8007a80 <std>
 8007b52:	2301      	movs	r3, #1
 8007b54:	61a3      	str	r3, [r4, #24]
 8007b56:	bd10      	pop	{r4, pc}
 8007b58:	080086f8 	.word	0x080086f8
 8007b5c:	08007ac9 	.word	0x08007ac9

08007b60 <__sfp>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <__sfp+0x70>)
 8007b64:	4607      	mov	r7, r0
 8007b66:	681e      	ldr	r6, [r3, #0]
 8007b68:	69b3      	ldr	r3, [r6, #24]
 8007b6a:	b913      	cbnz	r3, 8007b72 <__sfp+0x12>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ffc7 	bl	8007b00 <__sinit>
 8007b72:	3648      	adds	r6, #72	; 0x48
 8007b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	d503      	bpl.n	8007b84 <__sfp+0x24>
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	b133      	cbz	r3, 8007b8e <__sfp+0x2e>
 8007b80:	6836      	ldr	r6, [r6, #0]
 8007b82:	e7f7      	b.n	8007b74 <__sfp+0x14>
 8007b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b88:	b16d      	cbz	r5, 8007ba6 <__sfp+0x46>
 8007b8a:	3468      	adds	r4, #104	; 0x68
 8007b8c:	e7f4      	b.n	8007b78 <__sfp+0x18>
 8007b8e:	2104      	movs	r1, #4
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff9f 	bl	8007ad4 <__sfmoreglue>
 8007b96:	6030      	str	r0, [r6, #0]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1f1      	bne.n	8007b80 <__sfp+0x20>
 8007b9c:	230c      	movs	r3, #12
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <__sfp+0x74>)
 8007ba8:	6665      	str	r5, [r4, #100]	; 0x64
 8007baa:	e9c4 5500 	strd	r5, r5, [r4]
 8007bae:	60a5      	str	r5, [r4, #8]
 8007bb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007bb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bc0:	f7ff fd53 	bl	800766a <memset>
 8007bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bcc:	e7e9      	b.n	8007ba2 <__sfp+0x42>
 8007bce:	bf00      	nop
 8007bd0:	080086f8 	.word	0x080086f8
 8007bd4:	ffff0001 	.word	0xffff0001

08007bd8 <_fwalk_reent>:
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	2600      	movs	r6, #0
 8007be2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007be6:	b914      	cbnz	r4, 8007bee <_fwalk_reent+0x16>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007bf2:	3f01      	subs	r7, #1
 8007bf4:	d501      	bpl.n	8007bfa <_fwalk_reent+0x22>
 8007bf6:	6824      	ldr	r4, [r4, #0]
 8007bf8:	e7f5      	b.n	8007be6 <_fwalk_reent+0xe>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d907      	bls.n	8007c10 <_fwalk_reent+0x38>
 8007c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c04:	3301      	adds	r3, #1
 8007c06:	d003      	beq.n	8007c10 <_fwalk_reent+0x38>
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	47c8      	blx	r9
 8007c0e:	4306      	orrs	r6, r0
 8007c10:	3568      	adds	r5, #104	; 0x68
 8007c12:	e7ee      	b.n	8007bf2 <_fwalk_reent+0x1a>

08007c14 <__swhatbuf_r>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	460e      	mov	r6, r1
 8007c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1c:	b096      	sub	sp, #88	; 0x58
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	4614      	mov	r4, r2
 8007c22:	461d      	mov	r5, r3
 8007c24:	da07      	bge.n	8007c36 <__swhatbuf_r+0x22>
 8007c26:	2300      	movs	r3, #0
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	89b3      	ldrh	r3, [r6, #12]
 8007c2c:	061a      	lsls	r2, r3, #24
 8007c2e:	d410      	bmi.n	8007c52 <__swhatbuf_r+0x3e>
 8007c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c34:	e00e      	b.n	8007c54 <__swhatbuf_r+0x40>
 8007c36:	466a      	mov	r2, sp
 8007c38:	f000 fc32 	bl	80084a0 <_fstat_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	dbf2      	blt.n	8007c26 <__swhatbuf_r+0x12>
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c4a:	425a      	negs	r2, r3
 8007c4c:	415a      	adcs	r2, r3
 8007c4e:	602a      	str	r2, [r5, #0]
 8007c50:	e7ee      	b.n	8007c30 <__swhatbuf_r+0x1c>
 8007c52:	2340      	movs	r3, #64	; 0x40
 8007c54:	2000      	movs	r0, #0
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	b016      	add	sp, #88	; 0x58
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}

08007c5c <__smakebuf_r>:
 8007c5c:	898b      	ldrh	r3, [r1, #12]
 8007c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c60:	079d      	lsls	r5, r3, #30
 8007c62:	4606      	mov	r6, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	d507      	bpl.n	8007c78 <__smakebuf_r+0x1c>
 8007c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	2301      	movs	r3, #1
 8007c72:	6163      	str	r3, [r4, #20]
 8007c74:	b002      	add	sp, #8
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	ab01      	add	r3, sp, #4
 8007c7a:	466a      	mov	r2, sp
 8007c7c:	f7ff ffca 	bl	8007c14 <__swhatbuf_r>
 8007c80:	9900      	ldr	r1, [sp, #0]
 8007c82:	4605      	mov	r5, r0
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 f875 	bl	8007d74 <_malloc_r>
 8007c8a:	b948      	cbnz	r0, 8007ca0 <__smakebuf_r+0x44>
 8007c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c90:	059a      	lsls	r2, r3, #22
 8007c92:	d4ef      	bmi.n	8007c74 <__smakebuf_r+0x18>
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	e7e3      	b.n	8007c68 <__smakebuf_r+0xc>
 8007ca0:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <__smakebuf_r+0x7c>)
 8007ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	6020      	str	r0, [r4, #0]
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	6120      	str	r0, [r4, #16]
 8007cb2:	6163      	str	r3, [r4, #20]
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	b15b      	cbz	r3, 8007cd0 <__smakebuf_r+0x74>
 8007cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 fc01 	bl	80084c4 <_isatty_r>
 8007cc2:	b128      	cbz	r0, 8007cd0 <__smakebuf_r+0x74>
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	f023 0303 	bic.w	r3, r3, #3
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	81a3      	strh	r3, [r4, #12]
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	431d      	orrs	r5, r3
 8007cd4:	81a5      	strh	r5, [r4, #12]
 8007cd6:	e7cd      	b.n	8007c74 <__smakebuf_r+0x18>
 8007cd8:	08007ac9 	.word	0x08007ac9

08007cdc <_free_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4605      	mov	r5, r0
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d043      	beq.n	8007d6c <_free_r+0x90>
 8007ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce8:	1f0c      	subs	r4, r1, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bfb8      	it	lt
 8007cee:	18e4      	addlt	r4, r4, r3
 8007cf0:	f000 fc18 	bl	8008524 <__malloc_lock>
 8007cf4:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <_free_r+0x94>)
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	b933      	cbnz	r3, 8007d0a <_free_r+0x2e>
 8007cfc:	6063      	str	r3, [r4, #4]
 8007cfe:	6014      	str	r4, [r2, #0]
 8007d00:	4628      	mov	r0, r5
 8007d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d06:	f000 bc0e 	b.w	8008526 <__malloc_unlock>
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	d90b      	bls.n	8007d26 <_free_r+0x4a>
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	1862      	adds	r2, r4, r1
 8007d12:	4293      	cmp	r3, r2
 8007d14:	bf01      	itttt	eq
 8007d16:	681a      	ldreq	r2, [r3, #0]
 8007d18:	685b      	ldreq	r3, [r3, #4]
 8007d1a:	1852      	addeq	r2, r2, r1
 8007d1c:	6022      	streq	r2, [r4, #0]
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	6004      	str	r4, [r0, #0]
 8007d22:	e7ed      	b.n	8007d00 <_free_r+0x24>
 8007d24:	4613      	mov	r3, r2
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	b10a      	cbz	r2, 8007d2e <_free_r+0x52>
 8007d2a:	42a2      	cmp	r2, r4
 8007d2c:	d9fa      	bls.n	8007d24 <_free_r+0x48>
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	1858      	adds	r0, r3, r1
 8007d32:	42a0      	cmp	r0, r4
 8007d34:	d10b      	bne.n	8007d4e <_free_r+0x72>
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	4401      	add	r1, r0
 8007d3a:	1858      	adds	r0, r3, r1
 8007d3c:	4282      	cmp	r2, r0
 8007d3e:	6019      	str	r1, [r3, #0]
 8007d40:	d1de      	bne.n	8007d00 <_free_r+0x24>
 8007d42:	6810      	ldr	r0, [r2, #0]
 8007d44:	6852      	ldr	r2, [r2, #4]
 8007d46:	4401      	add	r1, r0
 8007d48:	6019      	str	r1, [r3, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	e7d8      	b.n	8007d00 <_free_r+0x24>
 8007d4e:	d902      	bls.n	8007d56 <_free_r+0x7a>
 8007d50:	230c      	movs	r3, #12
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	e7d4      	b.n	8007d00 <_free_r+0x24>
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	1821      	adds	r1, r4, r0
 8007d5a:	428a      	cmp	r2, r1
 8007d5c:	bf01      	itttt	eq
 8007d5e:	6811      	ldreq	r1, [r2, #0]
 8007d60:	6852      	ldreq	r2, [r2, #4]
 8007d62:	1809      	addeq	r1, r1, r0
 8007d64:	6021      	streq	r1, [r4, #0]
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	605c      	str	r4, [r3, #4]
 8007d6a:	e7c9      	b.n	8007d00 <_free_r+0x24>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20004ffc 	.word	0x20004ffc

08007d74 <_malloc_r>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	1ccd      	adds	r5, r1, #3
 8007d78:	f025 0503 	bic.w	r5, r5, #3
 8007d7c:	3508      	adds	r5, #8
 8007d7e:	2d0c      	cmp	r5, #12
 8007d80:	bf38      	it	cc
 8007d82:	250c      	movcc	r5, #12
 8007d84:	2d00      	cmp	r5, #0
 8007d86:	4606      	mov	r6, r0
 8007d88:	db01      	blt.n	8007d8e <_malloc_r+0x1a>
 8007d8a:	42a9      	cmp	r1, r5
 8007d8c:	d903      	bls.n	8007d96 <_malloc_r+0x22>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	6033      	str	r3, [r6, #0]
 8007d92:	2000      	movs	r0, #0
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	f000 fbc5 	bl	8008524 <__malloc_lock>
 8007d9a:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <_malloc_r+0xac>)
 8007d9c:	6814      	ldr	r4, [r2, #0]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	b991      	cbnz	r1, 8007dc8 <_malloc_r+0x54>
 8007da2:	4c20      	ldr	r4, [pc, #128]	; (8007e24 <_malloc_r+0xb0>)
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	b91b      	cbnz	r3, 8007db0 <_malloc_r+0x3c>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f000 fb03 	bl	80083b4 <_sbrk_r>
 8007dae:	6020      	str	r0, [r4, #0]
 8007db0:	4629      	mov	r1, r5
 8007db2:	4630      	mov	r0, r6
 8007db4:	f000 fafe 	bl	80083b4 <_sbrk_r>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d124      	bne.n	8007e06 <_malloc_r+0x92>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	6033      	str	r3, [r6, #0]
 8007dc2:	f000 fbb0 	bl	8008526 <__malloc_unlock>
 8007dc6:	e7e4      	b.n	8007d92 <_malloc_r+0x1e>
 8007dc8:	680b      	ldr	r3, [r1, #0]
 8007dca:	1b5b      	subs	r3, r3, r5
 8007dcc:	d418      	bmi.n	8007e00 <_malloc_r+0x8c>
 8007dce:	2b0b      	cmp	r3, #11
 8007dd0:	d90f      	bls.n	8007df2 <_malloc_r+0x7e>
 8007dd2:	600b      	str	r3, [r1, #0]
 8007dd4:	18cc      	adds	r4, r1, r3
 8007dd6:	50cd      	str	r5, [r1, r3]
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 fba4 	bl	8008526 <__malloc_unlock>
 8007dde:	f104 000b 	add.w	r0, r4, #11
 8007de2:	1d23      	adds	r3, r4, #4
 8007de4:	f020 0007 	bic.w	r0, r0, #7
 8007de8:	1ac3      	subs	r3, r0, r3
 8007dea:	d0d3      	beq.n	8007d94 <_malloc_r+0x20>
 8007dec:	425a      	negs	r2, r3
 8007dee:	50e2      	str	r2, [r4, r3]
 8007df0:	e7d0      	b.n	8007d94 <_malloc_r+0x20>
 8007df2:	684b      	ldr	r3, [r1, #4]
 8007df4:	428c      	cmp	r4, r1
 8007df6:	bf16      	itet	ne
 8007df8:	6063      	strne	r3, [r4, #4]
 8007dfa:	6013      	streq	r3, [r2, #0]
 8007dfc:	460c      	movne	r4, r1
 8007dfe:	e7eb      	b.n	8007dd8 <_malloc_r+0x64>
 8007e00:	460c      	mov	r4, r1
 8007e02:	6849      	ldr	r1, [r1, #4]
 8007e04:	e7cc      	b.n	8007da0 <_malloc_r+0x2c>
 8007e06:	1cc4      	adds	r4, r0, #3
 8007e08:	f024 0403 	bic.w	r4, r4, #3
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d005      	beq.n	8007e1c <_malloc_r+0xa8>
 8007e10:	1a21      	subs	r1, r4, r0
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 face 	bl	80083b4 <_sbrk_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d0cf      	beq.n	8007dbc <_malloc_r+0x48>
 8007e1c:	6025      	str	r5, [r4, #0]
 8007e1e:	e7db      	b.n	8007dd8 <_malloc_r+0x64>
 8007e20:	20004ffc 	.word	0x20004ffc
 8007e24:	20005000 	.word	0x20005000

08007e28 <__sfputc_r>:
 8007e28:	6893      	ldr	r3, [r2, #8]
 8007e2a:	b410      	push	{r4}
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	6093      	str	r3, [r2, #8]
 8007e32:	da07      	bge.n	8007e44 <__sfputc_r+0x1c>
 8007e34:	6994      	ldr	r4, [r2, #24]
 8007e36:	42a3      	cmp	r3, r4
 8007e38:	db01      	blt.n	8007e3e <__sfputc_r+0x16>
 8007e3a:	290a      	cmp	r1, #10
 8007e3c:	d102      	bne.n	8007e44 <__sfputc_r+0x1c>
 8007e3e:	bc10      	pop	{r4}
 8007e40:	f7ff bcae 	b.w	80077a0 <__swbuf_r>
 8007e44:	6813      	ldr	r3, [r2, #0]
 8007e46:	1c58      	adds	r0, r3, #1
 8007e48:	6010      	str	r0, [r2, #0]
 8007e4a:	7019      	strb	r1, [r3, #0]
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	bc10      	pop	{r4}
 8007e50:	4770      	bx	lr

08007e52 <__sfputs_r>:
 8007e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	4614      	mov	r4, r2
 8007e5a:	18d5      	adds	r5, r2, r3
 8007e5c:	42ac      	cmp	r4, r5
 8007e5e:	d101      	bne.n	8007e64 <__sfputs_r+0x12>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e007      	b.n	8007e74 <__sfputs_r+0x22>
 8007e64:	463a      	mov	r2, r7
 8007e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ffdc 	bl	8007e28 <__sfputc_r>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d1f3      	bne.n	8007e5c <__sfputs_r+0xa>
 8007e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e78 <_vfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	b09d      	sub	sp, #116	; 0x74
 8007e80:	4617      	mov	r7, r2
 8007e82:	461d      	mov	r5, r3
 8007e84:	4606      	mov	r6, r0
 8007e86:	b118      	cbz	r0, 8007e90 <_vfiprintf_r+0x18>
 8007e88:	6983      	ldr	r3, [r0, #24]
 8007e8a:	b90b      	cbnz	r3, 8007e90 <_vfiprintf_r+0x18>
 8007e8c:	f7ff fe38 	bl	8007b00 <__sinit>
 8007e90:	4b7c      	ldr	r3, [pc, #496]	; (8008084 <_vfiprintf_r+0x20c>)
 8007e92:	429c      	cmp	r4, r3
 8007e94:	d158      	bne.n	8007f48 <_vfiprintf_r+0xd0>
 8007e96:	6874      	ldr	r4, [r6, #4]
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	0718      	lsls	r0, r3, #28
 8007e9c:	d55e      	bpl.n	8007f5c <_vfiprintf_r+0xe4>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d05b      	beq.n	8007f5c <_vfiprintf_r+0xe4>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eae:	2330      	movs	r3, #48	; 0x30
 8007eb0:	f04f 0b01 	mov.w	fp, #1
 8007eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb8:	9503      	str	r5, [sp, #12]
 8007eba:	46b8      	mov	r8, r7
 8007ebc:	4645      	mov	r5, r8
 8007ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ec2:	b10b      	cbz	r3, 8007ec8 <_vfiprintf_r+0x50>
 8007ec4:	2b25      	cmp	r3, #37	; 0x25
 8007ec6:	d154      	bne.n	8007f72 <_vfiprintf_r+0xfa>
 8007ec8:	ebb8 0a07 	subs.w	sl, r8, r7
 8007ecc:	d00b      	beq.n	8007ee6 <_vfiprintf_r+0x6e>
 8007ece:	4653      	mov	r3, sl
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff ffbc 	bl	8007e52 <__sfputs_r>
 8007eda:	3001      	adds	r0, #1
 8007edc:	f000 80c2 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	4453      	add	r3, sl
 8007ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee6:	f898 3000 	ldrb.w	r3, [r8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80ba 	beq.w	8008064 <_vfiprintf_r+0x1ec>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	9307      	str	r3, [sp, #28]
 8007efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f02:	931a      	str	r3, [sp, #104]	; 0x68
 8007f04:	46a8      	mov	r8, r5
 8007f06:	2205      	movs	r2, #5
 8007f08:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007f0c:	485e      	ldr	r0, [pc, #376]	; (8008088 <_vfiprintf_r+0x210>)
 8007f0e:	f000 fafb 	bl	8008508 <memchr>
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	bb78      	cbnz	r0, 8007f76 <_vfiprintf_r+0xfe>
 8007f16:	06d9      	lsls	r1, r3, #27
 8007f18:	bf44      	itt	mi
 8007f1a:	2220      	movmi	r2, #32
 8007f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f20:	071a      	lsls	r2, r3, #28
 8007f22:	bf44      	itt	mi
 8007f24:	222b      	movmi	r2, #43	; 0x2b
 8007f26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f2a:	782a      	ldrb	r2, [r5, #0]
 8007f2c:	2a2a      	cmp	r2, #42	; 0x2a
 8007f2e:	d02a      	beq.n	8007f86 <_vfiprintf_r+0x10e>
 8007f30:	46a8      	mov	r8, r5
 8007f32:	2000      	movs	r0, #0
 8007f34:	250a      	movs	r5, #10
 8007f36:	9a07      	ldr	r2, [sp, #28]
 8007f38:	4641      	mov	r1, r8
 8007f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3e:	3b30      	subs	r3, #48	; 0x30
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d969      	bls.n	8008018 <_vfiprintf_r+0x1a0>
 8007f44:	b360      	cbz	r0, 8007fa0 <_vfiprintf_r+0x128>
 8007f46:	e024      	b.n	8007f92 <_vfiprintf_r+0x11a>
 8007f48:	4b50      	ldr	r3, [pc, #320]	; (800808c <_vfiprintf_r+0x214>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <_vfiprintf_r+0xda>
 8007f4e:	68b4      	ldr	r4, [r6, #8]
 8007f50:	e7a2      	b.n	8007e98 <_vfiprintf_r+0x20>
 8007f52:	4b4f      	ldr	r3, [pc, #316]	; (8008090 <_vfiprintf_r+0x218>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68f4      	ldreq	r4, [r6, #12]
 8007f5a:	e79d      	b.n	8007e98 <_vfiprintf_r+0x20>
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff fc70 	bl	8007844 <__swsetup_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d09d      	beq.n	8007ea4 <_vfiprintf_r+0x2c>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	b01d      	add	sp, #116	; 0x74
 8007f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f72:	46a8      	mov	r8, r5
 8007f74:	e7a2      	b.n	8007ebc <_vfiprintf_r+0x44>
 8007f76:	4a44      	ldr	r2, [pc, #272]	; (8008088 <_vfiprintf_r+0x210>)
 8007f78:	4645      	mov	r5, r8
 8007f7a:	1a80      	subs	r0, r0, r2
 8007f7c:	fa0b f000 	lsl.w	r0, fp, r0
 8007f80:	4318      	orrs	r0, r3
 8007f82:	9004      	str	r0, [sp, #16]
 8007f84:	e7be      	b.n	8007f04 <_vfiprintf_r+0x8c>
 8007f86:	9a03      	ldr	r2, [sp, #12]
 8007f88:	1d11      	adds	r1, r2, #4
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	9103      	str	r1, [sp, #12]
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	db01      	blt.n	8007f96 <_vfiprintf_r+0x11e>
 8007f92:	9207      	str	r2, [sp, #28]
 8007f94:	e004      	b.n	8007fa0 <_vfiprintf_r+0x128>
 8007f96:	4252      	negs	r2, r2
 8007f98:	f043 0302 	orr.w	r3, r3, #2
 8007f9c:	9207      	str	r2, [sp, #28]
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	f898 3000 	ldrb.w	r3, [r8]
 8007fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8007fa6:	d10e      	bne.n	8007fc6 <_vfiprintf_r+0x14e>
 8007fa8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fac:	2b2a      	cmp	r3, #42	; 0x2a
 8007fae:	d138      	bne.n	8008022 <_vfiprintf_r+0x1aa>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	f108 0802 	add.w	r8, r8, #2
 8007fb6:	1d1a      	adds	r2, r3, #4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	9203      	str	r2, [sp, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfb8      	it	lt
 8007fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fc4:	9305      	str	r3, [sp, #20]
 8007fc6:	4d33      	ldr	r5, [pc, #204]	; (8008094 <_vfiprintf_r+0x21c>)
 8007fc8:	2203      	movs	r2, #3
 8007fca:	f898 1000 	ldrb.w	r1, [r8]
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 fa9a 	bl	8008508 <memchr>
 8007fd4:	b140      	cbz	r0, 8007fe8 <_vfiprintf_r+0x170>
 8007fd6:	2340      	movs	r3, #64	; 0x40
 8007fd8:	1b40      	subs	r0, r0, r5
 8007fda:	fa03 f000 	lsl.w	r0, r3, r0
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	f108 0801 	add.w	r8, r8, #1
 8007fe4:	4303      	orrs	r3, r0
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	f898 1000 	ldrb.w	r1, [r8]
 8007fec:	2206      	movs	r2, #6
 8007fee:	482a      	ldr	r0, [pc, #168]	; (8008098 <_vfiprintf_r+0x220>)
 8007ff0:	f108 0701 	add.w	r7, r8, #1
 8007ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ff8:	f000 fa86 	bl	8008508 <memchr>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d037      	beq.n	8008070 <_vfiprintf_r+0x1f8>
 8008000:	4b26      	ldr	r3, [pc, #152]	; (800809c <_vfiprintf_r+0x224>)
 8008002:	bb1b      	cbnz	r3, 800804c <_vfiprintf_r+0x1d4>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	3307      	adds	r3, #7
 8008008:	f023 0307 	bic.w	r3, r3, #7
 800800c:	3308      	adds	r3, #8
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008012:	444b      	add	r3, r9
 8008014:	9309      	str	r3, [sp, #36]	; 0x24
 8008016:	e750      	b.n	8007eba <_vfiprintf_r+0x42>
 8008018:	fb05 3202 	mla	r2, r5, r2, r3
 800801c:	2001      	movs	r0, #1
 800801e:	4688      	mov	r8, r1
 8008020:	e78a      	b.n	8007f38 <_vfiprintf_r+0xc0>
 8008022:	2300      	movs	r3, #0
 8008024:	250a      	movs	r5, #10
 8008026:	4619      	mov	r1, r3
 8008028:	f108 0801 	add.w	r8, r8, #1
 800802c:	9305      	str	r3, [sp, #20]
 800802e:	4640      	mov	r0, r8
 8008030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008034:	3a30      	subs	r2, #48	; 0x30
 8008036:	2a09      	cmp	r2, #9
 8008038:	d903      	bls.n	8008042 <_vfiprintf_r+0x1ca>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0c3      	beq.n	8007fc6 <_vfiprintf_r+0x14e>
 800803e:	9105      	str	r1, [sp, #20]
 8008040:	e7c1      	b.n	8007fc6 <_vfiprintf_r+0x14e>
 8008042:	fb05 2101 	mla	r1, r5, r1, r2
 8008046:	2301      	movs	r3, #1
 8008048:	4680      	mov	r8, r0
 800804a:	e7f0      	b.n	800802e <_vfiprintf_r+0x1b6>
 800804c:	ab03      	add	r3, sp, #12
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4622      	mov	r2, r4
 8008052:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <_vfiprintf_r+0x228>)
 8008054:	a904      	add	r1, sp, #16
 8008056:	4630      	mov	r0, r6
 8008058:	f3af 8000 	nop.w
 800805c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008060:	4681      	mov	r9, r0
 8008062:	d1d5      	bne.n	8008010 <_vfiprintf_r+0x198>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	065b      	lsls	r3, r3, #25
 8008068:	f53f af7e 	bmi.w	8007f68 <_vfiprintf_r+0xf0>
 800806c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806e:	e77d      	b.n	8007f6c <_vfiprintf_r+0xf4>
 8008070:	ab03      	add	r3, sp, #12
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	4622      	mov	r2, r4
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <_vfiprintf_r+0x228>)
 8008078:	a904      	add	r1, sp, #16
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f888 	bl	8008190 <_printf_i>
 8008080:	e7ec      	b.n	800805c <_vfiprintf_r+0x1e4>
 8008082:	bf00      	nop
 8008084:	0800871c 	.word	0x0800871c
 8008088:	0800875c 	.word	0x0800875c
 800808c:	0800873c 	.word	0x0800873c
 8008090:	080086fc 	.word	0x080086fc
 8008094:	08008762 	.word	0x08008762
 8008098:	08008766 	.word	0x08008766
 800809c:	00000000 	.word	0x00000000
 80080a0:	08007e53 	.word	0x08007e53

080080a4 <_printf_common>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	4691      	mov	r9, r2
 80080aa:	461f      	mov	r7, r3
 80080ac:	688a      	ldr	r2, [r1, #8]
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	4606      	mov	r6, r0
 80080b2:	4293      	cmp	r3, r2
 80080b4:	bfb8      	it	lt
 80080b6:	4613      	movlt	r3, r2
 80080b8:	f8c9 3000 	str.w	r3, [r9]
 80080bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080c0:	460c      	mov	r4, r1
 80080c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c6:	b112      	cbz	r2, 80080ce <_printf_common+0x2a>
 80080c8:	3301      	adds	r3, #1
 80080ca:	f8c9 3000 	str.w	r3, [r9]
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	0699      	lsls	r1, r3, #26
 80080d2:	bf42      	ittt	mi
 80080d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080d8:	3302      	addmi	r3, #2
 80080da:	f8c9 3000 	strmi.w	r3, [r9]
 80080de:	6825      	ldr	r5, [r4, #0]
 80080e0:	f015 0506 	ands.w	r5, r5, #6
 80080e4:	d107      	bne.n	80080f6 <_printf_common+0x52>
 80080e6:	f104 0a19 	add.w	sl, r4, #25
 80080ea:	68e3      	ldr	r3, [r4, #12]
 80080ec:	f8d9 2000 	ldr.w	r2, [r9]
 80080f0:	1a9b      	subs	r3, r3, r2
 80080f2:	42ab      	cmp	r3, r5
 80080f4:	dc29      	bgt.n	800814a <_printf_common+0xa6>
 80080f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	3300      	adds	r3, #0
 80080fe:	bf18      	it	ne
 8008100:	2301      	movne	r3, #1
 8008102:	0692      	lsls	r2, r2, #26
 8008104:	d42e      	bmi.n	8008164 <_printf_common+0xc0>
 8008106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800810a:	4639      	mov	r1, r7
 800810c:	4630      	mov	r0, r6
 800810e:	47c0      	blx	r8
 8008110:	3001      	adds	r0, #1
 8008112:	d021      	beq.n	8008158 <_printf_common+0xb4>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	68e5      	ldr	r5, [r4, #12]
 8008118:	f003 0306 	and.w	r3, r3, #6
 800811c:	2b04      	cmp	r3, #4
 800811e:	bf18      	it	ne
 8008120:	2500      	movne	r5, #0
 8008122:	f8d9 2000 	ldr.w	r2, [r9]
 8008126:	f04f 0900 	mov.w	r9, #0
 800812a:	bf08      	it	eq
 800812c:	1aad      	subeq	r5, r5, r2
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	bf08      	it	eq
 8008134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008138:	4293      	cmp	r3, r2
 800813a:	bfc4      	itt	gt
 800813c:	1a9b      	subgt	r3, r3, r2
 800813e:	18ed      	addgt	r5, r5, r3
 8008140:	341a      	adds	r4, #26
 8008142:	454d      	cmp	r5, r9
 8008144:	d11a      	bne.n	800817c <_printf_common+0xd8>
 8008146:	2000      	movs	r0, #0
 8008148:	e008      	b.n	800815c <_printf_common+0xb8>
 800814a:	2301      	movs	r3, #1
 800814c:	4652      	mov	r2, sl
 800814e:	4639      	mov	r1, r7
 8008150:	4630      	mov	r0, r6
 8008152:	47c0      	blx	r8
 8008154:	3001      	adds	r0, #1
 8008156:	d103      	bne.n	8008160 <_printf_common+0xbc>
 8008158:	f04f 30ff 	mov.w	r0, #4294967295
 800815c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008160:	3501      	adds	r5, #1
 8008162:	e7c2      	b.n	80080ea <_printf_common+0x46>
 8008164:	2030      	movs	r0, #48	; 0x30
 8008166:	18e1      	adds	r1, r4, r3
 8008168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008172:	4422      	add	r2, r4
 8008174:	3302      	adds	r3, #2
 8008176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800817a:	e7c4      	b.n	8008106 <_printf_common+0x62>
 800817c:	2301      	movs	r3, #1
 800817e:	4622      	mov	r2, r4
 8008180:	4639      	mov	r1, r7
 8008182:	4630      	mov	r0, r6
 8008184:	47c0      	blx	r8
 8008186:	3001      	adds	r0, #1
 8008188:	d0e6      	beq.n	8008158 <_printf_common+0xb4>
 800818a:	f109 0901 	add.w	r9, r9, #1
 800818e:	e7d8      	b.n	8008142 <_printf_common+0x9e>

08008190 <_printf_i>:
 8008190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008194:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008198:	460c      	mov	r4, r1
 800819a:	7e09      	ldrb	r1, [r1, #24]
 800819c:	b085      	sub	sp, #20
 800819e:	296e      	cmp	r1, #110	; 0x6e
 80081a0:	4617      	mov	r7, r2
 80081a2:	4606      	mov	r6, r0
 80081a4:	4698      	mov	r8, r3
 80081a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081a8:	f000 80b3 	beq.w	8008312 <_printf_i+0x182>
 80081ac:	d822      	bhi.n	80081f4 <_printf_i+0x64>
 80081ae:	2963      	cmp	r1, #99	; 0x63
 80081b0:	d036      	beq.n	8008220 <_printf_i+0x90>
 80081b2:	d80a      	bhi.n	80081ca <_printf_i+0x3a>
 80081b4:	2900      	cmp	r1, #0
 80081b6:	f000 80b9 	beq.w	800832c <_printf_i+0x19c>
 80081ba:	2958      	cmp	r1, #88	; 0x58
 80081bc:	f000 8083 	beq.w	80082c6 <_printf_i+0x136>
 80081c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081c8:	e032      	b.n	8008230 <_printf_i+0xa0>
 80081ca:	2964      	cmp	r1, #100	; 0x64
 80081cc:	d001      	beq.n	80081d2 <_printf_i+0x42>
 80081ce:	2969      	cmp	r1, #105	; 0x69
 80081d0:	d1f6      	bne.n	80081c0 <_printf_i+0x30>
 80081d2:	6820      	ldr	r0, [r4, #0]
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	0605      	lsls	r5, r0, #24
 80081d8:	f103 0104 	add.w	r1, r3, #4
 80081dc:	d52a      	bpl.n	8008234 <_printf_i+0xa4>
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da03      	bge.n	80081ee <_printf_i+0x5e>
 80081e6:	222d      	movs	r2, #45	; 0x2d
 80081e8:	425b      	negs	r3, r3
 80081ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081ee:	486f      	ldr	r0, [pc, #444]	; (80083ac <_printf_i+0x21c>)
 80081f0:	220a      	movs	r2, #10
 80081f2:	e039      	b.n	8008268 <_printf_i+0xd8>
 80081f4:	2973      	cmp	r1, #115	; 0x73
 80081f6:	f000 809d 	beq.w	8008334 <_printf_i+0x1a4>
 80081fa:	d808      	bhi.n	800820e <_printf_i+0x7e>
 80081fc:	296f      	cmp	r1, #111	; 0x6f
 80081fe:	d020      	beq.n	8008242 <_printf_i+0xb2>
 8008200:	2970      	cmp	r1, #112	; 0x70
 8008202:	d1dd      	bne.n	80081c0 <_printf_i+0x30>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	f043 0320 	orr.w	r3, r3, #32
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	e003      	b.n	8008216 <_printf_i+0x86>
 800820e:	2975      	cmp	r1, #117	; 0x75
 8008210:	d017      	beq.n	8008242 <_printf_i+0xb2>
 8008212:	2978      	cmp	r1, #120	; 0x78
 8008214:	d1d4      	bne.n	80081c0 <_printf_i+0x30>
 8008216:	2378      	movs	r3, #120	; 0x78
 8008218:	4865      	ldr	r0, [pc, #404]	; (80083b0 <_printf_i+0x220>)
 800821a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800821e:	e055      	b.n	80082cc <_printf_i+0x13c>
 8008220:	6813      	ldr	r3, [r2, #0]
 8008222:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008226:	1d19      	adds	r1, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6011      	str	r1, [r2, #0]
 800822c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008230:	2301      	movs	r3, #1
 8008232:	e08c      	b.n	800834e <_printf_i+0x1be>
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800823a:	6011      	str	r1, [r2, #0]
 800823c:	bf18      	it	ne
 800823e:	b21b      	sxthne	r3, r3
 8008240:	e7cf      	b.n	80081e2 <_printf_i+0x52>
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1d18      	adds	r0, r3, #4
 8008248:	6010      	str	r0, [r2, #0]
 800824a:	0628      	lsls	r0, r5, #24
 800824c:	d501      	bpl.n	8008252 <_printf_i+0xc2>
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	e002      	b.n	8008258 <_printf_i+0xc8>
 8008252:	0668      	lsls	r0, r5, #25
 8008254:	d5fb      	bpl.n	800824e <_printf_i+0xbe>
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	296f      	cmp	r1, #111	; 0x6f
 800825a:	bf14      	ite	ne
 800825c:	220a      	movne	r2, #10
 800825e:	2208      	moveq	r2, #8
 8008260:	4852      	ldr	r0, [pc, #328]	; (80083ac <_printf_i+0x21c>)
 8008262:	2100      	movs	r1, #0
 8008264:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008268:	6865      	ldr	r5, [r4, #4]
 800826a:	2d00      	cmp	r5, #0
 800826c:	60a5      	str	r5, [r4, #8]
 800826e:	f2c0 8095 	blt.w	800839c <_printf_i+0x20c>
 8008272:	6821      	ldr	r1, [r4, #0]
 8008274:	f021 0104 	bic.w	r1, r1, #4
 8008278:	6021      	str	r1, [r4, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d13d      	bne.n	80082fa <_printf_i+0x16a>
 800827e:	2d00      	cmp	r5, #0
 8008280:	f040 808e 	bne.w	80083a0 <_printf_i+0x210>
 8008284:	4665      	mov	r5, ip
 8008286:	2a08      	cmp	r2, #8
 8008288:	d10b      	bne.n	80082a2 <_printf_i+0x112>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	07db      	lsls	r3, r3, #31
 800828e:	d508      	bpl.n	80082a2 <_printf_i+0x112>
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	6862      	ldr	r2, [r4, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	bfde      	ittt	le
 8008298:	2330      	movle	r3, #48	; 0x30
 800829a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800829e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082a2:	ebac 0305 	sub.w	r3, ip, r5
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	f8cd 8000 	str.w	r8, [sp]
 80082ac:	463b      	mov	r3, r7
 80082ae:	aa03      	add	r2, sp, #12
 80082b0:	4621      	mov	r1, r4
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff fef6 	bl	80080a4 <_printf_common>
 80082b8:	3001      	adds	r0, #1
 80082ba:	d14d      	bne.n	8008358 <_printf_i+0x1c8>
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	b005      	add	sp, #20
 80082c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c6:	4839      	ldr	r0, [pc, #228]	; (80083ac <_printf_i+0x21c>)
 80082c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082cc:	6813      	ldr	r3, [r2, #0]
 80082ce:	6821      	ldr	r1, [r4, #0]
 80082d0:	1d1d      	adds	r5, r3, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6015      	str	r5, [r2, #0]
 80082d6:	060a      	lsls	r2, r1, #24
 80082d8:	d50b      	bpl.n	80082f2 <_printf_i+0x162>
 80082da:	07ca      	lsls	r2, r1, #31
 80082dc:	bf44      	itt	mi
 80082de:	f041 0120 	orrmi.w	r1, r1, #32
 80082e2:	6021      	strmi	r1, [r4, #0]
 80082e4:	b91b      	cbnz	r3, 80082ee <_printf_i+0x15e>
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	f022 0220 	bic.w	r2, r2, #32
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	2210      	movs	r2, #16
 80082f0:	e7b7      	b.n	8008262 <_printf_i+0xd2>
 80082f2:	064d      	lsls	r5, r1, #25
 80082f4:	bf48      	it	mi
 80082f6:	b29b      	uxthmi	r3, r3
 80082f8:	e7ef      	b.n	80082da <_printf_i+0x14a>
 80082fa:	4665      	mov	r5, ip
 80082fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008300:	fb02 3311 	mls	r3, r2, r1, r3
 8008304:	5cc3      	ldrb	r3, [r0, r3]
 8008306:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800830a:	460b      	mov	r3, r1
 800830c:	2900      	cmp	r1, #0
 800830e:	d1f5      	bne.n	80082fc <_printf_i+0x16c>
 8008310:	e7b9      	b.n	8008286 <_printf_i+0xf6>
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	6825      	ldr	r5, [r4, #0]
 8008316:	1d18      	adds	r0, r3, #4
 8008318:	6961      	ldr	r1, [r4, #20]
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	0628      	lsls	r0, r5, #24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	d501      	bpl.n	8008326 <_printf_i+0x196>
 8008322:	6019      	str	r1, [r3, #0]
 8008324:	e002      	b.n	800832c <_printf_i+0x19c>
 8008326:	066a      	lsls	r2, r5, #25
 8008328:	d5fb      	bpl.n	8008322 <_printf_i+0x192>
 800832a:	8019      	strh	r1, [r3, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	4665      	mov	r5, ip
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	e7b9      	b.n	80082a8 <_printf_i+0x118>
 8008334:	6813      	ldr	r3, [r2, #0]
 8008336:	1d19      	adds	r1, r3, #4
 8008338:	6011      	str	r1, [r2, #0]
 800833a:	681d      	ldr	r5, [r3, #0]
 800833c:	6862      	ldr	r2, [r4, #4]
 800833e:	2100      	movs	r1, #0
 8008340:	4628      	mov	r0, r5
 8008342:	f000 f8e1 	bl	8008508 <memchr>
 8008346:	b108      	cbz	r0, 800834c <_printf_i+0x1bc>
 8008348:	1b40      	subs	r0, r0, r5
 800834a:	6060      	str	r0, [r4, #4]
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	2300      	movs	r3, #0
 8008352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008356:	e7a7      	b.n	80082a8 <_printf_i+0x118>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	462a      	mov	r2, r5
 800835c:	4639      	mov	r1, r7
 800835e:	4630      	mov	r0, r6
 8008360:	47c0      	blx	r8
 8008362:	3001      	adds	r0, #1
 8008364:	d0aa      	beq.n	80082bc <_printf_i+0x12c>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	079b      	lsls	r3, r3, #30
 800836a:	d413      	bmi.n	8008394 <_printf_i+0x204>
 800836c:	68e0      	ldr	r0, [r4, #12]
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	4298      	cmp	r0, r3
 8008372:	bfb8      	it	lt
 8008374:	4618      	movlt	r0, r3
 8008376:	e7a3      	b.n	80082c0 <_printf_i+0x130>
 8008378:	2301      	movs	r3, #1
 800837a:	464a      	mov	r2, r9
 800837c:	4639      	mov	r1, r7
 800837e:	4630      	mov	r0, r6
 8008380:	47c0      	blx	r8
 8008382:	3001      	adds	r0, #1
 8008384:	d09a      	beq.n	80082bc <_printf_i+0x12c>
 8008386:	3501      	adds	r5, #1
 8008388:	68e3      	ldr	r3, [r4, #12]
 800838a:	9a03      	ldr	r2, [sp, #12]
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	42ab      	cmp	r3, r5
 8008390:	dcf2      	bgt.n	8008378 <_printf_i+0x1e8>
 8008392:	e7eb      	b.n	800836c <_printf_i+0x1dc>
 8008394:	2500      	movs	r5, #0
 8008396:	f104 0919 	add.w	r9, r4, #25
 800839a:	e7f5      	b.n	8008388 <_printf_i+0x1f8>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1ac      	bne.n	80082fa <_printf_i+0x16a>
 80083a0:	7803      	ldrb	r3, [r0, #0]
 80083a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083aa:	e76c      	b.n	8008286 <_printf_i+0xf6>
 80083ac:	0800876d 	.word	0x0800876d
 80083b0:	0800877e 	.word	0x0800877e

080083b4 <_sbrk_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	2300      	movs	r3, #0
 80083b8:	4c05      	ldr	r4, [pc, #20]	; (80083d0 <_sbrk_r+0x1c>)
 80083ba:	4605      	mov	r5, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	f7f8 ff78 	bl	80012b4 <_sbrk>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_sbrk_r+0x1a>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_sbrk_r+0x1a>
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	200053d4 	.word	0x200053d4

080083d4 <__sread>:
 80083d4:	b510      	push	{r4, lr}
 80083d6:	460c      	mov	r4, r1
 80083d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083dc:	f000 f8a4 	bl	8008528 <_read_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	bfab      	itete	ge
 80083e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083e6:	89a3      	ldrhlt	r3, [r4, #12]
 80083e8:	181b      	addge	r3, r3, r0
 80083ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083ee:	bfac      	ite	ge
 80083f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80083f2:	81a3      	strhlt	r3, [r4, #12]
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <__swrite>:
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fa:	461f      	mov	r7, r3
 80083fc:	898b      	ldrh	r3, [r1, #12]
 80083fe:	4605      	mov	r5, r0
 8008400:	05db      	lsls	r3, r3, #23
 8008402:	460c      	mov	r4, r1
 8008404:	4616      	mov	r6, r2
 8008406:	d505      	bpl.n	8008414 <__swrite+0x1e>
 8008408:	2302      	movs	r3, #2
 800840a:	2200      	movs	r2, #0
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	f000 f868 	bl	80084e4 <_lseek_r>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	4632      	mov	r2, r6
 8008418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008422:	463b      	mov	r3, r7
 8008424:	4628      	mov	r0, r5
 8008426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800842a:	f000 b817 	b.w	800845c <_write_r>

0800842e <__sseek>:
 800842e:	b510      	push	{r4, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008436:	f000 f855 	bl	80084e4 <_lseek_r>
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	bf15      	itete	ne
 8008440:	6560      	strne	r0, [r4, #84]	; 0x54
 8008442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800844a:	81a3      	strheq	r3, [r4, #12]
 800844c:	bf18      	it	ne
 800844e:	81a3      	strhne	r3, [r4, #12]
 8008450:	bd10      	pop	{r4, pc}

08008452 <__sclose>:
 8008452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008456:	f000 b813 	b.w	8008480 <_close_r>
	...

0800845c <_write_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	2200      	movs	r2, #0
 8008466:	4c05      	ldr	r4, [pc, #20]	; (800847c <_write_r+0x20>)
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	f7f8 fed5 	bl	800121a <_write>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_write_r+0x1e>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	b103      	cbz	r3, 800847a <_write_r+0x1e>
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	200053d4 	.word	0x200053d4

08008480 <_close_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	2300      	movs	r3, #0
 8008484:	4c05      	ldr	r4, [pc, #20]	; (800849c <_close_r+0x1c>)
 8008486:	4605      	mov	r5, r0
 8008488:	4608      	mov	r0, r1
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	f7f8 fee1 	bl	8001252 <_close>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_close_r+0x1a>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	b103      	cbz	r3, 800849a <_close_r+0x1a>
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	200053d4 	.word	0x200053d4

080084a0 <_fstat_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	2300      	movs	r3, #0
 80084a4:	4c06      	ldr	r4, [pc, #24]	; (80084c0 <_fstat_r+0x20>)
 80084a6:	4605      	mov	r5, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	f7f8 fedb 	bl	8001268 <_fstat>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	d102      	bne.n	80084bc <_fstat_r+0x1c>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	b103      	cbz	r3, 80084bc <_fstat_r+0x1c>
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
 80084be:	bf00      	nop
 80084c0:	200053d4 	.word	0x200053d4

080084c4 <_isatty_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	2300      	movs	r3, #0
 80084c8:	4c05      	ldr	r4, [pc, #20]	; (80084e0 <_isatty_r+0x1c>)
 80084ca:	4605      	mov	r5, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	f7f8 fed9 	bl	8001286 <_isatty>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_isatty_r+0x1a>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	b103      	cbz	r3, 80084de <_isatty_r+0x1a>
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200053d4 	.word	0x200053d4

080084e4 <_lseek_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	4c05      	ldr	r4, [pc, #20]	; (8008504 <_lseek_r+0x20>)
 80084f0:	6022      	str	r2, [r4, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f7f8 fed1 	bl	800129a <_lseek>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_lseek_r+0x1e>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_lseek_r+0x1e>
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200053d4 	.word	0x200053d4

08008508 <memchr>:
 8008508:	b510      	push	{r4, lr}
 800850a:	b2c9      	uxtb	r1, r1
 800850c:	4402      	add	r2, r0
 800850e:	4290      	cmp	r0, r2
 8008510:	4603      	mov	r3, r0
 8008512:	d101      	bne.n	8008518 <memchr+0x10>
 8008514:	2300      	movs	r3, #0
 8008516:	e003      	b.n	8008520 <memchr+0x18>
 8008518:	781c      	ldrb	r4, [r3, #0]
 800851a:	3001      	adds	r0, #1
 800851c:	428c      	cmp	r4, r1
 800851e:	d1f6      	bne.n	800850e <memchr+0x6>
 8008520:	4618      	mov	r0, r3
 8008522:	bd10      	pop	{r4, pc}

08008524 <__malloc_lock>:
 8008524:	4770      	bx	lr

08008526 <__malloc_unlock>:
 8008526:	4770      	bx	lr

08008528 <_read_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4605      	mov	r5, r0
 800852c:	4608      	mov	r0, r1
 800852e:	4611      	mov	r1, r2
 8008530:	2200      	movs	r2, #0
 8008532:	4c05      	ldr	r4, [pc, #20]	; (8008548 <_read_r+0x20>)
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f7f8 fe52 	bl	80011e0 <_read>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_read_r+0x1e>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	b103      	cbz	r3, 8008546 <_read_r+0x1e>
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	200053d4 	.word	0x200053d4

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
